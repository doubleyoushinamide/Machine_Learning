{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "da3f89d1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-28T21:38:31.928018Z",
     "iopub.status.busy": "2025-07-28T21:38:31.927709Z",
     "iopub.status.idle": "2025-07-28T21:39:46.574864Z",
     "shell.execute_reply": "2025-07-28T21:39:46.574024Z"
    },
    "papermill": {
     "duration": 74.652632,
     "end_time": "2025-07-28T21:39:46.576426",
     "exception": false,
     "start_time": "2025-07-28T21:38:31.923794",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m3.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m73.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m61.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m36.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m30.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m13.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m81.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09a892a2",
   "metadata": {
    "papermill": {
     "duration": 0.022685,
     "end_time": "2025-07-28T21:39:46.624084",
     "exception": false,
     "start_time": "2025-07-28T21:39:46.601399",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Config Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3dc76798",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T21:39:46.669612Z",
     "iopub.status.busy": "2025-07-28T21:39:46.669287Z",
     "iopub.status.idle": "2025-07-28T21:39:46.677679Z",
     "shell.execute_reply": "2025-07-28T21:39:46.676875Z"
    },
    "papermill": {
     "duration": 0.032926,
     "end_time": "2025-07-28T21:39:46.678956",
     "exception": false,
     "start_time": "2025-07-28T21:39:46.646030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Facial Detection System\n",
    "Optimized for Kaggle hardware constraints\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "\n",
    "class Config:\n",
    "    # Hardware constraints for Kaggle\n",
    "    GPU_MEMORY_LIMIT = 14  # GB (leaving 2GB buffer)\n",
    "    RAM_LIMIT = 28  # GB (leaving 4GB buffer)\n",
    "    CPU_CORES = 4\n",
    "    \n",
    "    # Dataset settings\n",
    "    DATASET_NAME = \"davido-recognition\"  # Custom Davido recognition dataset\n",
    "    TRAIN_SPLIT = 0.8\n",
    "    VAL_SPLIT = 0.2\n",
    "    IMAGE_SIZE = (160, 160)  # Standard for face recognition models (e.g., FaceNet)\n",
    "    BATCH_SIZE = 16  # Optimized for P100 GPU memory\n",
    "    DAVIDO_LABEL = \"Davido\"\n",
    "    UNKNOWN_LABEL = \"Unknown\"\n",
    "    CLASS_NAMES = [DAVIDO_LABEL, UNKNOWN_LABEL]\n",
    "    NUM_CLASSES = 2\n",
    "    \n",
    "    # Data augmentation settings\n",
    "    AUGMENTATION_PROBABILITY = 0.8\n",
    "    ROTATION_RANGE = 15\n",
    "    BRIGHTNESS_RANGE = 0.2\n",
    "    CONTRAST_RANGE = 0.2\n",
    "    HORIZONTAL_FLIP_PROB = 0.5\n",
    "    VERTICAL_FLIP_PROB = 0.0  # Keep faces upright\n",
    "    \n",
    "    # Model settings\n",
    "    MODEL_TYPE = \"mobilenet_v2\"  # Lightweight and efficient for classification\n",
    "    PRETRAINED = True\n",
    "    CONFIDENCE_THRESHOLD = 0.5\n",
    "    NMS_THRESHOLD = 0.4\n",
    "    \n",
    "    # Training settings\n",
    "    EPOCHS = 50\n",
    "    LEARNING_RATE = 0.001\n",
    "    WEIGHT_DECAY = 1e-4\n",
    "    SCHEDULER_STEP_SIZE = 10\n",
    "    SCHEDULER_GAMMA = 0.5\n",
    "    \n",
    "    # Early stopping settings\n",
    "    EARLY_STOPPING_PATIENCE = 10  # Number of epochs to wait before early stopping\n",
    "    EARLY_STOPPING_MIN_DELTA = 0.001  # Minimum improvement required\n",
    "    \n",
    "    # Real-time detection settings\n",
    "    FPS_TARGET = 15  # Process every 4th frame at 60fps\n",
    "    FRAME_SKIP = 4\n",
    "    DETECTION_INTERVAL = 3  # frames between detections\n",
    "    \n",
    "    # Paths\n",
    "    DATA_DIR = \"/kaggle/input/input-images-davido\"\n",
    "    SCREENSHOT_DIR = \"./output/screenshots\"\n",
    "    MODELS_DIR = \"./models\"\n",
    "    LOGS_DIR = \"./logs\"\n",
    "    OUTPUT_DIR = \"./output\"\n",
    "    \n",
    "    # Create directories\n",
    "    @staticmethod\n",
    "    def create_directories():\n",
    "        \"\"\"Create necessary directories\"\"\"\n",
    "        dirs = [Config.DATA_DIR, Config.MODELS_DIR, Config.LOGS_DIR, Config.OUTPUT_DIR, Config.SCREENSHOT_DIR]\n",
    "        for dir_path in dirs:\n",
    "            os.makedirs(dir_path, exist_ok=True)\n",
    "    \n",
    "    # Model export settings\n",
    "    EXPORT_FORMAT = \"pt\"  # PyTorch format for local use\n",
    "    MODEL_FILENAME = \"face_detection_model.pt\" "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "021725d2",
   "metadata": {
    "papermill": {
     "duration": 0.021816,
     "end_time": "2025-07-28T21:39:46.723683",
     "exception": false,
     "start_time": "2025-07-28T21:39:46.701867",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Loader Utility Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2cc30505",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T21:39:46.770614Z",
     "iopub.status.busy": "2025-07-28T21:39:46.770191Z",
     "iopub.status.idle": "2025-07-28T21:39:56.182666Z",
     "shell.execute_reply": "2025-07-28T21:39:56.181981Z"
    },
    "papermill": {
     "duration": 9.437585,
     "end_time": "2025-07-28T21:39:56.184210",
     "exception": false,
     "start_time": "2025-07-28T21:39:46.746625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Utility functions to load dataset information saved by data_preparation.py\n",
    "Used by hyperparameter tuning and training stages\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import pickle\n",
    "import json\n",
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms\n",
    "from PIL import Image\n",
    "# from config import Config\n",
    "\n",
    "class FaceRecognitionDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Custom dataset for face recognition (classification)\n",
    "    Loads images and labels from saved splits with augmentation\n",
    "    \"\"\"\n",
    "    def __init__(self, data_dir, samples, transform=None, augment_factor=10):\n",
    "        self.data_dir = data_dir\n",
    "        self.transform = transform\n",
    "        self.samples = samples\n",
    "        self.class_names = Config.CLASS_NAMES\n",
    "        self.augment_factor = augment_factor\n",
    "        \n",
    "        # Create balanced dataset with synthetic negative samples\n",
    "        self.balanced_samples = self._create_balanced_samples()\n",
    "        \n",
    "        # Create augmented samples\n",
    "        self.augmented_samples = self._create_augmented_samples()\n",
    "    \n",
    "    def _create_balanced_samples(self):\n",
    "        \"\"\"Create a balanced dataset with synthetic negative samples\"\"\"\n",
    "        balanced_samples = []\n",
    "        \n",
    "        # Add original samples\n",
    "        for filename, label in self.samples:\n",
    "            balanced_samples.append((filename, label))\n",
    "        \n",
    "        # Create synthetic negative samples by applying heavy augmentation to Davido images\n",
    "        davido_files = [f for f, l in self.samples if l == 'Davido']\n",
    "        num_negative_samples = len(davido_files)  # Balance the dataset\n",
    "        \n",
    "        for i in range(num_negative_samples):\n",
    "            # Use a Davido image but apply heavy augmentation to make it look different\n",
    "            davido_file = davido_files[i % len(davido_files)]\n",
    "            balanced_samples.append((davido_file, 'Unknown'))  # Label as Unknown but will be heavily augmented\n",
    "        \n",
    "        return balanced_samples\n",
    "    \n",
    "    def _create_augmented_samples(self):\n",
    "        \"\"\"Create multiple augmented versions of each image\"\"\"\n",
    "        augmented_samples = []\n",
    "        \n",
    "        for filename, label in self.balanced_samples:\n",
    "            # Add original sample\n",
    "            augmented_samples.append((filename, label, 0))  # 0 = original\n",
    "            \n",
    "            # Add augmented versions\n",
    "            for i in range(1, self.augment_factor):\n",
    "                augmented_samples.append((filename, label, i))  # i = augmented version\n",
    "        \n",
    "        return augmented_samples\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.augmented_samples)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        fname, label, aug_idx = self.augmented_samples[idx]\n",
    "        img_path = os.path.join(self.data_dir, fname)\n",
    "        image = Image.open(img_path).convert('RGB')\n",
    "        label_idx = self.class_names.index(label)\n",
    "        \n",
    "        # Apply different augmentation based on aug_idx and label\n",
    "        if aug_idx == 0:\n",
    "            # Original image with minimal transforms\n",
    "            if self.transform:\n",
    "                image = self.transform(image)\n",
    "        else:\n",
    "            # Apply heavy augmentation\n",
    "            image = self._apply_augmentation(image, aug_idx, label)\n",
    "        \n",
    "        return {'image': image, 'label': label_idx, 'image_path': img_path}\n",
    "    \n",
    "    def _apply_augmentation(self, image, aug_idx, label):\n",
    "        \"\"\"Apply different augmentation based on index and label\"\"\"\n",
    "        # Set random seed for reproducible augmentation\n",
    "        import random\n",
    "        import numpy as np\n",
    "        random.seed(aug_idx)\n",
    "        np.random.seed(aug_idx)\n",
    "        \n",
    "        if label == 'Unknown':\n",
    "            # Apply very heavy augmentation for synthetic negative samples\n",
    "            aug_transform = transforms.Compose([\n",
    "                transforms.Resize((Config.IMAGE_SIZE[0] + 40, Config.IMAGE_SIZE[1] + 40)),\n",
    "                transforms.RandomCrop(Config.IMAGE_SIZE),\n",
    "                transforms.RandomHorizontalFlip(p=0.8),\n",
    "                transforms.RandomRotation(degrees=45),\n",
    "                transforms.ColorJitter(brightness=0.5, contrast=0.5, saturation=0.5, hue=0.3),\n",
    "                transforms.RandomGrayscale(p=0.3),\n",
    "                transforms.RandomAffine(degrees=30, translate=(0.2, 0.2), scale=(0.7, 1.3)),\n",
    "                transforms.ToTensor(),\n",
    "                transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "                transforms.RandomErasing(p=0.4, scale=(0.1, 0.3)),\n",
    "            ])\n",
    "        else:\n",
    "            # Apply moderate augmentation for Davido samples\n",
    "            aug_transform = transforms.Compose([\n",
    "                transforms.Resize((Config.IMAGE_SIZE[0] + 20, Config.IMAGE_SIZE[1] + 20)),\n",
    "                transforms.RandomCrop(Config.IMAGE_SIZE),\n",
    "                transforms.RandomHorizontalFlip(p=0.5),\n",
    "                transforms.RandomRotation(degrees=15),\n",
    "                transforms.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.3, hue=0.1),\n",
    "                transforms.RandomGrayscale(p=0.1),\n",
    "                transforms.RandomAffine(degrees=0, translate=(0.1, 0.1), scale=(0.9, 1.1)),\n",
    "                transforms.ToTensor(),\n",
    "                transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "                transforms.RandomErasing(p=0.2, scale=(0.02, 0.2)),\n",
    "            ])\n",
    "        \n",
    "        return aug_transform(image)\n",
    "\n",
    "def get_transforms():\n",
    "    \"\"\"Comprehensive data augmentation for small datasets\"\"\"\n",
    "    return transforms.Compose([\n",
    "        transforms.Resize((Config.IMAGE_SIZE[0] + 20, Config.IMAGE_SIZE[1] + 20)),  # Slightly larger for cropping\n",
    "        transforms.RandomCrop(Config.IMAGE_SIZE),  # Random crop\n",
    "        transforms.RandomHorizontalFlip(p=0.5),  # Random horizontal flip\n",
    "        transforms.RandomRotation(degrees=15),  # Random rotation\n",
    "        transforms.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.3, hue=0.1),  # Color augmentation\n",
    "        transforms.RandomGrayscale(p=0.1),  # Random grayscale\n",
    "        transforms.RandomAffine(degrees=0, translate=(0.1, 0.1), scale=(0.9, 1.1)),  # Affine transforms\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "        transforms.RandomErasing(p=0.2, scale=(0.02, 0.2)),  # Random erasing\n",
    "    ])\n",
    "\n",
    "def get_val_transforms():\n",
    "    \"\"\"Simple transforms for validation (no augmentation)\"\"\"\n",
    "    return transforms.Compose([\n",
    "        transforms.Resize(Config.IMAGE_SIZE),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "    ])\n",
    "\n",
    "def load_dataset_info():\n",
    "    \"\"\"Load dataset information saved by data_preparation.py\"\"\"\n",
    "    # Updated path to match user's output directory\n",
    "    info_path = os.path.join('/kaggle/input/fd-01-preprocessing/output', 'dataset_info.json')\n",
    "    if not os.path.exists(info_path):\n",
    "        raise FileNotFoundError(f\"Dataset info not found at {info_path}. Run data_preparation.py first.\")\n",
    "    \n",
    "    with open(info_path, 'r') as f:\n",
    "        dataset_info = json.load(f)\n",
    "    \n",
    "    print(f\"Loaded dataset info:\")\n",
    "    print(f\"  Total samples: {dataset_info['total_samples']}\")\n",
    "    print(f\"  Classes: {dataset_info['class_names']}\")\n",
    "    print(f\"  Class distribution: {dataset_info['class_distribution']}\")\n",
    "    \n",
    "    return dataset_info\n",
    "\n",
    "def load_dataset_splits():\n",
    "    \"\"\"Load train/val splits saved by data_preparation.py\"\"\"\n",
    "    # Updated path to match user's output directory\n",
    "    splits_path = os.path.join('/kaggle/input/fd-01-preprocessing/output', 'dataset_splits.pkl')\n",
    "    if not os.path.exists(splits_path):\n",
    "        raise FileNotFoundError(f\"Dataset splits not found at {splits_path}. Run data_preparation.py first.\")\n",
    "    \n",
    "    with open(splits_path, 'rb') as f:\n",
    "        splits_data = pickle.load(f)\n",
    "    \n",
    "    return splits_data['train_samples'], splits_data['val_samples'], splits_data['class_names']\n",
    "\n",
    "def create_data_loaders(batch_size=None, num_workers=None):\n",
    "    \"\"\"Create train and validation data loaders from saved splits\"\"\"\n",
    "    if batch_size is None:\n",
    "        batch_size = Config.BATCH_SIZE\n",
    "    if num_workers is None:\n",
    "        num_workers = min(Config.CPU_CORES, 4)\n",
    "    \n",
    "    # Load saved splits\n",
    "    train_samples, val_samples, class_names = load_dataset_splits()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = FaceRecognitionDataset(\n",
    "        Config.DATA_DIR,\n",
    "        train_samples,\n",
    "        transform=get_transforms()\n",
    "    )\n",
    "    \n",
    "    val_dataset = FaceRecognitionDataset(\n",
    "        Config.DATA_DIR,\n",
    "        val_samples,\n",
    "        transform=get_val_transforms()\n",
    "    )\n",
    "    \n",
    "    # Create data loaders\n",
    "    train_loader = DataLoader(\n",
    "        train_dataset,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=True,\n",
    "        num_workers=num_workers,\n",
    "        pin_memory=True,\n",
    "        drop_last=True\n",
    "    )\n",
    "    \n",
    "    val_loader = DataLoader(\n",
    "        val_dataset,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=False,\n",
    "        num_workers=num_workers,\n",
    "        pin_memory=True\n",
    "    )\n",
    "    \n",
    "    print(f\"Created data loaders:\")\n",
    "    print(f\"  Training: {len(train_loader)} batches\")\n",
    "    print(f\"  Validation: {len(val_loader)} batches\")\n",
    "    \n",
    "    return train_loader, val_loader\n",
    "\n",
    "def test_data_loading():\n",
    "    \"\"\"Test function to verify data loading works\"\"\"\n",
    "    try:\n",
    "        dataset_info = load_dataset_info()\n",
    "        train_loader, val_loader = create_data_loaders()\n",
    "        \n",
    "        # Test a batch\n",
    "        for batch in train_loader:\n",
    "            print(f\"Test batch shape: {batch['image'].shape}\")\n",
    "            print(f\"Test batch labels: {batch['label']}\")\n",
    "            break\n",
    "        \n",
    "        print(\"✓ Data loading test successful!\")\n",
    "        return True\n",
    "    except Exception as e:\n",
    "        print(f\"✗ Data loading test failed: {e}\")\n",
    "        return False\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     test_data_loading() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "227713f0",
   "metadata": {
    "papermill": {
     "duration": 0.021429,
     "end_time": "2025-07-28T21:39:56.228005",
     "exception": false,
     "start_time": "2025-07-28T21:39:56.206576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2f2e1ee8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T21:39:56.274519Z",
     "iopub.status.busy": "2025-07-28T21:39:56.274164Z",
     "iopub.status.idle": "2025-07-28T21:41:14.237467Z",
     "shell.execute_reply": "2025-07-28T21:41:14.236419Z"
    },
    "papermill": {
     "duration": 77.988344,
     "end_time": "2025-07-28T21:41:14.238704",
     "exception": false,
     "start_time": "2025-07-28T21:39:56.250360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-28 21:39:58.344710: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753738798.537263      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753738798.587084      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=MobileNet_V2_Weights.IMAGENET1K_V1`. You can also use `weights=MobileNet_V2_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Section 2: Model Selection and Training ===\n",
      "Created data loaders:\n",
      "  Training: 20 batches\n",
      "  Validation: 5 batches\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13.6M/13.6M [00:00<00:00, 105MB/s] \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Using best hyperparameters from tuning:\n",
      "  learning_rate: 0.0038534939645787883\n",
      "  batch_size: 16\n",
      "  weight_decay: 3.0092687083048584e-05\n",
      "  scheduler_step_size: 17\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,226,434\n",
      "Learning rate: 0.003853\n",
      "Weight decay: 0.000030\n",
      "Loss function: CrossEntropyLoss()\n",
      "Early stopping patience: 10\n",
      "Early stopping min delta: 0.001\n",
      "Model test - Input shape: torch.Size([1, 3, 160, 160])\n",
      "Model test - Output shape: torch.Size([1, 2])\n",
      "Model test - Output range: [0.0546, 0.1932]\n",
      "Loss test - Labels: tensor([0], device='cuda:0')\n",
      "Loss test - Loss value: 0.764824\n",
      "Starting training...\n",
      "Training for 50 epochs (with early stopping)\n",
      "Learning rate: 0.0038534939645787883\n",
      "Batch size: 16\n",
      "Early stopping patience: 10\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-0.4412, 1.2432]\n",
      "  Loss value: 0.868103\n",
      "  Predicted classes: tensor([0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.0074, 3.9475]\n",
      "  Loss value: 0.809674\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-12.3103, 13.2419]\n",
      "  Loss value: 0.957767\n",
      "  Predicted classes: tensor([1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], device='cuda:0')\n",
      "[DEBUG] Training epoch 0:\n",
      "  Total loss: 16.909018\n",
      "  Num batches: 20\n",
      "  Average loss: 0.845451\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-1.9024, 7.5933]\n",
      "  Loss value: 5.033881\n",
      "  Predicted classes: tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0')\n",
      "[DEBUG] Validation epoch 0:\n",
      "  Total loss: 17.426510\n",
      "  Num batches: 5\n",
      "  Average loss: 3.485302\n",
      "Saved best model with validation loss: 3.4853\n",
      "Epoch 1/50:\n",
      "  Train Loss: 0.8455\n",
      "  Val Loss: 3.4853\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 3.4853\n",
      "  Early Stop Counter: 1/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.2060, 3.2832]\n",
      "  Loss value: 0.307788\n",
      "  Predicted classes: tensor([1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-4.3543, 5.3025]\n",
      "  Loss value: 0.343528\n",
      "  Predicted classes: tensor([1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.2931, 3.8339]\n",
      "  Loss value: 0.233752\n",
      "  Predicted classes: tensor([1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], device='cuda:0')\n",
      "[DEBUG] Training epoch 1:\n",
      "  Total loss: 8.577181\n",
      "  Num batches: 20\n",
      "  Average loss: 0.428859\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-1.9145, 6.1315]\n",
      "  Loss value: 0.488055\n",
      "  Predicted classes: tensor([0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Validation epoch 1:\n",
      "  Total loss: 3.350048\n",
      "  Num batches: 5\n",
      "  Average loss: 0.670010\n",
      "Saved best model with validation loss: 0.6700\n",
      "Epoch 2/50:\n",
      "  Train Loss: 0.4289\n",
      "  Val Loss: 0.6700\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.6700\n",
      "  Early Stop Counter: 2/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.2158, 4.3129]\n",
      "  Loss value: 0.419299\n",
      "  Predicted classes: tensor([0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.1948, 4.0471]\n",
      "  Loss value: 0.344518\n",
      "  Predicted classes: tensor([1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.2455, 3.0661]\n",
      "  Loss value: 0.344375\n",
      "  Predicted classes: tensor([0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0], device='cuda:0')\n",
      "[DEBUG] Training epoch 2:\n",
      "  Total loss: 8.475997\n",
      "  Num batches: 20\n",
      "  Average loss: 0.423800\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-2.0743, 3.8651]\n",
      "  Loss value: 0.048044\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Validation epoch 2:\n",
      "  Total loss: 3.975576\n",
      "  Num batches: 5\n",
      "  Average loss: 0.795115\n",
      "Epoch 3/50:\n",
      "  Train Loss: 0.4238\n",
      "  Val Loss: 0.7951\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.6700\n",
      "  Early Stop Counter: 3/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-4.0564, 4.4405]\n",
      "  Loss value: 0.545091\n",
      "  Predicted classes: tensor([1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-2.6506, 2.7303]\n",
      "  Loss value: 0.253311\n",
      "  Predicted classes: tensor([0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-2.7441, 3.6243]\n",
      "  Loss value: 0.407353\n",
      "  Predicted classes: tensor([1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], device='cuda:0')\n",
      "[DEBUG] Training epoch 3:\n",
      "  Total loss: 7.320755\n",
      "  Num batches: 20\n",
      "  Average loss: 0.366038\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-5.2985, 5.3047]\n",
      "  Loss value: 1.467824\n",
      "  Predicted classes: tensor([0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Validation epoch 3:\n",
      "  Total loss: 2.461471\n",
      "  Num batches: 5\n",
      "  Average loss: 0.492294\n",
      "Saved best model with validation loss: 0.4923\n",
      "Epoch 4/50:\n",
      "  Train Loss: 0.3660\n",
      "  Val Loss: 0.4923\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.4923\n",
      "  Early Stop Counter: 4/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-6.1748, 7.1437]\n",
      "  Loss value: 0.616499\n",
      "  Predicted classes: tensor([1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-5.7747, 5.8016]\n",
      "  Loss value: 0.371547\n",
      "  Predicted classes: tensor([0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-8.0391, 7.8898]\n",
      "  Loss value: 0.922676\n",
      "  Predicted classes: tensor([1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], device='cuda:0')\n",
      "[DEBUG] Training epoch 4:\n",
      "  Total loss: 8.203135\n",
      "  Num batches: 20\n",
      "  Average loss: 0.410157\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-2.3732, 3.5187]\n",
      "  Loss value: 0.719225\n",
      "  Predicted classes: tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0], device='cuda:0')\n",
      "[DEBUG] Validation epoch 4:\n",
      "  Total loss: 2.676660\n",
      "  Num batches: 5\n",
      "  Average loss: 0.535332\n",
      "Epoch 5/50:\n",
      "  Train Loss: 0.4102\n",
      "  Val Loss: 0.5353\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.4923\n",
      "  Early Stop Counter: 5/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-5.3602, 5.2196]\n",
      "  Loss value: 0.229898\n",
      "  Predicted classes: tensor([0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-7.8690, 7.9675]\n",
      "  Loss value: 0.478420\n",
      "  Predicted classes: tensor([1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-4.8226, 4.4725]\n",
      "  Loss value: 0.401996\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training epoch 5:\n",
      "  Total loss: 6.254672\n",
      "  Num batches: 20\n",
      "  Average loss: 0.312734\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-1.2724, 4.7709]\n",
      "  Loss value: 0.188217\n",
      "  Predicted classes: tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Validation epoch 5:\n",
      "  Total loss: 1.797711\n",
      "  Num batches: 5\n",
      "  Average loss: 0.359542\n",
      "Saved best model with validation loss: 0.3595\n",
      "Epoch 6/50:\n",
      "  Train Loss: 0.3127\n",
      "  Val Loss: 0.3595\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.3595\n",
      "  Early Stop Counter: 6/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-2.9642, 2.8926]\n",
      "  Loss value: 0.224229\n",
      "  Predicted classes: tensor([1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.8868, 4.1098]\n",
      "  Loss value: 0.268316\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.3887, 3.0789]\n",
      "  Loss value: 0.224357\n",
      "  Predicted classes: tensor([0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training epoch 6:\n",
      "  Total loss: 6.854424\n",
      "  Num batches: 20\n",
      "  Average loss: 0.342721\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-1.2102, 2.4011]\n",
      "  Loss value: 0.100946\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Validation epoch 6:\n",
      "  Total loss: 4.029153\n",
      "  Num batches: 5\n",
      "  Average loss: 0.805831\n",
      "Epoch 7/50:\n",
      "  Train Loss: 0.3427\n",
      "  Val Loss: 0.8058\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.3595\n",
      "  Early Stop Counter: 7/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-2.6720, 3.2503]\n",
      "  Loss value: 0.649969\n",
      "  Predicted classes: tensor([1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-3.9943, 3.7173]\n",
      "  Loss value: 0.299727\n",
      "  Predicted classes: tensor([1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-4.8338, 5.1210]\n",
      "  Loss value: 0.337304\n",
      "  Predicted classes: tensor([0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], device='cuda:0')\n",
      "[DEBUG] Training epoch 7:\n",
      "  Total loss: 7.241996\n",
      "  Num batches: 20\n",
      "  Average loss: 0.362100\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-14.5004, 14.3877]\n",
      "  Loss value: 14.187862\n",
      "  Predicted classes: tensor([0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0')\n",
      "[DEBUG] Validation epoch 7:\n",
      "  Total loss: 27.577090\n",
      "  Num batches: 5\n",
      "  Average loss: 5.515418\n",
      "Epoch 8/50:\n",
      "  Train Loss: 0.3621\n",
      "  Val Loss: 5.5154\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.3595\n",
      "  Early Stop Counter: 8/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-12.3838, 11.8840]\n",
      "  Loss value: 0.330090\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-16.8080, 15.7323]\n",
      "  Loss value: 0.889287\n",
      "  Predicted classes: tensor([0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-16.0938, 16.0418]\n",
      "  Loss value: 0.893313\n",
      "  Predicted classes: tensor([1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], device='cuda:0')\n",
      "[DEBUG] Training epoch 8:\n",
      "  Total loss: 7.408009\n",
      "  Num batches: 20\n",
      "  Average loss: 0.370400\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-1.4160, 1.6349]\n",
      "  Loss value: 0.182793\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Validation epoch 8:\n",
      "  Total loss: 1.526498\n",
      "  Num batches: 5\n",
      "  Average loss: 0.305300\n",
      "Saved best model with validation loss: 0.3053\n",
      "Epoch 9/50:\n",
      "  Train Loss: 0.3704\n",
      "  Val Loss: 0.3053\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.3053\n",
      "  Early Stop Counter: 9/10\n",
      "\n",
      "[DEBUG] Training batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-6.8369, 7.3808]\n",
      "  Loss value: 0.226686\n",
      "  Predicted classes: tensor([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], device='cuda:0')\n",
      "[DEBUG] Training batch 1:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-4.0912, 4.5738]\n",
      "  Loss value: 0.263177\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], device='cuda:0')\n",
      "[DEBUG] Training batch 2:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-5.2229, 5.6302]\n",
      "  Loss value: 0.121237\n",
      "  Predicted classes: tensor([1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], device='cuda:0')\n",
      "[DEBUG] Training epoch 9:\n",
      "  Total loss: 6.184594\n",
      "  Num batches: 20\n",
      "  Average loss: 0.309230\n",
      "[DEBUG] Validation batch 0:\n",
      "  Images shape: torch.Size([16, 3, 160, 160])\n",
      "  Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "  Outputs shape: torch.Size([16, 2])\n",
      "  Outputs range: [-1.3666, 1.6443]\n",
      "  Loss value: 0.108411\n",
      "  Predicted classes: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')\n",
      "[DEBUG] Validation epoch 9:\n",
      "  Total loss: 1.130841\n",
      "  Num batches: 5\n",
      "  Average loss: 0.226168\n",
      "Saved best model with validation loss: 0.2262\n",
      "Epoch 10/50:\n",
      "  Train Loss: 0.3092\n",
      "  Val Loss: 0.2262\n",
      "  Learning Rate: 0.003853\n",
      "  Best Val Loss: 0.2262\n",
      "  Early Stop Counter: 10/10\n",
      "\n",
      "Early stopping triggered after 10 epochs!\n",
      "Best validation loss: 0.2262\n",
      "Training stopped early due to no improvement!\n",
      "Best validation loss: 0.2262\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model training completed successfully!\n",
      "Best validation loss: 0.2262\n",
      "Model saved to: ./models\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Section 2: Model Selection and Training\n",
    "Lightweight face detection model optimized for real-time processing on Kaggle hardware\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.tensorboard import SummaryWriter\n",
    "import torchvision.models as models\n",
    "from tqdm import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "# from config import Config\n",
    "# from data_loader_utils import create_data_loaders\n",
    "\n",
    "# Utility function to load best learning rate if available\n",
    "def get_best_learning_rate():\n",
    "    best_lr_path = os.path.join(\"/kaggle/input/fd-02-hyperparam-tuning/output\", \"best_learning_rate.txt\")\n",
    "    if os.path.exists(best_lr_path):\n",
    "        try:\n",
    "            with open(best_lr_path, \"r\") as f:\n",
    "                lr = float(f.read().strip())\n",
    "                print(f\"[INFO] Using best learning rate from tuning: {lr}\")\n",
    "                return lr\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Could not read best learning rate: {e}. Using default.\")\n",
    "    print(f\"[INFO] Using default learning rate: {Config.LEARNING_RATE}\")\n",
    "    return Config.LEARNING_RATE\n",
    "\n",
    "def get_best_hyperparameters():\n",
    "    \"\"\"Load best hyperparameters from tuning stage\"\"\"\n",
    "    best_params_path = os.path.join(\"/kaggle/input/fd-02-hyperparam-tuning/output\", \"best_hyperparameters.json\")\n",
    "    if os.path.exists(best_params_path):\n",
    "        try:\n",
    "            import json\n",
    "            with open(best_params_path, \"r\") as f:\n",
    "                params = json.load(f)\n",
    "            print(f\"[INFO] Using best hyperparameters from tuning:\")\n",
    "            for key, value in params.items():\n",
    "                print(f\"  {key}: {value}\")\n",
    "            return params\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Could not read best hyperparameters: {e}. Using defaults.\")\n",
    "    \n",
    "    # Return default parameters\n",
    "    default_params = {\n",
    "        'learning_rate': Config.LEARNING_RATE,\n",
    "        'batch_size': Config.BATCH_SIZE,\n",
    "        'weight_decay': Config.WEIGHT_DECAY,\n",
    "        'scheduler_step_size': Config.SCHEDULER_STEP_SIZE\n",
    "    }\n",
    "    print(f\"[INFO] Using default hyperparameters\")\n",
    "    return default_params\n",
    "\n",
    "class FaceRecognitionModel(nn.Module):\n",
    "    \"\"\"\n",
    "    Simple face recognition model for classifying Davido vs Unknown\n",
    "    Uses MobileNetV2 backbone with a classification head\n",
    "    \"\"\"\n",
    "    def __init__(self, num_classes=2, pretrained=True):\n",
    "        super().__init__()\n",
    "        self.backbone = models.mobilenet_v2(pretrained=pretrained).features\n",
    "        self.pool = nn.AdaptiveAvgPool2d((1, 1))\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(1280, num_classes)\n",
    "        )\n",
    "    def forward(self, x):\n",
    "        x = self.backbone(x)\n",
    "        x = self.pool(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "class ModelTrainer:\n",
    "    \"\"\"\n",
    "    Handles model training for face recognition (classification)\n",
    "    \"\"\"\n",
    "    def __init__(self, model, train_loader, val_loader):\n",
    "        self.model = model\n",
    "        self.train_loader = train_loader\n",
    "        self.val_loader = val_loader\n",
    "        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "        self.model.to(self.device)\n",
    "        \n",
    "        # Load best hyperparameters\n",
    "        best_params = get_best_hyperparameters()\n",
    "        \n",
    "        # Initialize optimizer and scheduler with best parameters\n",
    "        self.optimizer = optim.AdamW(\n",
    "            self.model.parameters(),\n",
    "            lr=best_params['learning_rate'],\n",
    "            weight_decay=best_params['weight_decay']\n",
    "        )\n",
    "        \n",
    "        self.scheduler = optim.lr_scheduler.StepLR(\n",
    "            self.optimizer,\n",
    "            step_size=best_params['scheduler_step_size'],\n",
    "            gamma=Config.SCHEDULER_GAMMA\n",
    "        )\n",
    "        \n",
    "        self.criterion = nn.CrossEntropyLoss()\n",
    "        self.writer = SummaryWriter(Config.LOGS_DIR)\n",
    "        self.train_losses = []\n",
    "        self.val_losses = []\n",
    "        self.best_val_loss = float('inf')\n",
    "        \n",
    "        # Early stopping parameters\n",
    "        self.patience = Config.EARLY_STOPPING_PATIENCE\n",
    "        self.min_delta = Config.EARLY_STOPPING_MIN_DELTA\n",
    "        self.counter = 0  # Counter for epochs without improvement\n",
    "        self.early_stop = False  # Flag to stop training\n",
    "        \n",
    "        # Debug model and loss function\n",
    "        print(f\"Model initialized on device: {self.device}\")\n",
    "        print(f\"Total parameters: {sum(p.numel() for p in self.model.parameters()):,}\")\n",
    "        print(f\"Learning rate: {best_params['learning_rate']:.6f}\")\n",
    "        print(f\"Weight decay: {best_params['weight_decay']:.6f}\")\n",
    "        print(f\"Loss function: {self.criterion}\")\n",
    "        print(f\"Early stopping patience: {self.patience}\")\n",
    "        print(f\"Early stopping min delta: {self.min_delta}\")\n",
    "        \n",
    "        # Test model with dummy input\n",
    "        dummy_input = torch.randn(1, 3, Config.IMAGE_SIZE[0], Config.IMAGE_SIZE[1]).to(self.device)\n",
    "        dummy_output = self.model(dummy_input)\n",
    "        print(f\"Model test - Input shape: {dummy_input.shape}\")\n",
    "        print(f\"Model test - Output shape: {dummy_output.shape}\")\n",
    "        print(f\"Model test - Output range: [{dummy_output.min().item():.4f}, {dummy_output.max().item():.4f}]\")\n",
    "        \n",
    "        # Test loss function\n",
    "        dummy_labels = torch.randint(0, Config.NUM_CLASSES, (1,)).to(self.device)\n",
    "        dummy_loss = self.criterion(dummy_output, dummy_labels)\n",
    "        print(f\"Loss test - Labels: {dummy_labels}\")\n",
    "        print(f\"Loss test - Loss value: {dummy_loss.item():.6f}\")\n",
    "    \n",
    "    def check_early_stopping(self, val_loss):\n",
    "        \"\"\"Check if training should stop early\"\"\"\n",
    "        if val_loss < self.best_val_loss - self.min_delta:\n",
    "            self.best_val_loss = val_loss\n",
    "            self.counter = 0\n",
    "            return False  # Continue training\n",
    "        else:\n",
    "            self.counter += 1\n",
    "            if self.counter >= self.patience:\n",
    "                return True  # Stop training\n",
    "            return False  # Continue training\n",
    "    def train_epoch(self, epoch):\n",
    "        \"\"\"Train for one epoch\"\"\"\n",
    "        self.model.train()\n",
    "        total_loss = 0.0\n",
    "        num_batches = 0\n",
    "        \n",
    "        # Check if train_loader is empty\n",
    "        if len(self.train_loader) == 0:\n",
    "            print(\"[ERROR] Training loader is empty!\")\n",
    "            return 0.0\n",
    "        \n",
    "        for batch_idx, batch in enumerate(self.train_loader):\n",
    "            # Handle dictionary format from dataset\n",
    "            if isinstance(batch, dict):\n",
    "                images = batch['image'].to(self.device)\n",
    "                labels = batch['label'].to(self.device)\n",
    "            else:\n",
    "                # Handle tuple format (images, labels)\n",
    "                images, labels = batch\n",
    "                images = images.to(self.device)\n",
    "                labels = labels.to(self.device)\n",
    "            \n",
    "            self.optimizer.zero_grad()\n",
    "            outputs = self.model(images)\n",
    "            loss = self.criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            self.optimizer.step()\n",
    "            \n",
    "            # Debug information for first few batches\n",
    "            if batch_idx < 3:  # Print first 3 batches info\n",
    "                print(f\"[DEBUG] Training batch {batch_idx}:\")\n",
    "                print(f\"  Images shape: {images.shape}\")\n",
    "                print(f\"  Labels: {labels}\")\n",
    "                print(f\"  Outputs shape: {outputs.shape}\")\n",
    "                print(f\"  Outputs range: [{outputs.min().item():.4f}, {outputs.max().item():.4f}]\")\n",
    "                print(f\"  Loss value: {loss.item():.6f}\")\n",
    "                print(f\"  Predicted classes: {torch.argmax(outputs, dim=1)}\")\n",
    "            \n",
    "            total_loss += loss.item()\n",
    "            num_batches += 1\n",
    "            \n",
    "            if batch_idx % 10 == 0:\n",
    "                self.writer.add_scalar('Train/Loss', loss.item(), epoch * len(self.train_loader) + batch_idx)\n",
    "        \n",
    "        # Prevent division by zero\n",
    "        if num_batches == 0:\n",
    "            print(\"[ERROR] No batches processed in training epoch!\")\n",
    "            return 0.0\n",
    "            \n",
    "        avg_loss = total_loss / num_batches\n",
    "        self.train_losses.append(avg_loss)\n",
    "        \n",
    "        # Debug final training loss\n",
    "        print(f\"[DEBUG] Training epoch {epoch}:\")\n",
    "        print(f\"  Total loss: {total_loss:.6f}\")\n",
    "        print(f\"  Num batches: {num_batches}\")\n",
    "        print(f\"  Average loss: {avg_loss:.6f}\")\n",
    "        \n",
    "        return avg_loss\n",
    "    def validate_epoch(self, epoch):\n",
    "        \"\"\"Validate for one epoch\"\"\"\n",
    "        self.model.eval()\n",
    "        total_loss = 0.0\n",
    "        num_batches = 0\n",
    "        \n",
    "        # Check if val_loader is empty\n",
    "        if len(self.val_loader) == 0:\n",
    "            print(\"[ERROR] Validation loader is empty!\")\n",
    "            return 0.0\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for batch_idx, batch in enumerate(self.val_loader):\n",
    "                # Handle dictionary format from dataset\n",
    "                if isinstance(batch, dict):\n",
    "                    images = batch['image'].to(self.device)\n",
    "                    labels = batch['label'].to(self.device)\n",
    "                else:\n",
    "                    # Handle tuple format (images, labels)\n",
    "                    images, labels = batch\n",
    "                    images = images.to(self.device)\n",
    "                    labels = labels.to(self.device)\n",
    "                \n",
    "                outputs = self.model(images)\n",
    "                loss = self.criterion(outputs, labels)\n",
    "                \n",
    "                # Debug information\n",
    "                if batch_idx == 0:  # Print first batch info\n",
    "                    print(f\"[DEBUG] Validation batch {batch_idx}:\")\n",
    "                    print(f\"  Images shape: {images.shape}\")\n",
    "                    print(f\"  Labels: {labels}\")\n",
    "                    print(f\"  Outputs shape: {outputs.shape}\")\n",
    "                    print(f\"  Outputs range: [{outputs.min().item():.4f}, {outputs.max().item():.4f}]\")\n",
    "                    print(f\"  Loss value: {loss.item():.6f}\")\n",
    "                    print(f\"  Predicted classes: {torch.argmax(outputs, dim=1)}\")\n",
    "                \n",
    "                total_loss += loss.item()\n",
    "                num_batches += 1\n",
    "                \n",
    "                if batch_idx % 10 == 0:\n",
    "                    self.writer.add_scalar('Val/Loss', loss.item(), epoch * len(self.val_loader) + batch_idx)\n",
    "        \n",
    "        # Prevent division by zero\n",
    "        if num_batches == 0:\n",
    "            print(\"[ERROR] No batches processed in validation epoch!\")\n",
    "            return 0.0\n",
    "            \n",
    "        avg_loss = total_loss / num_batches\n",
    "        self.val_losses.append(avg_loss)\n",
    "        \n",
    "        # Debug final validation loss\n",
    "        print(f\"[DEBUG] Validation epoch {epoch}:\")\n",
    "        print(f\"  Total loss: {total_loss:.6f}\")\n",
    "        print(f\"  Num batches: {num_batches}\")\n",
    "        print(f\"  Average loss: {avg_loss:.6f}\")\n",
    "        \n",
    "        return avg_loss\n",
    "    def save_checkpoint(self, epoch, is_best=False):\n",
    "        # Ensure models directory exists\n",
    "        os.makedirs(Config.MODELS_DIR, exist_ok=True)\n",
    "        \n",
    "        checkpoint = {\n",
    "            'epoch': epoch,\n",
    "            'model_state_dict': self.model.state_dict(),\n",
    "            'optimizer_state_dict': self.optimizer.state_dict(),\n",
    "            'scheduler_state_dict': self.scheduler.state_dict(),\n",
    "            'train_losses': self.train_losses,\n",
    "            'val_losses': self.val_losses,\n",
    "            'best_val_loss': self.best_val_loss\n",
    "        }\n",
    "        checkpoint_path = os.path.join(Config.MODELS_DIR, f'checkpoint_epoch_{epoch}.pt')\n",
    "        torch.save(checkpoint, checkpoint_path)\n",
    "        if is_best:\n",
    "            best_path = os.path.join(Config.MODELS_DIR, 'best_model.pt')\n",
    "            torch.save(checkpoint, best_path)\n",
    "            print(f\"Saved best model with validation loss: {self.best_val_loss:.4f}\")\n",
    "    def train(self):\n",
    "        print(\"Starting training...\")\n",
    "        print(f\"Training for {Config.EPOCHS} epochs (with early stopping)\")\n",
    "        print(f\"Learning rate: {self.optimizer.param_groups[0]['lr']}\")\n",
    "        print(f\"Batch size: {Config.BATCH_SIZE}\")\n",
    "        print(f\"Early stopping patience: {self.patience}\")\n",
    "        \n",
    "        for epoch in range(Config.EPOCHS):\n",
    "            train_loss = self.train_epoch(epoch)\n",
    "            val_loss = self.validate_epoch(epoch)\n",
    "            self.scheduler.step()\n",
    "            \n",
    "            # Check for best model\n",
    "            is_best = val_loss < self.best_val_loss\n",
    "            if is_best:\n",
    "                self.best_val_loss = val_loss\n",
    "            \n",
    "            # Check early stopping\n",
    "            should_stop = self.check_early_stopping(val_loss)\n",
    "            \n",
    "            # Save checkpoint periodically or when best\n",
    "            if (epoch + 1) % 5 == 0 or is_best:\n",
    "                self.save_checkpoint(epoch, is_best)\n",
    "            \n",
    "            print(f'Epoch {epoch+1}/{Config.EPOCHS}:')\n",
    "            print(f'  Train Loss: {train_loss:.4f}')\n",
    "            print(f'  Val Loss: {val_loss:.4f}')\n",
    "            print(f'  Learning Rate: {self.scheduler.get_last_lr()[0]:.6f}')\n",
    "            print(f'  Best Val Loss: {self.best_val_loss:.4f}')\n",
    "            print(f'  Early Stop Counter: {self.counter}/{self.patience}')\n",
    "            \n",
    "            if should_stop:\n",
    "                print(f'\\nEarly stopping triggered after {epoch+1} epochs!')\n",
    "                print(f'Best validation loss: {self.best_val_loss:.4f}')\n",
    "                break\n",
    "            \n",
    "            print()\n",
    "        \n",
    "        # Save final checkpoint\n",
    "        self.save_checkpoint(epoch, False)\n",
    "        self.writer.close()\n",
    "        \n",
    "        if should_stop:\n",
    "            print(\"Training stopped early due to no improvement!\")\n",
    "        else:\n",
    "            print(\"Training completed for all epochs!\")\n",
    "        \n",
    "        print(f\"Best validation loss: {self.best_val_loss:.4f}\")\n",
    "        return self.model\n",
    "    def plot_training_history(self):\n",
    "        plt.figure(figsize=(12, 4))\n",
    "        plt.subplot(1, 2, 1)\n",
    "        plt.plot(self.train_losses, label='Train Loss')\n",
    "        plt.plot(self.val_losses, label='Val Loss')\n",
    "        plt.title('Training History')\n",
    "        plt.xlabel('Epoch')\n",
    "        plt.ylabel('Loss')\n",
    "        plt.legend()\n",
    "        plt.grid(True)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(os.path.join(Config.OUTPUT_DIR, 'training_history.png'))\n",
    "        plt.show()\n",
    "\n",
    "def main():\n",
    "    print(\"=== Section 2: Model Selection and Training ===\")\n",
    "    \n",
    "    # Create necessary directories\n",
    "    Config.create_directories()\n",
    "    \n",
    "    train_loader, val_loader = create_data_loaders()\n",
    "    if train_loader is None or val_loader is None:\n",
    "        print(\"Failed to load data. Please check data preparation.\")\n",
    "        return\n",
    "    model = FaceRecognitionModel(num_classes=Config.NUM_CLASSES, pretrained=Config.PRETRAINED)\n",
    "    trainer = ModelTrainer(model, train_loader, val_loader)\n",
    "    trained_model = trainer.train()\n",
    "    trainer.plot_training_history()\n",
    "    print(\"Model training completed successfully!\")\n",
    "    print(f\"Best validation loss: {trainer.best_val_loss:.4f}\")\n",
    "    print(f\"Model saved to: {Config.MODELS_DIR}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7959389,
     "sourceId": 12603149,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 253012053,
     "sourceType": "kernelVersion"
    },
    {
     "sourceId": 253013034,
     "sourceType": "kernelVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 170.48362,
   "end_time": "2025-07-28T21:41:17.941493",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-28T21:38:27.457873",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
