{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "923a0cd2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-29T22:08:42.299375Z",
     "iopub.status.busy": "2025-07-29T22:08:42.299092Z",
     "iopub.status.idle": "2025-07-29T22:09:55.033608Z",
     "shell.execute_reply": "2025-07-29T22:09:55.032787Z"
    },
    "papermill": {
     "duration": 72.740119,
     "end_time": "2025-07-29T22:09:55.035078",
     "exception": false,
     "start_time": "2025-07-29T22:08:42.294959",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m101.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m81.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m16.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m13.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m13.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m8.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m84.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard optuna"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16beae93",
   "metadata": {
    "papermill": {
     "duration": 0.021773,
     "end_time": "2025-07-29T22:09:55.080303",
     "exception": false,
     "start_time": "2025-07-29T22:09:55.058530",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Config Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b372b33a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T22:09:55.123420Z",
     "iopub.status.busy": "2025-07-29T22:09:55.123127Z",
     "iopub.status.idle": "2025-07-29T22:09:55.130325Z",
     "shell.execute_reply": "2025-07-29T22:09:55.129783Z"
    },
    "papermill": {
     "duration": 0.030206,
     "end_time": "2025-07-29T22:09:55.131384",
     "exception": false,
     "start_time": "2025-07-29T22:09:55.101178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Facial Detection System\n",
    "Optimized for Kaggle hardware constraints\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "\n",
    "class Config:\n",
    "    # Hardware constraints for Kaggle\n",
    "    GPU_MEMORY_LIMIT = 14  # GB (leaving 2GB buffer)\n",
    "    RAM_LIMIT = 28  # GB (leaving 4GB buffer)\n",
    "    CPU_CORES = 4\n",
    "    \n",
    "    # Dataset settings\n",
    "    DATASET_NAME = \"davido-recognition\"  # Custom Davido recognition dataset\n",
    "    TRAIN_SPLIT = 0.8\n",
    "    VAL_SPLIT = 0.2\n",
    "    IMAGE_SIZE = (160, 160)  # Standard for face recognition models (e.g., FaceNet)\n",
    "    BATCH_SIZE = 16  # Optimized for P100 GPU memory\n",
    "    DAVIDO_LABEL = \"Davido\"\n",
    "    UNKNOWN_LABEL = \"Unknown\"\n",
    "    CLASS_NAMES = [DAVIDO_LABEL, UNKNOWN_LABEL]\n",
    "    NUM_CLASSES = 2\n",
    "    \n",
    "    # Data augmentation settings\n",
    "    AUGMENTATION_PROBABILITY = 0.8\n",
    "    ROTATION_RANGE = 15\n",
    "    BRIGHTNESS_RANGE = 0.2\n",
    "    CONTRAST_RANGE = 0.2\n",
    "    HORIZONTAL_FLIP_PROB = 0.5\n",
    "    VERTICAL_FLIP_PROB = 0.0  # Keep faces upright\n",
    "    \n",
    "    # Model settings\n",
    "    MODEL_TYPE = \"mobilenet_v2\"  # Lightweight and efficient for classification\n",
    "    PRETRAINED = True\n",
    "    # Confidence threshold for prediction\n",
    "    CONFIDENCE_THRESHOLD = 0.985  # Only recognize Davido if confidence > 0.985\n",
    "    NMS_THRESHOLD = 0.4\n",
    "    \n",
    "    # Training settings (optimized for larger dataset)\n",
    "    EPOCHS = 100  # More epochs for larger dataset\n",
    "    LEARNING_RATE = 0.001\n",
    "    WEIGHT_DECAY = 1e-4\n",
    "    SCHEDULER_STEP_SIZE = 15\n",
    "    SCHEDULER_GAMMA = 0.5\n",
    "    \n",
    "    # Early stopping settings (adjusted for larger dataset)\n",
    "    EARLY_STOPPING_PATIENCE = 15  # More patience for larger dataset\n",
    "    EARLY_STOPPING_MIN_DELTA = 0.0005  # Smaller improvement threshold\n",
    "    \n",
    "    # Real-time detection settings\n",
    "    FPS_TARGET = 15  # Process every 4th frame at 60fps\n",
    "    FRAME_SKIP = 4\n",
    "    DETECTION_INTERVAL = 3  # frames between detections\n",
    "    \n",
    "    # Paths (Updated for local use)\n",
    "    DATA_DIR = \"./data\"  # Local data directory (if needed)\n",
    "    SCREENSHOT_DIR = \"./output/screenshots\"\n",
    "    MODELS_DIR = \"./models\"\n",
    "    LOGS_DIR = \"./logs\"\n",
    "    OUTPUT_DIR = \"./output\"\n",
    "    \n",
    "    # Create directories\n",
    "    @staticmethod\n",
    "    def create_directories():\n",
    "        \"\"\"Create necessary directories\"\"\"\n",
    "        dirs = [Config.MODELS_DIR, Config.LOGS_DIR, Config.OUTPUT_DIR, Config.SCREENSHOT_DIR]\n",
    "        for dir_path in dirs:\n",
    "            os.makedirs(dir_path, exist_ok=True)\n",
    "    \n",
    "    # Model export settings\n",
    "    EXPORT_FORMAT = \"pt\"  # PyTorch format for local use\n",
    "    MODEL_FILENAME = \"face_detection_model.pt\" "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18567e96",
   "metadata": {
    "papermill": {
     "duration": 0.021362,
     "end_time": "2025-07-29T22:09:55.174018",
     "exception": false,
     "start_time": "2025-07-29T22:09:55.152656",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Utility Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9b59d7af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T22:09:55.218273Z",
     "iopub.status.busy": "2025-07-29T22:09:55.217847Z",
     "iopub.status.idle": "2025-07-29T22:10:04.143017Z",
     "shell.execute_reply": "2025-07-29T22:10:04.142214Z"
    },
    "papermill": {
     "duration": 8.949121,
     "end_time": "2025-07-29T22:10:04.144527",
     "exception": false,
     "start_time": "2025-07-29T22:09:55.195406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Utility functions to load dataset information saved by data_preparation.py\n",
    "Used by hyperparameter tuning and training stages\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import pickle\n",
    "import json\n",
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms\n",
    "from PIL import Image\n",
    "# from config import Config\n",
    "\n",
    "class FaceRecognitionDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Custom dataset for face recognition (classification)\n",
    "    Loads images and labels from saved splits with augmentation\n",
    "    \"\"\"\n",
    "    def __init__(self, data_dir, samples, transform=None, augment_factor=10):\n",
    "        self.data_dir = data_dir\n",
    "        self.transform = transform\n",
    "        self.samples = samples\n",
    "        self.class_names = Config.CLASS_NAMES\n",
    "        self.augment_factor = augment_factor\n",
    "        \n",
    "        # Create balanced dataset with synthetic negative samples\n",
    "        self.balanced_samples = self._create_balanced_samples()\n",
    "        \n",
    "        # Create augmented samples\n",
    "        self.augmented_samples = self._create_augmented_samples()\n",
    "    \n",
    "    def _create_balanced_samples(self):\n",
    "        \"\"\"Use real samples from the dataset\"\"\"\n",
    "        # Simply return the original samples since we now have real negative samples\n",
    "        return self.samples\n",
    "    \n",
    "    def _create_augmented_samples(self):\n",
    "        \"\"\"Create multiple augmented versions of each image\"\"\"\n",
    "        augmented_samples = []\n",
    "        \n",
    "        for filename, label in self.balanced_samples:\n",
    "            # Add original sample\n",
    "            augmented_samples.append((filename, label, 0))  # 0 = original\n",
    "            \n",
    "            # Add augmented versions\n",
    "            for i in range(1, self.augment_factor):\n",
    "                augmented_samples.append((filename, label, i))  # i = augmented version\n",
    "        \n",
    "        return augmented_samples\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.augmented_samples)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        fname, label, aug_idx = self.augmented_samples[idx]\n",
    "        \n",
    "        # Construct correct path based on label\n",
    "        if label == 'Davido':\n",
    "            img_path = os.path.join(self.data_dir, 'Davido', fname)\n",
    "        else:  # Unknown\n",
    "            img_path = os.path.join(self.data_dir, 'Unknown', fname)\n",
    "        \n",
    "        # Debug: Check if file exists\n",
    "        if not os.path.exists(img_path):\n",
    "            print(f\"❌ File not found: {img_path}\")\n",
    "            print(f\"  Filename: {fname}\")\n",
    "            print(f\"  Label: {label}\")\n",
    "            print(f\"  Data dir: {self.data_dir}\")\n",
    "            raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
    "        \n",
    "        image = Image.open(img_path).convert('RGB')\n",
    "        label_idx = self.class_names.index(label)\n",
    "        \n",
    "        # Apply different augmentation based on aug_idx and label\n",
    "        if aug_idx == 0:\n",
    "            # Original image with minimal transforms\n",
    "            if self.transform:\n",
    "                image = self.transform(image)\n",
    "        else:\n",
    "            # Apply heavy augmentation\n",
    "            image = self._apply_augmentation(image, aug_idx, label)\n",
    "        \n",
    "        return {'image': image, 'label': label_idx, 'image_path': img_path}\n",
    "    \n",
    "    def _apply_augmentation(self, image, aug_idx, label):\n",
    "        \"\"\"Apply different augmentation based on index and label\"\"\"\n",
    "        # Set random seed for reproducible augmentation\n",
    "        import random\n",
    "        import numpy as np\n",
    "        random.seed(aug_idx)\n",
    "        np.random.seed(aug_idx)\n",
    "        \n",
    "        if label == 'Unknown':\n",
    "            # Apply very heavy augmentation for synthetic negative samples\n",
    "            aug_transform = transforms.Compose([\n",
    "                transforms.Resize((Config.IMAGE_SIZE[0] + 40, Config.IMAGE_SIZE[1] + 40)),\n",
    "                transforms.RandomCrop(Config.IMAGE_SIZE),\n",
    "                transforms.RandomHorizontalFlip(p=0.8),\n",
    "                transforms.RandomRotation(degrees=45),\n",
    "                transforms.ColorJitter(brightness=0.5, contrast=0.5, saturation=0.5, hue=0.3),\n",
    "                transforms.RandomGrayscale(p=0.3),\n",
    "                transforms.RandomAffine(degrees=30, translate=(0.2, 0.2), scale=(0.7, 1.3)),\n",
    "                transforms.ToTensor(),\n",
    "                transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "                transforms.RandomErasing(p=0.4, scale=(0.1, 0.3)),\n",
    "            ])\n",
    "        else:\n",
    "            # Apply moderate augmentation for Davido samples\n",
    "            aug_transform = transforms.Compose([\n",
    "                transforms.Resize((Config.IMAGE_SIZE[0] + 20, Config.IMAGE_SIZE[1] + 20)),\n",
    "                transforms.RandomCrop(Config.IMAGE_SIZE),\n",
    "                transforms.RandomHorizontalFlip(p=0.5),\n",
    "                transforms.RandomRotation(degrees=15),\n",
    "                transforms.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.3, hue=0.1),\n",
    "                transforms.RandomGrayscale(p=0.1),\n",
    "                transforms.RandomAffine(degrees=0, translate=(0.1, 0.1), scale=(0.9, 1.1)),\n",
    "                transforms.ToTensor(),\n",
    "                transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "                transforms.RandomErasing(p=0.2, scale=(0.02, 0.2)),\n",
    "            ])\n",
    "        \n",
    "        return aug_transform(image)\n",
    "\n",
    "def get_transforms():\n",
    "    \"\"\"Comprehensive data augmentation for small datasets\"\"\"\n",
    "    return transforms.Compose([\n",
    "        transforms.Resize((Config.IMAGE_SIZE[0] + 20, Config.IMAGE_SIZE[1] + 20)),  # Slightly larger for cropping\n",
    "        transforms.RandomCrop(Config.IMAGE_SIZE),  # Random crop\n",
    "        transforms.RandomHorizontalFlip(p=0.5),  # Random horizontal flip\n",
    "        transforms.RandomRotation(degrees=15),  # Random rotation\n",
    "        transforms.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.3, hue=0.1),  # Color augmentation\n",
    "        transforms.RandomGrayscale(p=0.1),  # Random grayscale\n",
    "        transforms.RandomAffine(degrees=0, translate=(0.1, 0.1), scale=(0.9, 1.1)),  # Affine transforms\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "        transforms.RandomErasing(p=0.2, scale=(0.02, 0.2)),  # Random erasing\n",
    "    ])\n",
    "\n",
    "def get_val_transforms():\n",
    "    \"\"\"Simple transforms for validation (no augmentation)\"\"\"\n",
    "    return transforms.Compose([\n",
    "        transforms.Resize(Config.IMAGE_SIZE),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "    ])\n",
    "\n",
    "def load_dataset_info():\n",
    "    \"\"\"Load dataset information saved by data_preparation.py\"\"\"\n",
    "    # Try multiple possible paths\n",
    "    possible_paths = [\n",
    "        os.path.join(Config.OUTPUT_DIR, 'dataset_info.json'),\n",
    "        os.path.join('/kaggle/input/fd-01-preprocessing/output', 'dataset_info.json'),\n",
    "        './output/dataset_info.json'\n",
    "    ]\n",
    "    \n",
    "    info_path = None\n",
    "    for path in possible_paths:\n",
    "        if os.path.exists(path):\n",
    "            info_path = path\n",
    "            break\n",
    "    \n",
    "    if info_path is None:\n",
    "        raise FileNotFoundError(f\"Dataset info not found. Tried: {possible_paths}. Run data_preparation.py first.\")\n",
    "    \n",
    "    with open(info_path, 'r') as f:\n",
    "        dataset_info = json.load(f)\n",
    "    \n",
    "    print(f\"Loaded dataset info:\")\n",
    "    print(f\"  Total samples: {dataset_info['total_samples']}\")\n",
    "    print(f\"  Classes: {dataset_info['class_names']}\")\n",
    "    print(f\"  Class distribution: {dataset_info['class_distribution']}\")\n",
    "    \n",
    "    return dataset_info\n",
    "\n",
    "def load_dataset_splits():\n",
    "    \"\"\"Load train/val splits saved by data_preparation.py\"\"\"\n",
    "    # Try multiple possible paths\n",
    "    possible_paths = [\n",
    "        os.path.join(Config.OUTPUT_DIR, 'dataset_splits.pkl'),\n",
    "        os.path.join('/kaggle/input/fd-01-preprocessing/output', 'dataset_splits.pkl'),\n",
    "        './output/dataset_splits.pkl'\n",
    "    ]\n",
    "    \n",
    "    splits_path = None\n",
    "    for path in possible_paths:\n",
    "        if os.path.exists(path):\n",
    "            splits_path = path\n",
    "            break\n",
    "    \n",
    "    if splits_path is None:\n",
    "        raise FileNotFoundError(f\"Dataset splits not found. Tried: {possible_paths}. Run data_preparation.py first.\")\n",
    "    \n",
    "    with open(splits_path, 'rb') as f:\n",
    "        splits_data = pickle.load(f)\n",
    "    \n",
    "    return splits_data['train_samples'], splits_data['val_samples'], splits_data['class_names']\n",
    "\n",
    "def create_data_loaders(batch_size=None, num_workers=None):\n",
    "    \"\"\"Create train and validation data loaders from saved splits\"\"\"\n",
    "    if batch_size is None:\n",
    "        batch_size = Config.BATCH_SIZE\n",
    "    if num_workers is None:\n",
    "        num_workers = min(Config.CPU_CORES, 4)\n",
    "    \n",
    "    # Load saved splits\n",
    "    train_samples, val_samples, class_names = load_dataset_splits()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = FaceRecognitionDataset(\n",
    "        Config.DATA_DIR,\n",
    "        train_samples,\n",
    "        transform=get_transforms()\n",
    "    )\n",
    "    \n",
    "    val_dataset = FaceRecognitionDataset(\n",
    "        Config.DATA_DIR,\n",
    "        val_samples,\n",
    "        transform=get_val_transforms()\n",
    "    )\n",
    "    \n",
    "    # Create data loaders\n",
    "    train_loader = DataLoader(\n",
    "        train_dataset,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=True,\n",
    "        num_workers=num_workers,\n",
    "        pin_memory=True,\n",
    "        drop_last=True\n",
    "    )\n",
    "    \n",
    "    val_loader = DataLoader(\n",
    "        val_dataset,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=False,\n",
    "        num_workers=num_workers,\n",
    "        pin_memory=True\n",
    "    )\n",
    "    \n",
    "    print(f\"Created data loaders:\")\n",
    "    print(f\"  Training: {len(train_loader)} batches\")\n",
    "    print(f\"  Validation: {len(val_loader)} batches\")\n",
    "    \n",
    "    return train_loader, val_loader\n",
    "\n",
    "def test_data_loading():\n",
    "    \"\"\"Test function to verify data loading works\"\"\"\n",
    "    try:\n",
    "        dataset_info = load_dataset_info()\n",
    "        train_loader, val_loader = create_data_loaders()\n",
    "        \n",
    "        # Test a batch\n",
    "        for batch in train_loader:\n",
    "            print(f\"Test batch shape: {batch['image'].shape}\")\n",
    "            print(f\"Test batch labels: {batch['label']}\")\n",
    "            break\n",
    "        \n",
    "        print(\"✓ Data loading test successful!\")\n",
    "        return True\n",
    "    except Exception as e:\n",
    "        print(f\"✗ Data loading test failed: {e}\")\n",
    "        return False\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     test_data_loading() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "779d3dc8",
   "metadata": {
    "papermill": {
     "duration": 0.020959,
     "end_time": "2025-07-29T22:10:04.187834",
     "exception": false,
     "start_time": "2025-07-29T22:10:04.166875",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Training Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6f84b63f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T22:10:04.232131Z",
     "iopub.status.busy": "2025-07-29T22:10:04.231754Z",
     "iopub.status.idle": "2025-07-29T22:10:19.755611Z",
     "shell.execute_reply": "2025-07-29T22:10:19.755015Z"
    },
    "papermill": {
     "duration": 15.547747,
     "end_time": "2025-07-29T22:10:19.756909",
     "exception": false,
     "start_time": "2025-07-29T22:10:04.209162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-29 22:10:06.073261: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753827006.257883      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753827006.309545      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Section 2: Model Selection and Training\n",
    "Lightweight face detection model optimized for real-time processing on Kaggle hardware\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import json\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.tensorboard import SummaryWriter\n",
    "import torchvision.models as models\n",
    "from tqdm import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "# from config import Config\n",
    "# from data_loader_utils import create_data_loaders\n",
    "\n",
    "# Utility function to load best learning rate if available\n",
    "def get_best_learning_rate():\n",
    "    best_lr_path = os.path.join(\"/kaggle/input/fd-02-hyperparam-tuning/output\", \"best_learning_rate.txt\")\n",
    "    if os.path.exists(best_lr_path):\n",
    "        try:\n",
    "            with open(best_lr_path, \"r\") as f:\n",
    "                lr = float(f.read().strip())\n",
    "                print(f\"[INFO] Using best learning rate from tuning: {lr}\")\n",
    "                return lr\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Could not read best learning rate: {e}. Using default.\")\n",
    "    print(f\"[INFO] Using default learning rate: {Config.LEARNING_RATE}\")\n",
    "    return Config.LEARNING_RATE\n",
    "\n",
    "def get_best_hyperparameters():\n",
    "    \"\"\"Load best hyperparameters from tuning results\"\"\"\n",
    "    best_params_path = os.path.join(Config.OUTPUT_DIR, \"best_hyperparameters.json\")\n",
    "    \n",
    "    if os.path.exists(best_params_path):\n",
    "        try:\n",
    "            with open(best_params_path, 'r') as f:\n",
    "                params = json.load(f)\n",
    "            print(f\"[INFO] Loaded best hyperparameters from {best_params_path}\")\n",
    "            return params\n",
    "        except Exception as e:\n",
    "            print(f\"[WARNING] Failed to load hyperparameters: {e}\")\n",
    "    \n",
    "    # Default hyperparameters (from sequential tuning approach)\n",
    "    print(\"[INFO] Using default hyperparameters\")\n",
    "    return {\n",
    "        'learning_rate': 1e-3,  # Default learning rate\n",
    "        'weight_decay': 1e-4,   # Default weight decay\n",
    "        'batch_size': 16,        # Fixed batch size\n",
    "        'scheduler_step_size': 15  # Fixed step size\n",
    "    }\n",
    "\n",
    "class FaceRecognitionModel(nn.Module):\n",
    "    \"\"\"\n",
    "    Face recognition model for Davido vs Unknown classification\n",
    "    Uses MobileNetV2 backbone with a classification head\n",
    "    \"\"\"\n",
    "    def __init__(self, num_classes=2, pretrained=True):\n",
    "        super().__init__()\n",
    "        if pretrained:\n",
    "            # Use pretrained weights\n",
    "            self.backbone = models.mobilenet_v2(weights=models.MobileNet_V2_Weights.IMAGENET1K_V1).features\n",
    "        else:\n",
    "            # Use random weights (no download)\n",
    "            self.backbone = models.mobilenet_v2(weights=None).features\n",
    "        self.pool = nn.AdaptiveAvgPool2d((1, 1))\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(1280, num_classes)\n",
    "        )\n",
    "    def forward(self, x):\n",
    "        x = self.backbone(x)\n",
    "        x = self.pool(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "class ModelTrainer:\n",
    "    \"\"\"\n",
    "    Handles model training for face recognition (classification)\n",
    "    \"\"\"\n",
    "    def __init__(self, model, train_loader, val_loader):\n",
    "        self.model = model\n",
    "        self.train_loader = train_loader\n",
    "        self.val_loader = val_loader\n",
    "        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "        self.model.to(self.device)\n",
    "        \n",
    "        # Load best hyperparameters\n",
    "        best_params = get_best_hyperparameters()\n",
    "        \n",
    "        # Initialize optimizer and scheduler with best parameters\n",
    "        self.optimizer = optim.AdamW(\n",
    "            self.model.parameters(),\n",
    "            lr=best_params['learning_rate'],\n",
    "            weight_decay=best_params['weight_decay']\n",
    "        )\n",
    "        \n",
    "        self.scheduler = optim.lr_scheduler.StepLR(\n",
    "            self.optimizer,\n",
    "            step_size=best_params['scheduler_step_size'],\n",
    "            gamma=Config.SCHEDULER_GAMMA\n",
    "        )\n",
    "        \n",
    "        self.criterion = nn.CrossEntropyLoss()\n",
    "        self.writer = SummaryWriter(Config.LOGS_DIR)\n",
    "        self.train_losses = []\n",
    "        self.val_losses = []\n",
    "        self.best_val_loss = float('inf')\n",
    "        \n",
    "        # Early stopping parameters\n",
    "        self.patience = Config.EARLY_STOPPING_PATIENCE\n",
    "        self.min_delta = Config.EARLY_STOPPING_MIN_DELTA\n",
    "        self.counter = 0  # Counter for epochs without improvement\n",
    "        self.early_stop = False  # Flag to stop training\n",
    "        \n",
    "        # Debug model and loss function\n",
    "        print(f\"Model initialized on device: {self.device}\")\n",
    "        print(f\"Total parameters: {sum(p.numel() for p in self.model.parameters()):,}\")\n",
    "        print(f\"Learning rate: {best_params['learning_rate']:.6f}\")\n",
    "        print(f\"Weight decay: {best_params['weight_decay']:.6f}\")\n",
    "        print(f\"Loss function: {self.criterion}\")\n",
    "        print(f\"Early stopping patience: {self.patience}\")\n",
    "        print(f\"Early stopping min delta: {self.min_delta}\")\n",
    "        \n",
    "        # Test model with dummy input\n",
    "        dummy_input = torch.randn(1, 3, Config.IMAGE_SIZE[0], Config.IMAGE_SIZE[1]).to(self.device)\n",
    "        dummy_output = self.model(dummy_input)\n",
    "        print(f\"Model test - Input shape: {dummy_input.shape}\")\n",
    "        print(f\"Model test - Output shape: {dummy_output.shape}\")\n",
    "        print(f\"Model test - Output range: [{dummy_output.min().item():.4f}, {dummy_output.max().item():.4f}]\")\n",
    "        \n",
    "        # Test loss function\n",
    "        dummy_labels = torch.randint(0, Config.NUM_CLASSES, (1,)).to(self.device)\n",
    "        dummy_loss = self.criterion(dummy_output, dummy_labels)\n",
    "        print(f\"Loss test - Labels: {dummy_labels}\")\n",
    "        print(f\"Loss test - Loss value: {dummy_loss.item():.6f}\")\n",
    "    \n",
    "    def check_early_stopping(self, val_loss):\n",
    "        \"\"\"Check if training should stop early\"\"\"\n",
    "        if val_loss < self.best_val_loss - self.min_delta:\n",
    "            self.best_val_loss = val_loss\n",
    "            self.counter = 0\n",
    "            return False  # Continue training\n",
    "        else:\n",
    "            self.counter += 1\n",
    "            if self.counter >= self.patience:\n",
    "                return True  # Stop training\n",
    "            return False  # Continue training\n",
    "    def train_epoch(self, epoch):\n",
    "        \"\"\"Train for one epoch\"\"\"\n",
    "        self.model.train()\n",
    "        total_loss = 0.0\n",
    "        num_batches = 0\n",
    "        \n",
    "        # Check if train_loader is empty\n",
    "        if len(self.train_loader) == 0:\n",
    "            print(\"[ERROR] Training loader is empty!\")\n",
    "            return 0.0\n",
    "        \n",
    "        for batch_idx, batch in enumerate(self.train_loader):\n",
    "            # Handle dictionary format from dataset\n",
    "            if isinstance(batch, dict):\n",
    "                images = batch['image'].to(self.device)\n",
    "                labels = batch['label'].to(self.device)\n",
    "            else:\n",
    "                # Handle tuple format (images, labels)\n",
    "                images, labels = batch\n",
    "                images = images.to(self.device)\n",
    "                labels = labels.to(self.device)\n",
    "            \n",
    "            self.optimizer.zero_grad()\n",
    "            outputs = self.model(images)\n",
    "            loss = self.criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            self.optimizer.step()\n",
    "            \n",
    "            # Debug information for first few batches\n",
    "            if batch_idx < 3:  # Print first 3 batches info\n",
    "                print(f\"[DEBUG] Training batch {batch_idx}:\")\n",
    "                print(f\"  Images shape: {images.shape}\")\n",
    "                print(f\"  Labels: {labels}\")\n",
    "                print(f\"  Outputs shape: {outputs.shape}\")\n",
    "                print(f\"  Outputs range: [{outputs.min().item():.4f}, {outputs.max().item():.4f}]\")\n",
    "                print(f\"  Loss value: {loss.item():.6f}\")\n",
    "                print(f\"  Predicted classes: {torch.argmax(outputs, dim=1)}\")\n",
    "            \n",
    "            total_loss += loss.item()\n",
    "            num_batches += 1\n",
    "            \n",
    "            if batch_idx % 10 == 0:\n",
    "                self.writer.add_scalar('Train/Loss', loss.item(), epoch * len(self.train_loader) + batch_idx)\n",
    "        \n",
    "        # Prevent division by zero\n",
    "        if num_batches == 0:\n",
    "            print(\"[ERROR] No batches processed in training epoch!\")\n",
    "            return 0.0\n",
    "            \n",
    "        avg_loss = total_loss / num_batches\n",
    "        self.train_losses.append(avg_loss)\n",
    "        \n",
    "        # Debug final training loss\n",
    "        print(f\"[DEBUG] Training epoch {epoch}:\")\n",
    "        print(f\"  Total loss: {total_loss:.6f}\")\n",
    "        print(f\"  Num batches: {num_batches}\")\n",
    "        print(f\"  Average loss: {avg_loss:.6f}\")\n",
    "        \n",
    "        return avg_loss\n",
    "    def validate_epoch(self, epoch):\n",
    "        \"\"\"Validate for one epoch\"\"\"\n",
    "        self.model.eval()\n",
    "        total_loss = 0.0\n",
    "        num_batches = 0\n",
    "        \n",
    "        # Check if val_loader is empty\n",
    "        if len(self.val_loader) == 0:\n",
    "            print(\"[ERROR] Validation loader is empty!\")\n",
    "            return 0.0\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for batch_idx, batch in enumerate(self.val_loader):\n",
    "                # Handle dictionary format from dataset\n",
    "                if isinstance(batch, dict):\n",
    "                    images = batch['image'].to(self.device)\n",
    "                    labels = batch['label'].to(self.device)\n",
    "                else:\n",
    "                    # Handle tuple format (images, labels)\n",
    "                    images, labels = batch\n",
    "                    images = images.to(self.device)\n",
    "                    labels = labels.to(self.device)\n",
    "                \n",
    "                outputs = self.model(images)\n",
    "                loss = self.criterion(outputs, labels)\n",
    "                \n",
    "                # Debug information\n",
    "                if batch_idx == 0:  # Print first batch info\n",
    "                    print(f\"[DEBUG] Validation batch {batch_idx}:\")\n",
    "                    print(f\"  Images shape: {images.shape}\")\n",
    "                    print(f\"  Labels: {labels}\")\n",
    "                    print(f\"  Outputs shape: {outputs.shape}\")\n",
    "                    print(f\"  Outputs range: [{outputs.min().item():.4f}, {outputs.max().item():.4f}]\")\n",
    "                    print(f\"  Loss value: {loss.item():.6f}\")\n",
    "                    print(f\"  Predicted classes: {torch.argmax(outputs, dim=1)}\")\n",
    "                \n",
    "                total_loss += loss.item()\n",
    "                num_batches += 1\n",
    "                \n",
    "                if batch_idx % 10 == 0:\n",
    "                    self.writer.add_scalar('Val/Loss', loss.item(), epoch * len(self.val_loader) + batch_idx)\n",
    "        \n",
    "        # Prevent division by zero\n",
    "        if num_batches == 0:\n",
    "            print(\"[ERROR] No batches processed in validation epoch!\")\n",
    "            return 0.0\n",
    "            \n",
    "        avg_loss = total_loss / num_batches\n",
    "        self.val_losses.append(avg_loss)\n",
    "        \n",
    "        # Debug final validation loss\n",
    "        print(f\"[DEBUG] Validation epoch {epoch}:\")\n",
    "        print(f\"  Total loss: {total_loss:.6f}\")\n",
    "        print(f\"  Num batches: {num_batches}\")\n",
    "        print(f\"  Average loss: {avg_loss:.6f}\")\n",
    "        \n",
    "        return avg_loss\n",
    "    def save_checkpoint(self, epoch, is_best=False):\n",
    "        # Ensure models directory exists\n",
    "        os.makedirs(Config.MODELS_DIR, exist_ok=True)\n",
    "        \n",
    "        checkpoint = {\n",
    "            'epoch': epoch,\n",
    "            'model_state_dict': self.model.state_dict(),\n",
    "            'optimizer_state_dict': self.optimizer.state_dict(),\n",
    "            'scheduler_state_dict': self.scheduler.state_dict(),\n",
    "            'train_losses': self.train_losses,\n",
    "            'val_losses': self.val_losses,\n",
    "            'best_val_loss': self.best_val_loss\n",
    "        }\n",
    "        checkpoint_path = os.path.join(Config.MODELS_DIR, f'checkpoint_epoch_{epoch}.pt')\n",
    "        torch.save(checkpoint, checkpoint_path)\n",
    "        if is_best:\n",
    "            best_path = os.path.join(Config.MODELS_DIR, 'best_model.pt')\n",
    "            torch.save(checkpoint, best_path)\n",
    "            print(f\"Saved best model with validation loss: {self.best_val_loss:.4f}\")\n",
    "    def train(self):\n",
    "        print(\"Starting training...\")\n",
    "        print(f\"Training for {Config.EPOCHS} epochs (with early stopping)\")\n",
    "        print(f\"Learning rate: {self.optimizer.param_groups[0]['lr']}\")\n",
    "        print(f\"Batch size: {Config.BATCH_SIZE}\")\n",
    "        print(f\"Early stopping patience: {self.patience}\")\n",
    "        \n",
    "        for epoch in range(Config.EPOCHS):\n",
    "            train_loss = self.train_epoch(epoch)\n",
    "            val_loss = self.validate_epoch(epoch)\n",
    "            self.scheduler.step()\n",
    "            \n",
    "            # Check for best model\n",
    "            is_best = val_loss < self.best_val_loss\n",
    "            if is_best:\n",
    "                self.best_val_loss = val_loss\n",
    "            \n",
    "            # Check early stopping\n",
    "            should_stop = self.check_early_stopping(val_loss)\n",
    "            \n",
    "            # Save checkpoint periodically or when best\n",
    "            if (epoch + 1) % 5 == 0 or is_best:\n",
    "                self.save_checkpoint(epoch, is_best)\n",
    "            \n",
    "            print(f'Epoch {epoch+1}/{Config.EPOCHS}:')\n",
    "            print(f'  Train Loss: {train_loss:.4f}')\n",
    "            print(f'  Val Loss: {val_loss:.4f}')\n",
    "            print(f'  Learning Rate: {self.scheduler.get_last_lr()[0]:.6f}')\n",
    "            print(f'  Best Val Loss: {self.best_val_loss:.4f}')\n",
    "            print(f'  Early Stop Counter: {self.counter}/{self.patience}')\n",
    "            \n",
    "            if should_stop:\n",
    "                print(f'\\nEarly stopping triggered after {epoch+1} epochs!')\n",
    "                print(f'Best validation loss: {self.best_val_loss:.4f}')\n",
    "                break\n",
    "            \n",
    "            print()\n",
    "        \n",
    "        # Save final checkpoint\n",
    "        self.save_checkpoint(epoch, False)\n",
    "        self.writer.close()\n",
    "        \n",
    "        if should_stop:\n",
    "            print(\"Training stopped early due to no improvement!\")\n",
    "        else:\n",
    "            print(\"Training completed for all epochs!\")\n",
    "        \n",
    "        print(f\"Best validation loss: {self.best_val_loss:.4f}\")\n",
    "        return self.model\n",
    "    def plot_training_history(self):\n",
    "        plt.figure(figsize=(12, 4))\n",
    "        plt.subplot(1, 2, 1)\n",
    "        plt.plot(self.train_losses, label='Train Loss')\n",
    "        plt.plot(self.val_losses, label='Val Loss')\n",
    "        plt.title('Training History')\n",
    "        plt.xlabel('Epoch')\n",
    "        plt.ylabel('Loss')\n",
    "        plt.legend()\n",
    "        plt.grid(True)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(os.path.join(Config.OUTPUT_DIR, 'training_history.png'))\n",
    "        plt.show()\n",
    "\n",
    "def main():\n",
    "    print(\"=== Section 2: Model Selection and Training ===\")\n",
    "    \n",
    "    # Create necessary directories\n",
    "    Config.create_directories()\n",
    "    \n",
    "    train_loader, val_loader = create_data_loaders()\n",
    "    if train_loader is None or val_loader is None:\n",
    "        print(\"Failed to load data. Please check data preparation.\")\n",
    "        return\n",
    "    model = FaceRecognitionModel(num_classes=Config.NUM_CLASSES, pretrained=Config.PRETRAINED)\n",
    "    trainer = ModelTrainer(model, train_loader, val_loader)\n",
    "    trained_model = trainer.train()\n",
    "    trainer.plot_training_history()\n",
    "    print(\"Model training completed successfully!\")\n",
    "    print(f\"Best validation loss: {trainer.best_val_loss:.4f}\")\n",
    "    print(f\"Model saved to: {Config.MODELS_DIR}\")\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     main() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8338827a",
   "metadata": {
    "papermill": {
     "duration": 0.074887,
     "end_time": "2025-07-29T22:10:19.853375",
     "exception": false,
     "start_time": "2025-07-29T22:10:19.778488",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f6450f8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-29T22:10:19.897587Z",
     "iopub.status.busy": "2025-07-29T22:10:19.897066Z",
     "iopub.status.idle": "2025-07-29T22:12:24.899085Z",
     "shell.execute_reply": "2025-07-29T22:12:24.896829Z"
    },
    "papermill": {
     "duration": 125.034953,
     "end_time": "2025-07-29T22:12:24.909690",
     "exception": false,
     "start_time": "2025-07-29T22:10:19.874737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:10:20,254] A new study created in memory with name: learning_rate_tuning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Sequential Hyperparameter Tuning ===\n",
      "Step 1: Learning Rate Tuning\n",
      "Step 2: Weight Decay Tuning\n",
      "\n",
      "Testing data loading...\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "Created data loaders:\n",
      "Training: 40 batches\n",
      "Validation: 10 batches\n",
      "Data loading test successful:\n",
      "Training batches: 40\n",
      "Validation batches: 10\n",
      "\n",
      "=== Step 1: Learning Rate Tuning ===\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/13.jpg❌ File not found: ./data/Davido/47.jpg\n",
      "\n",
      "  Filename: 13.jpg  Filename: 47.jpg❌ File not found: ./data/Davido/31.jpg\n",
      "❌ File not found: ./data/Davido/34.jpg\n",
      "\n",
      "  Filename: 31.jpg\n",
      "  Label: Davido  Label: Davido\n",
      "  Filename: 34.jpg  Label: Davido\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Label: Davido\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/11.jpg❌ File not found: ./data/Davido/45.jpg❌ File not found: ./data/Unknown/person_19.jpg  Filename: person_19.jpg\n",
      "  Filename: 11.jpg\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/25.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:10:20,702] Trial 0 finished with value: inf and parameters: {'learning_rate': 0.0005}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  Label: Davido  Filename: 45.jpg\n",
      "  Filename: 25.jpg  Label: Unknown\n",
      "\n",
      "  Data dir: ./data\n",
      "\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "  Label: Davido\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_20.jpg  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "  Filename: person_20.jpg\n",
      "\n",
      "  Label: Unknown\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/13.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Unknown/person_23.jpg❌ File not found: ./data/Davido/01.jpg❌ File not found: ./data/Davido/06.jpg\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/10.jpg  Filename: 06.jpg  Filename: 01.jpg\n",
      "\n",
      "  Filename: person_23.jpg\n",
      "  Filename: 10.jpg  Label: Davido  Label: Davido\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data  Label: Unknown  Label: Davido\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "❌ File not found: ./data/Davido/29.jpg❌ File not found: ./data/Davido/28.jpg\n",
      "❌ File not found: ./data/Davido/34.jpg❌ File not found: ./data/Davido/20.jpg\n",
      "\n",
      "  Filename: 28.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:10:20,979] Trial 1 finished with value: inf and parameters: {'learning_rate': 0.01}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  Filename: 34.jpg  Filename: 29.jpg  Filename: 20.jpg\n",
      "\n",
      "  Label: Davido\n",
      "\n",
      "  Label: Davido  Label: Davido\n",
      "\n",
      "\n",
      "  Label: Davido\n",
      "  Data dir: ./data  Data dir: ./data  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/31.jpg\n",
      "  Filename: 31.jpg\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Unknown/person_23.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/17.jpg❌ File not found: ./data/Unknown/person_09.jpg❌ File not found: ./data/Unknown/person_17.jpg\n",
      "\n",
      "❌ File not found: ./data/Davido/39.jpg\n",
      "  Filename: person_09.jpg  Filename: person_17.jpg\n",
      "\n",
      "\n",
      "  Filename: 17.jpg  Filename: 39.jpg  Label: Unknown  Label: Unknown\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Davido  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "❌ File not found: ./data/Davido/25.jpg❌ File not found: ./data/Unknown/person_08.jpg❌ File not found: ./data/Davido/41.jpg\n",
      "❌ File not found: ./data/Unknown/person_06.jpg\n",
      "  Filename: 25.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:10:21,260] Trial 2 finished with value: inf and parameters: {'learning_rate': 0.001}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "  Filename: person_08.jpg  Filename: 41.jpg  Filename: person_06.jpg\n",
      "\n",
      "\n",
      "  Label: Davido\n",
      "  Label: Davido  Label: Unknown  Label: Unknown\n",
      "\n",
      "  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/38.jpg\n",
      "  Filename: 38.jpg\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Unknown/person_17.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/21.jpg❌ File not found: ./data/Davido/26.jpg❌ File not found: ./data/Unknown/person_11.jpg\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/29.jpg  Filename: 21.jpg  Filename: person_11.jpg\n",
      "  Filename: 26.jpg\n",
      "  Filename: 29.jpg\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Unknown  Label: Davido\n",
      "  Label: Davido\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data\n",
      "\n",
      "❌ File not found: ./data/Davido/27.jpg\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:10:21,528] Trial 3 finished with value: inf and parameters: {'learning_rate': 0.005}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "❌ File not found: ./data/Davido/08.jpg❌ File not found: ./data/Davido/25.jpg❌ File not found: ./data/Unknown/person_26.jpg\n",
      "  Filename: 27.jpg  Filename: 25.jpg\n",
      "  Filename: 08.jpg  Filename: person_26.jpg\n",
      "\n",
      "\n",
      "  Label: Davido\n",
      "  Label: Davido  Label: Unknown\n",
      "  Label: Davido\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/38.jpg\n",
      "  Filename: 38.jpg\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/26.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/19.jpg❌ File not found: ./data/Davido/02.jpg❌ File not found: ./data/Unknown/person_20.jpg\n",
      "\n",
      "  Filename: 02.jpg  Filename: 19.jpg\n",
      "❌ File not found: ./data/Davido/49.jpg\n",
      "\n",
      "\n",
      "  Filename: person_20.jpg  Label: Davido  Label: Davido  Filename: 49.jpg\n",
      "\n",
      "\n",
      "  Label: Unknown\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Label: Davido\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_10.jpg❌ File not found: ./data/Unknown/person_20.jpg\n",
      "❌ File not found: ./data/Davido/41.jpg  Filename: person_10.jpg\n",
      "❌ File not found: ./data/Davido/05.jpg\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:10:21,815] Trial 4 finished with value: inf and parameters: {'learning_rate': 0.001}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  Label: Unknown  Filename: person_20.jpg  Filename: 41.jpg  Filename: 05.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Davido  Data dir: ./data\n",
      "  Label: Unknown\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Unknown/person_20.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Unknown/person_14.jpg❌ File not found: ./data/Unknown/person_28.jpg❌ File not found: ./data/Davido/32.jpg\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_24.jpg  Filename: person_14.jpg  Filename: 32.jpg  Filename: person_28.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Filename: person_24.jpg  Label: Davido  Label: Unknown  Label: Unknown\n",
      "\n",
      "\n",
      "  Label: Unknown  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/25.jpg❌ File not found: ./data/Davido/06.jpg\n",
      "❌ File not found: ./data/Unknown/person_11.jpg❌ File not found: ./data/Davido/18.jpg\n",
      "  Filename: person_11.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:10:42,095] Trial 5 finished with value: inf and parameters: {'learning_rate': 0.0002}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "  Filename: 25.jpg  Filename: 18.jpg  Filename: 06.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Davido\n",
      "\n",
      "  Label: Unknown  Data dir: ./data  Label: Davido\n",
      "  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data\n",
      "❌ File not found: ./data/Davido/34.jpg\n",
      "\n",
      "  Data dir: ./data  Filename: 34.jpg\n",
      "\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Unknown/person_14.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/20.jpg❌ File not found: ./data/Unknown/person_15.jpg❌ File not found: ./data/Unknown/person_17.jpg\n",
      "\n",
      "❌ File not found: ./data/Davido/37.jpg\n",
      "  Filename: 20.jpg  Filename: person_17.jpg\n",
      "  Filename: person_15.jpg\n",
      "\n",
      "  Label: Unknown  Filename: 37.jpg\n",
      "  Label: Unknown\n",
      "  Label: Davido  Label: Davido\n",
      "\n",
      "  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_09.jpg❌ File not found: ./data/Davido/05.jpg❌ File not found: ./data/Unknown/person_24.jpg\n",
      "\n",
      "  Filename: person_09.jpg\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:10:42,366] Trial 6 finished with value: inf and parameters: {'learning_rate': 0.001}. Best is trial 0 with value: inf.\n",
      "[I 2025-07-29 22:10:42,372] A new study created in memory with name: weight_decay_tuning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Filename: person_24.jpg  Label: Unknown❌ File not found: ./data/Unknown/person_15.jpg\n",
      "\n",
      "  Filename: 05.jpg\n",
      "  Filename: person_15.jpg\n",
      "  Label: Unknown\n",
      "\n",
      "  Label: Davido\n",
      "  Label: Unknown\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Unknown/person_17.jpg\n",
      "\n",
      "\n",
      "Best Learning Rate: 0.0005\n",
      "Best Loss: inf\n",
      "\n",
      "=== Step 2: Weight Decay Tuning ===\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/09.jpg❌ File not found: ./data/Davido/27.jpg\n",
      "❌ File not found: ./data/Unknown/person_23.jpg\n",
      "❌ File not found: ./data/Unknown/person_21.jpg  Filename: 09.jpg  Filename: 27.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Filename: person_23.jpg  Label: Davido  Filename: person_21.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Label: Unknown  Label: Unknown\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "❌ File not found: ./data/Davido/20.jpg\n",
      "  Filename: 20.jpg\n",
      "❌ File not found: ./data/Davido/39.jpg  Label: Davido\n",
      "\n",
      "  Data dir: ./data❌ File not found: ./data/Davido/16.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:11:02,666] Trial 0 finished with value: inf and parameters: {'weight_decay': 1e-05}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Filename: 39.jpg❌ File not found: ./data/Davido/26.jpg\n",
      "\n",
      "\n",
      "  Label: Davido\n",
      "  Filename: 16.jpg  Filename: 26.jpg\n",
      "\n",
      "\n",
      "  Data dir: ./data  Label: Davido\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Unknown/person_23.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Unknown/person_04.jpg❌ File not found: ./data/Davido/26.jpg❌ File not found: ./data/Davido/29.jpg\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_10.jpg  Filename: 29.jpg  Filename: 26.jpg  Filename: person_04.jpg\n",
      "\n",
      "\n",
      "  Label: Davido\n",
      "  Label: Unknown  Label: Davido\n",
      "  Filename: person_10.jpg\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data  Data dir: ./data\n",
      "  Label: Unknown\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "❌ File not found: ./data/Unknown/person_11.jpg❌ File not found: ./data/Davido/29.jpg❌ File not found: ./data/Davido/10.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:11:22,938] Trial 1 finished with value: inf and parameters: {'weight_decay': 0.0001}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Filename: 29.jpg\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_05.jpg  Filename: 10.jpg  Filename: person_11.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Unknown  Label: Davido\n",
      "  Filename: person_05.jpg\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "  Label: Unknown\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/41.jpg  Data dir: ./data\n",
      "\n",
      "  Filename: 41.jpg\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/26.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/21.jpg❌ File not found: ./data/Davido/12.jpg❌ File not found: ./data/Davido/06.jpg\n",
      "❌ File not found: ./data/Davido/25.jpg\n",
      "\n",
      "\n",
      "  Filename: 06.jpg  Filename: 25.jpg  Filename: 12.jpg  Filename: 21.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Davido  Label: Davido\n",
      "  Label: Davido\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "❌ File not found: ./data/Davido/04.jpg❌ File not found: ./data/Davido/10.jpg❌ File not found: ./data/Davido/38.jpg\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:11:23,215] Trial 2 finished with value: inf and parameters: {'weight_decay': 5e-05}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  Filename: 04.jpg\n",
      "  Filename: 38.jpg❌ File not found: ./data/Unknown/person_15.jpg  Label: Davido\n",
      "\n",
      "\n",
      "  Label: Davido  Filename: 10.jpg\n",
      "  Filename: person_15.jpg\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "  Label: Davido  Label: Unknown\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/32.jpg  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "  Filename: 32.jpg\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/21.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/01.jpg❌ File not found: ./data/Davido/11.jpg❌ File not found: ./data/Davido/29.jpg\n",
      "\n",
      "\n",
      "  Filename: 29.jpg  Filename: 01.jpg❌ File not found: ./data/Davido/19.jpg  Filename: 11.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Filename: 19.jpg  Label: Davido  Label: Davido\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data  Data dir: ./data  Label: Davido\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "❌ File not found: ./data/Davido/09.jpg❌ File not found: ./data/Davido/39.jpg\n",
      "❌ File not found: ./data/Unknown/person_30.jpg\n",
      "  Filename: 09.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:11:43,492] Trial 3 finished with value: inf and parameters: {'weight_decay': 0.001}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Filename: 39.jpg❌ File not found: ./data/Unknown/person_06.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Filename: person_30.jpg  Label: Davido  Filename: person_06.jpg\n",
      "\n",
      "  Data dir: ./data  Label: Unknown\n",
      "\n",
      "\n",
      "\n",
      "  Label: Unknown  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "❌ File not found: ./data/Unknown/person_27.jpg\n",
      "  Filename: person_27.jpg\n",
      "  Label: Unknown\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/29.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/10.jpg❌ File not found: ./data/Davido/25.jpg❌ File not found: ./data/Davido/05.jpg\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_04.jpg  Filename: 10.jpg\n",
      "  Filename: 25.jpg  Filename: 05.jpg\n",
      "\n",
      "\n",
      "  Filename: person_04.jpg\n",
      "  Label: Davido  Label: Davido\n",
      "\n",
      "  Label: Davido\n",
      "  Label: Unknown  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_27.jpg❌ File not found: ./data/Unknown/person_09.jpg\n",
      "❌ File not found: ./data/Unknown/person_07.jpg\n",
      "\n",
      "  Filename: person_27.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:11:43,762] Trial 4 finished with value: inf and parameters: {'weight_decay': 0.0005}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Filename: person_09.jpg❌ File not found: ./data/Unknown/person_07.jpg\n",
      "  Filename: person_07.jpg\n",
      "\n",
      "\n",
      "  Filename: person_07.jpg  Label: Unknown  Label: Unknown\n",
      "\n",
      "\n",
      "  Label: Unknown  Data dir: ./data  Data dir: ./data  Label: Unknown\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/05.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/18.jpg❌ File not found: ./data/Davido/21.jpg❌ File not found: ./data/Davido/10.jpg\n",
      "\n",
      "  Filename: 21.jpg  Filename: 18.jpg❌ File not found: ./data/Davido/09.jpg\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Davido\n",
      "  Filename: 10.jpg\n",
      "\n",
      "\n",
      "  Filename: 09.jpg  Data dir: ./data  Label: Davido  Data dir: ./data\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Data dir: ./data\n",
      "\n",
      "❌ File not found: ./data/Davido/06.jpg  Data dir: ./data\n",
      "❌ File not found: ./data/Davido/08.jpg  Filename: 06.jpg\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/45.jpg  Label: Davido  Filename: 08.jpg\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:12:04,032] Trial 5 finished with value: inf and parameters: {'weight_decay': 0.0001}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "❌ File not found: ./data/Davido/49.jpg  Label: Davido  Data dir: ./data  Filename: 45.jpg\n",
      "\n",
      "  Filename: 49.jpg  Data dir: ./data\n",
      "\n",
      "  Label: Davido\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Data dir: ./data\n",
      "  Data dir: ./data❌ File not found: ./data/Davido/46.jpg\n",
      "\n",
      "  Filename: 46.jpg\n",
      "  Label: Davido\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/10.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/04.jpg❌ File not found: ./data/Davido/30.jpg❌ File not found: ./data/Davido/05.jpg\n",
      "\n",
      "❌ File not found: ./data/Davido/27.jpg  Filename: 30.jpg  Filename: 04.jpg\n",
      "\n",
      "  Filename: 27.jpg  Filename: 05.jpg\n",
      "\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Davido  Label: Davido  Label: Davido\n",
      "\n",
      "\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/50.jpg❌ File not found: ./data/Davido/24.jpg❌ File not found: ./data/Davido/34.jpg\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:12:04,306] Trial 6 finished with value: inf and parameters: {'weight_decay': 0.0005}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "❌ File not found: ./data/Unknown/person_07.jpg  Filename: 24.jpg\n",
      "  Filename: 50.jpg\n",
      "  Filename: 34.jpg\n",
      "\n",
      "  Filename: person_07.jpg\n",
      "\n",
      "  Label: Davido  Label: Unknown  Label: Davido\n",
      "  Label: Davido\n",
      "\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_17.jpg\n",
      "  Filename: person_17.jpg\n",
      "  Label: Unknown\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/04.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/02.jpg❌ File not found: ./data/Unknown/person_05.jpg❌ File not found: ./data/Davido/41.jpg\n",
      "\n",
      "  Filename: 02.jpg  Filename: person_05.jpg\n",
      "❌ File not found: ./data/Davido/05.jpg\n",
      "  Filename: 41.jpg\n",
      "  Label: Unknown\n",
      "\n",
      "\n",
      "  Filename: 05.jpg  Label: Davido  Data dir: ./data  Label: Davido\n",
      "  Label: Davido\n",
      "\n",
      "  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_03.jpg❌ File not found: ./data/Davido/12.jpg\n",
      "\n",
      "❌ File not found: ./data/Davido/46.jpg  Filename: 12.jpg  Filename: person_03.jpg"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:12:04,592] Trial 7 finished with value: inf and parameters: {'weight_decay': 0.002}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "❌ File not found: ./data/Unknown/person_23.jpg\n",
      "\n",
      "  Filename: 46.jpg  Label: Davido\n",
      "  Label: Unknown\n",
      "\n",
      "  Filename: person_23.jpg  Data dir: ./data\n",
      "  Label: Unknown\n",
      "\n",
      "  Data dir: ./data  Label: Davido\n",
      "\n",
      "\n",
      "  Data dir: ./data\n",
      "  Data dir: ./data\n",
      "[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/02.jpg\n",
      "\n",
      "Created data loaders:\n",
      "  Training: 40 batches\n",
      "  Validation: 10 batches\n",
      "❌ File not found: ./data/Davido/38.jpg❌ File not found: ./data/Davido/04.jpg❌ File not found: ./data/Davido/19.jpg\n",
      "❌ File not found: ./data/Davido/46.jpg\n",
      "  Filename: 19.jpg\n",
      "\n",
      "  Filename: 38.jpg\n",
      "  Filename: 46.jpg  Filename: 04.jpg\n",
      "  Label: Davido\n",
      "\n",
      "\n",
      "  Label: Davido  Label: Davido\n",
      "  Data dir: ./data  Data dir: ./data  Label: Davido\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data\n",
      "\n",
      "\n",
      "\n",
      "❌ File not found: ./data/Unknown/person_15.jpg❌ File not found: ./data/Davido/35.jpg❌ File not found: ./data/Unknown/person_20.jpg\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-29 22:12:24,877] Trial 8 finished with value: inf and parameters: {'weight_decay': 2e-05}. Best is trial 0 with value: inf.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "❌ File not found: ./data/Davido/06.jpg  Filename: person_15.jpg\n",
      "\n",
      "  Filename: 35.jpg  Filename: person_20.jpg  Filename: 06.jpg[ERROR] Training failed: Caught FileNotFoundError in DataLoader worker process 0.\n",
      "Original Traceback (most recent call last):\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/worker.py\", line 349, in _worker_loop\n",
      "    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]\n",
      "           ^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in fetch\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "  File \"/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\", line 52, in <listcomp>\n",
      "    data = [self.dataset[idx] for idx in possibly_batched_index]\n",
      "            ~~~~~~~~~~~~^^^^^\n",
      "  File \"/tmp/ipykernel_19/2909528126.py\", line 70, in __getitem__\n",
      "    raise FileNotFoundError(f\"Image file not found: {img_path}\")\n",
      "FileNotFoundError: Image file not found: ./data/Davido/19.jpg\n",
      "\n",
      "\n",
      "Best Weight Decay: 1e-05\n",
      "Best Loss: inf\n",
      "\n",
      "Best hyperparameters saved to ./output/best_hyperparameters.json\n",
      "Best learning rate saved to ./output/best_learning_rate.txt\n",
      "\n",
      "Hyperparameter Tuning Summary:\n",
      "Best Learning Rate: 0.000500\n",
      "Best Weight Decay: 0.000010\n",
      "Best Batch Size: 16 (fixed)\n",
      "Best Scheduler Step Size: 15 (fixed)\n",
      "Best Validation Loss: inf\n",
      "\n",
      "  Label: Unknown\n",
      "\n",
      "  Label: Davido\n",
      "  Label: Davido  Label: Unknown  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data\n",
      "\n",
      "  Data dir: ./data  Data dir: ./data"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Hyperparameter Tuning Script for Facial Detection System\n",
    "Uses Optuna to tune multiple important hyperparameters\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import json\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader\n",
    "import optuna\n",
    "from torch.utils.tensorboard import SummaryWriter\n",
    "import numpy as np\n",
    "\n",
    "# from config import Config\n",
    "# from data_loader_utils import create_data_loaders\n",
    "# from model_training import FaceRecognitionModel\n",
    "\n",
    "def objective_learning_rate(trial):\n",
    "    \"\"\"Objective function for learning rate tuning\"\"\"\n",
    "    # Fixed parameters\n",
    "    batch_size = 16\n",
    "    weight_decay = 1e-4  # Default weight decay\n",
    "    scheduler_step_size = 15  # Middle of 10-20 range\n",
    "    \n",
    "    # Learning rate grid search\n",
    "    learning_rate = trial.suggest_categorical('learning_rate', [\n",
    "        1e-4, 2e-4, 5e-4, 1e-3, 2e-3, 5e-3, 1e-2\n",
    "    ])\n",
    "    \n",
    "    # Create data loaders\n",
    "    train_loader, val_loader = create_data_loaders(batch_size=batch_size)\n",
    "    \n",
    "    if len(train_loader) == 0:\n",
    "        print(\"[ERROR] Training loader is empty. Skipping trial.\")\n",
    "        return float('inf')\n",
    "    \n",
    "    # Initialize model\n",
    "    model = FaceRecognitionModel(pretrained=False)\n",
    "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "    model.to(device)\n",
    "    \n",
    "    # Optimizer and scheduler\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=weight_decay)\n",
    "    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=scheduler_step_size, gamma=0.1)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    \n",
    "    # Quick training for evaluation\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    num_batches = 0\n",
    "    \n",
    "    # Use only a few batches for quick evaluation\n",
    "    train_loader_iter = iter(train_loader)\n",
    "    for _ in range(min(3, len(train_loader))):\n",
    "        try:\n",
    "            batch = next(train_loader_iter)\n",
    "            images = batch['image'].to(device)\n",
    "            labels = batch['label'].to(device)\n",
    "            \n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            \n",
    "            total_loss += loss.item()\n",
    "            num_batches += 1\n",
    "        except StopIteration:\n",
    "            break\n",
    "        except Exception as e:\n",
    "            print(f\"[ERROR] Training failed: {e}\")\n",
    "            return float('inf')\n",
    "    \n",
    "    if num_batches == 0:\n",
    "        return float('inf')\n",
    "    \n",
    "    avg_loss = total_loss / num_batches\n",
    "    return avg_loss\n",
    "\n",
    "def objective_weight_decay(trial, best_lr):\n",
    "    \"\"\"Objective function for weight decay tuning using best learning rate\"\"\"\n",
    "    # Fixed parameters\n",
    "    batch_size = 16\n",
    "    learning_rate = best_lr\n",
    "    scheduler_step_size = 15  # Middle of 10-20 range\n",
    "    \n",
    "    # Weight decay grid search\n",
    "    weight_decay = trial.suggest_categorical('weight_decay', [\n",
    "        1e-5, 2e-5, 5e-5, 1e-4, 2e-4, 5e-4, 1e-3, 2e-3, 5e-3\n",
    "    ])\n",
    "    \n",
    "    # Create data loaders\n",
    "    train_loader, val_loader = create_data_loaders(batch_size=batch_size)\n",
    "    \n",
    "    if len(train_loader) == 0:\n",
    "        print(\"[ERROR] Training loader is empty. Skipping trial.\")\n",
    "        return float('inf')\n",
    "    \n",
    "    # Initialize model\n",
    "    model = FaceRecognitionModel(pretrained=False)\n",
    "    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "    model.to(device)\n",
    "    \n",
    "    # Optimizer and scheduler\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=weight_decay)\n",
    "    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=scheduler_step_size, gamma=0.1)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    \n",
    "    # Quick training for evaluation\n",
    "    model.train()\n",
    "    total_loss = 0.0\n",
    "    num_batches = 0\n",
    "    \n",
    "    # Use only a few batches for quick evaluation\n",
    "    train_loader_iter = iter(train_loader)\n",
    "    for _ in range(min(3, len(train_loader))):\n",
    "        try:\n",
    "            batch = next(train_loader_iter)\n",
    "            images = batch['image'].to(device)\n",
    "            labels = batch['label'].to(device)\n",
    "            \n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(images)\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            \n",
    "            total_loss += loss.item()\n",
    "            num_batches += 1\n",
    "        except StopIteration:\n",
    "            break\n",
    "        except Exception as e:\n",
    "            print(f\"[ERROR] Training failed: {e}\")\n",
    "            return float('inf')\n",
    "    \n",
    "    if num_batches == 0:\n",
    "        return float('inf')\n",
    "    \n",
    "    avg_loss = total_loss / num_batches\n",
    "    return avg_loss\n",
    "\n",
    "def main():\n",
    "    \"\"\"Sequential hyperparameter tuning: LR first, then Weight Decay\"\"\"\n",
    "    print(\"=== Sequential Hyperparameter Tuning ===\")\n",
    "    print(\"Step 1: Learning Rate Tuning\")\n",
    "    print(\"Step 2: Weight Decay Tuning\")\n",
    "    \n",
    "    # Ensure output directory exists\n",
    "    os.makedirs(Config.OUTPUT_DIR, exist_ok=True)\n",
    "    \n",
    "    # Test data loading\n",
    "    print(\"\\nTesting data loading...\")\n",
    "    try:\n",
    "        train_loader, val_loader = create_data_loaders(batch_size=16)\n",
    "        print(f\"Created data loaders:\")\n",
    "        print(f\"Training: {len(train_loader)} batches\")\n",
    "        print(f\"Validation: {len(val_loader)} batches\")\n",
    "        \n",
    "        if len(train_loader) == 0:\n",
    "            print(\"[ERROR] Training loader is empty!\")\n",
    "            return\n",
    "        \n",
    "        print(\"Data loading test successful:\")\n",
    "        print(f\"Training batches: {len(train_loader)}\")\n",
    "        print(f\"Validation batches: {len(val_loader)}\")\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"[ERROR] Data loading failed: {e}\")\n",
    "        return\n",
    "    \n",
    "    # Step 1: Learning Rate Tuning\n",
    "    print(\"\\n=== Step 1: Learning Rate Tuning ===\")\n",
    "    study_lr = optuna.create_study(direction=\"minimize\", study_name=\"learning_rate_tuning\")\n",
    "    study_lr.optimize(objective_learning_rate, n_trials=7)  # Grid search over 7 LR values\n",
    "    \n",
    "    best_lr = study_lr.best_params['learning_rate']\n",
    "    best_lr_value = study_lr.best_value\n",
    "    \n",
    "    print(f\"\\nBest Learning Rate: {best_lr}\")\n",
    "    print(f\"Best Loss: {best_lr_value:.6f}\")\n",
    "    \n",
    "    # Step 2: Weight Decay Tuning\n",
    "    print(\"\\n=== Step 2: Weight Decay Tuning ===\")\n",
    "    study_wd = optuna.create_study(direction=\"minimize\", study_name=\"weight_decay_tuning\")\n",
    "    study_wd.optimize(lambda trial: objective_weight_decay(trial, best_lr), n_trials=9)  # Grid search over 9 WD values\n",
    "    \n",
    "    best_wd = study_wd.best_params['weight_decay']\n",
    "    best_wd_value = study_wd.best_value\n",
    "    \n",
    "    print(f\"\\nBest Weight Decay: {best_wd}\")\n",
    "    print(f\"Best Loss: {best_wd_value:.6f}\")\n",
    "    \n",
    "    # Final best hyperparameters\n",
    "    best_hyperparameters = {\n",
    "        'learning_rate': best_lr,\n",
    "        'weight_decay': best_wd,\n",
    "        'batch_size': 16,\n",
    "        'scheduler_step_size': 15\n",
    "    }\n",
    "    \n",
    "    # Save results\n",
    "    best_params_path = os.path.join(Config.OUTPUT_DIR, \"best_hyperparameters.json\")\n",
    "    with open(best_params_path, \"w\") as f:\n",
    "        json.dump(best_hyperparameters, f, indent=2)\n",
    "    \n",
    "    # Also save learning rate separately for backward compatibility\n",
    "    best_lr_path = os.path.join(Config.OUTPUT_DIR, \"best_learning_rate.txt\")\n",
    "    with open(best_lr_path, \"w\") as f:\n",
    "        f.write(str(best_lr))\n",
    "    \n",
    "    print(f\"\\nBest hyperparameters saved to {best_params_path}\")\n",
    "    print(f\"Best learning rate saved to {best_lr_path}\")\n",
    "    \n",
    "    print(\"\\nHyperparameter Tuning Summary:\")\n",
    "    print(f\"Best Learning Rate: {best_lr:.6f}\")\n",
    "    print(f\"Best Weight Decay: {best_wd:.6f}\")\n",
    "    print(f\"Best Batch Size: 16 (fixed)\")\n",
    "    print(f\"Best Scheduler Step Size: 15 (fixed)\")\n",
    "    print(f\"Best Validation Loss: {best_wd_value:.6f}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7961995,
     "sourceId": 12605156,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 253035811,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 229.633536,
   "end_time": "2025-07-29T22:12:27.694843",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-29T22:08:38.061307",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
