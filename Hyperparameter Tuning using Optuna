{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9fe52113",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-28T18:56:42.991111Z",
     "iopub.status.busy": "2025-07-28T18:56:42.990899Z",
     "iopub.status.idle": "2025-07-28T18:58:04.964860Z",
     "shell.execute_reply": "2025-07-28T18:58:04.964123Z"
    },
    "papermill": {
     "duration": 81.978917,
     "end_time": "2025-07-28T18:58:04.966449",
     "exception": false,
     "start_time": "2025-07-28T18:56:42.987532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m63.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m58.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m42.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m12.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m61.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard optuna"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79b6a0cc",
   "metadata": {
    "papermill": {
     "duration": 0.024409,
     "end_time": "2025-07-28T18:58:05.017958",
     "exception": false,
     "start_time": "2025-07-28T18:58:04.993549",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Config Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0424599e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T18:58:05.068555Z",
     "iopub.status.busy": "2025-07-28T18:58:05.068256Z",
     "iopub.status.idle": "2025-07-28T18:58:05.075380Z",
     "shell.execute_reply": "2025-07-28T18:58:05.074852Z"
    },
    "papermill": {
     "duration": 0.033871,
     "end_time": "2025-07-28T18:58:05.076400",
     "exception": false,
     "start_time": "2025-07-28T18:58:05.042529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Facial Detection System\n",
    "Optimized for Kaggle hardware constraints\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "\n",
    "class Config:\n",
    "    # Hardware constraints for Kaggle\n",
    "    GPU_MEMORY_LIMIT = 14  # GB (leaving 2GB buffer)\n",
    "    RAM_LIMIT = 28  # GB (leaving 4GB buffer)\n",
    "    CPU_CORES = 4\n",
    "    \n",
    "    # Dataset settings\n",
    "    DATASET_NAME = \"davido-recognition\"  # Custom Davido recognition dataset\n",
    "    TRAIN_SPLIT = 0.8\n",
    "    VAL_SPLIT = 0.2\n",
    "    IMAGE_SIZE = (160, 160)  # Standard for face recognition models (e.g., FaceNet)\n",
    "    BATCH_SIZE = 16  # Optimized for P100 GPU memory\n",
    "    DAVIDO_LABEL = \"Davido\"\n",
    "    UNKNOWN_LABEL = \"Unknown\"\n",
    "    CLASS_NAMES = [DAVIDO_LABEL, UNKNOWN_LABEL]\n",
    "    NUM_CLASSES = 2\n",
    "    \n",
    "    # Data augmentation settings\n",
    "    AUGMENTATION_PROBABILITY = 0.8\n",
    "    ROTATION_RANGE = 15\n",
    "    BRIGHTNESS_RANGE = 0.2\n",
    "    CONTRAST_RANGE = 0.2\n",
    "    HORIZONTAL_FLIP_PROB = 0.5\n",
    "    VERTICAL_FLIP_PROB = 0.0  # Keep faces upright\n",
    "    \n",
    "    # Model settings\n",
    "    MODEL_TYPE = \"mobilenet_v3\"  # Lightweight and efficient\n",
    "    PRETRAINED = True\n",
    "    NUM_CLASSES = 1  # Face detection only\n",
    "    CONFIDENCE_THRESHOLD = 0.5\n",
    "    NMS_THRESHOLD = 0.4\n",
    "    \n",
    "    # Training settings\n",
    "    EPOCHS = 50\n",
    "    LEARNING_RATE = 0.001\n",
    "    WEIGHT_DECAY = 1e-4\n",
    "    SCHEDULER_STEP_SIZE = 10\n",
    "    SCHEDULER_GAMMA = 0.5\n",
    "    \n",
    "    # Real-time detection settings\n",
    "    FPS_TARGET = 15  # Process every 4th frame at 60fps\n",
    "    FRAME_SKIP = 4\n",
    "    DETECTION_INTERVAL = 3  # frames between detections\n",
    "    \n",
    "    # Paths\n",
    "    DATA_DIR = \"/kaggle/input/input-images-davido\"\n",
    "    SCREENSHOT_DIR = \"./output/screenshots\"\n",
    "    MODELS_DIR = \"./models\"\n",
    "    LOGS_DIR = \"./logs\"\n",
    "    OUTPUT_DIR = \"./output\"\n",
    "    \n",
    "    # Create directories\n",
    "    @staticmethod\n",
    "    def create_directories():\n",
    "        \"\"\"Create necessary directories\"\"\"\n",
    "        dirs = [Config.DATA_DIR, Config.MODELS_DIR, Config.LOGS_DIR, Config.OUTPUT_DIR, Config.SCREENSHOT_DIR]\n",
    "        for dir_path in dirs:\n",
    "            os.makedirs(dir_path, exist_ok=True)\n",
    "    \n",
    "    # Model export settings\n",
    "    EXPORT_FORMAT = \"pt\"  # PyTorch format for local use\n",
    "    MODEL_FILENAME = \"face_detection_model.pt\" "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f975859",
   "metadata": {
    "papermill": {
     "duration": 0.024335,
     "end_time": "2025-07-28T18:58:05.125505",
     "exception": false,
     "start_time": "2025-07-28T18:58:05.101170",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Utility Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9617b98a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T18:58:05.176997Z",
     "iopub.status.busy": "2025-07-28T18:58:05.176699Z",
     "iopub.status.idle": "2025-07-28T18:58:13.092747Z",
     "shell.execute_reply": "2025-07-28T18:58:13.092131Z"
    },
    "papermill": {
     "duration": 7.943825,
     "end_time": "2025-07-28T18:58:13.094109",
     "exception": false,
     "start_time": "2025-07-28T18:58:05.150284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Utility functions to load dataset information saved by data_preparation.py\n",
    "Used by hyperparameter tuning and training stages\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import pickle\n",
    "import json\n",
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms\n",
    "from PIL import Image\n",
    "# from config import Config\n",
    "\n",
    "class FaceRecognitionDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Custom dataset for face recognition (classification)\n",
    "    Loads images and labels from saved splits\n",
    "    \"\"\"\n",
    "    def __init__(self, data_dir, samples, transform=None):\n",
    "        self.data_dir = data_dir\n",
    "        self.transform = transform\n",
    "        self.samples = samples\n",
    "        self.class_names = Config.CLASS_NAMES\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.samples)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        fname, label = self.samples[idx]\n",
    "        img_path = os.path.join(self.data_dir, fname)\n",
    "        image = Image.open(img_path).convert('RGB')\n",
    "        label_idx = self.class_names.index(label)\n",
    "        if self.transform:\n",
    "            image = self.transform(image)\n",
    "        return {'image': image, 'label': label_idx, 'image_path': img_path}\n",
    "\n",
    "def get_transforms():\n",
    "    \"\"\"Get the same transforms used in data preparation\"\"\"\n",
    "    return transforms.Compose([\n",
    "        transforms.Resize(Config.IMAGE_SIZE),\n",
    "        transforms.RandomHorizontalFlip(),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "    ])\n",
    "\n",
    "def load_dataset_info():\n",
    "    \"\"\"Load dataset information saved by data_preparation.py\"\"\"\n",
    "    # Updated path to match user's output directory\n",
    "    info_path = os.path.join('/kaggle/input/fd-01-preprocessing/output', 'dataset_info.json')\n",
    "    if not os.path.exists(info_path):\n",
    "        raise FileNotFoundError(f\"Dataset info not found at {info_path}. Run data_preparation.py first.\")\n",
    "    \n",
    "    with open(info_path, 'r') as f:\n",
    "        dataset_info = json.load(f)\n",
    "    \n",
    "    print(f\"Loaded dataset info:\")\n",
    "    print(f\"  Total samples: {dataset_info['total_samples']}\")\n",
    "    print(f\"  Classes: {dataset_info['class_names']}\")\n",
    "    print(f\"  Class distribution: {dataset_info['class_distribution']}\")\n",
    "    \n",
    "    return dataset_info\n",
    "\n",
    "def load_dataset_splits():\n",
    "    \"\"\"Load train/val splits saved by data_preparation.py\"\"\"\n",
    "    # Updated path to match user's output directory\n",
    "    splits_path = os.path.join('/kaggle/input/fd-01-preprocessing/output', 'dataset_splits.pkl')\n",
    "    if not os.path.exists(splits_path):\n",
    "        raise FileNotFoundError(f\"Dataset splits not found at {splits_path}. Run data_preparation.py first.\")\n",
    "    \n",
    "    with open(splits_path, 'rb') as f:\n",
    "        splits_data = pickle.load(f)\n",
    "    \n",
    "    return splits_data['train_samples'], splits_data['val_samples'], splits_data['class_names']\n",
    "\n",
    "def create_data_loaders(batch_size=None, num_workers=None):\n",
    "    \"\"\"Create train and validation data loaders from saved splits\"\"\"\n",
    "    if batch_size is None:\n",
    "        batch_size = Config.BATCH_SIZE\n",
    "    if num_workers is None:\n",
    "        num_workers = min(Config.CPU_CORES, 4)\n",
    "    \n",
    "    # Load saved splits\n",
    "    train_samples, val_samples, class_names = load_dataset_splits()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = FaceRecognitionDataset(\n",
    "        Config.DATA_DIR,\n",
    "        train_samples,\n",
    "        transform=get_transforms()\n",
    "    )\n",
    "    \n",
    "    val_dataset = FaceRecognitionDataset(\n",
    "        Config.DATA_DIR,\n",
    "        val_samples,\n",
    "        transform=get_transforms()\n",
    "    )\n",
    "    \n",
    "    # Create data loaders\n",
    "    train_loader = DataLoader(\n",
    "        train_dataset,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=True,\n",
    "        num_workers=num_workers,\n",
    "        pin_memory=True,\n",
    "        drop_last=True\n",
    "    )\n",
    "    \n",
    "    val_loader = DataLoader(\n",
    "        val_dataset,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=False,\n",
    "        num_workers=num_workers,\n",
    "        pin_memory=True\n",
    "    )\n",
    "    \n",
    "    print(f\"Created data loaders:\")\n",
    "    print(f\"  Training: {len(train_loader)} batches\")\n",
    "    print(f\"  Validation: {len(val_loader)} batches\")\n",
    "    \n",
    "    return train_loader, val_loader\n",
    "\n",
    "def test_data_loading():\n",
    "    \"\"\"Test function to verify data loading works\"\"\"\n",
    "    try:\n",
    "        dataset_info = load_dataset_info()\n",
    "        train_loader, val_loader = create_data_loaders()\n",
    "        \n",
    "        # Test a batch\n",
    "        for batch in train_loader:\n",
    "            print(f\"Test batch shape: {batch['image'].shape}\")\n",
    "            print(f\"Test batch labels: {batch['label']}\")\n",
    "            break\n",
    "        \n",
    "        print(\"✓ Data loading test successful!\")\n",
    "        return True\n",
    "    except Exception as e:\n",
    "        print(f\"✗ Data loading test failed: {e}\")\n",
    "        return False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64559111",
   "metadata": {
    "papermill": {
     "duration": 0.024496,
     "end_time": "2025-07-28T18:58:13.144077",
     "exception": false,
     "start_time": "2025-07-28T18:58:13.119581",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model Training Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "22c46465",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T18:58:13.242981Z",
     "iopub.status.busy": "2025-07-28T18:58:13.242606Z",
     "iopub.status.idle": "2025-07-28T18:58:29.189025Z",
     "shell.execute_reply": "2025-07-28T18:58:29.188378Z"
    },
    "papermill": {
     "duration": 15.973796,
     "end_time": "2025-07-28T18:58:29.190388",
     "exception": false,
     "start_time": "2025-07-28T18:58:13.216592",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-28 18:58:15.291074: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1753729095.485044      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1753729095.541384      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Section 2: Model Selection and Training\n",
    "Lightweight face detection model optimized for real-time processing on Kaggle hardware\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.tensorboard import SummaryWriter\n",
    "import torchvision.models as models\n",
    "from tqdm import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "# from config import Config\n",
    "# from data_loader_utils import create_data_loaders\n",
    "\n",
    "# Utility function to load best learning rate if available\n",
    "def get_best_learning_rate():\n",
    "    best_lr_path = os.path.join(Config.OUTPUT_DIR, \"best_learning_rate.txt\")\n",
    "    if os.path.exists(best_lr_path):\n",
    "        try:\n",
    "            with open(best_lr_path, \"r\") as f:\n",
    "                lr = float(f.read().strip())\n",
    "                print(f\"[INFO] Using best learning rate from tuning: {lr}\")\n",
    "                return lr\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Could not read best learning rate: {e}. Using default.\")\n",
    "    print(f\"[INFO] Using default learning rate: {Config.LEARNING_RATE}\")\n",
    "    return Config.LEARNING_RATE\n",
    "\n",
    "def get_best_hyperparameters():\n",
    "    \"\"\"Load best hyperparameters from tuning stage\"\"\"\n",
    "    best_params_path = os.path.join(Config.OUTPUT_DIR, \"best_hyperparameters.json\")\n",
    "    if os.path.exists(best_params_path):\n",
    "        try:\n",
    "            import json\n",
    "            with open(best_params_path, \"r\") as f:\n",
    "                params = json.load(f)\n",
    "            print(f\"[INFO] Using best hyperparameters from tuning:\")\n",
    "            for key, value in params.items():\n",
    "                print(f\"  {key}: {value}\")\n",
    "            return params\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Could not read best hyperparameters: {e}. Using defaults.\")\n",
    "    \n",
    "    # Return default parameters\n",
    "    default_params = {\n",
    "        'learning_rate': Config.LEARNING_RATE,\n",
    "        'batch_size': Config.BATCH_SIZE,\n",
    "        'weight_decay': Config.WEIGHT_DECAY,\n",
    "        'scheduler_step_size': Config.SCHEDULER_STEP_SIZE\n",
    "    }\n",
    "    print(f\"[INFO] Using default hyperparameters\")\n",
    "    return default_params\n",
    "\n",
    "class FaceRecognitionModel(nn.Module):\n",
    "    \"\"\"\n",
    "    Simple face recognition model for classifying Davido vs Unknown\n",
    "    Uses MobileNetV2 backbone with a classification head\n",
    "    \"\"\"\n",
    "    def __init__(self, num_classes=2, pretrained=True):\n",
    "        super().__init__()\n",
    "        self.backbone = models.mobilenet_v2(pretrained=pretrained).features\n",
    "        self.pool = nn.AdaptiveAvgPool2d((1, 1))\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(0.2),\n",
    "            nn.Linear(1280, num_classes)\n",
    "        )\n",
    "    def forward(self, x):\n",
    "        x = self.backbone(x)\n",
    "        x = self.pool(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "class ModelTrainer:\n",
    "    \"\"\"\n",
    "    Handles model training for face recognition (classification)\n",
    "    \"\"\"\n",
    "    def __init__(self, model, train_loader, val_loader):\n",
    "        self.model = model\n",
    "        self.train_loader = train_loader\n",
    "        self.val_loader = val_loader\n",
    "        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "        self.model.to(self.device)\n",
    "        \n",
    "        # Load best hyperparameters\n",
    "        best_params = get_best_hyperparameters()\n",
    "        \n",
    "        # Initialize optimizer and scheduler with best parameters\n",
    "        self.optimizer = optim.AdamW(\n",
    "            self.model.parameters(),\n",
    "            lr=best_params['learning_rate'],\n",
    "            weight_decay=best_params['weight_decay']\n",
    "        )\n",
    "        \n",
    "        self.scheduler = optim.lr_scheduler.StepLR(\n",
    "            self.optimizer,\n",
    "            step_size=best_params['scheduler_step_size'],\n",
    "            gamma=Config.SCHEDULER_GAMMA\n",
    "        )\n",
    "        \n",
    "        self.criterion = nn.CrossEntropyLoss()\n",
    "        self.writer = SummaryWriter(Config.LOGS_DIR)\n",
    "        self.train_losses = []\n",
    "        self.val_losses = []\n",
    "        self.best_val_loss = float('inf')\n",
    "        print(f\"Model initialized on device: {self.device}\")\n",
    "        print(f\"Total parameters: {sum(p.numel() for p in self.model.parameters()):,}\")\n",
    "    def train_epoch(self, epoch):\n",
    "        \"\"\"Train for one epoch\"\"\"\n",
    "        self.model.train()\n",
    "        total_loss = 0.0\n",
    "        num_batches = 0\n",
    "        \n",
    "        # Check if train_loader is empty\n",
    "        if len(self.train_loader) == 0:\n",
    "            print(\"[ERROR] Training loader is empty!\")\n",
    "            return 0.0\n",
    "        \n",
    "        for batch_idx, batch in enumerate(self.train_loader):\n",
    "            # Handle dictionary format from dataset\n",
    "            if isinstance(batch, dict):\n",
    "                images = batch['image'].to(self.device)\n",
    "                labels = batch['label'].to(self.device)\n",
    "            else:\n",
    "                # Handle tuple format (images, labels)\n",
    "                images, labels = batch\n",
    "                images = images.to(self.device)\n",
    "                labels = labels.to(self.device)\n",
    "            \n",
    "            self.optimizer.zero_grad()\n",
    "            outputs = self.model(images)\n",
    "            loss = self.criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            self.optimizer.step()\n",
    "            \n",
    "            total_loss += loss.item()\n",
    "            num_batches += 1\n",
    "            \n",
    "            if batch_idx % 10 == 0:\n",
    "                self.writer.add_scalar('Train/Loss', loss.item(), epoch * len(self.train_loader) + batch_idx)\n",
    "        \n",
    "        # Prevent division by zero\n",
    "        if num_batches == 0:\n",
    "            print(\"[ERROR] No batches processed in training epoch!\")\n",
    "            return 0.0\n",
    "            \n",
    "        avg_loss = total_loss / num_batches\n",
    "        self.train_losses.append(avg_loss)\n",
    "        return avg_loss\n",
    "    def validate_epoch(self, epoch):\n",
    "        \"\"\"Validate for one epoch\"\"\"\n",
    "        self.model.eval()\n",
    "        total_loss = 0.0\n",
    "        num_batches = 0\n",
    "        \n",
    "        # Check if val_loader is empty\n",
    "        if len(self.val_loader) == 0:\n",
    "            print(\"[ERROR] Validation loader is empty!\")\n",
    "            return 0.0\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            for batch_idx, batch in enumerate(self.val_loader):\n",
    "                # Handle dictionary format from dataset\n",
    "                if isinstance(batch, dict):\n",
    "                    images = batch['image'].to(self.device)\n",
    "                    labels = batch['label'].to(self.device)\n",
    "                else:\n",
    "                    # Handle tuple format (images, labels)\n",
    "                    images, labels = batch\n",
    "                    images = images.to(self.device)\n",
    "                    labels = labels.to(self.device)\n",
    "                \n",
    "                outputs = self.model(images)\n",
    "                loss = self.criterion(outputs, labels)\n",
    "                \n",
    "                total_loss += loss.item()\n",
    "                num_batches += 1\n",
    "                \n",
    "                if batch_idx % 10 == 0:\n",
    "                    self.writer.add_scalar('Val/Loss', loss.item(), epoch * len(self.val_loader) + batch_idx)\n",
    "        \n",
    "        # Prevent division by zero\n",
    "        if num_batches == 0:\n",
    "            print(\"[ERROR] No batches processed in validation epoch!\")\n",
    "            return 0.0\n",
    "            \n",
    "        avg_loss = total_loss / num_batches\n",
    "        self.val_losses.append(avg_loss)\n",
    "        return avg_loss\n",
    "    def save_checkpoint(self, epoch, is_best=False):\n",
    "        checkpoint = {\n",
    "            'epoch': epoch,\n",
    "            'model_state_dict': self.model.state_dict(),\n",
    "            'optimizer_state_dict': self.optimizer.state_dict(),\n",
    "            'scheduler_state_dict': self.scheduler.state_dict(),\n",
    "            'train_losses': self.train_losses,\n",
    "            'val_losses': self.val_losses,\n",
    "            'best_val_loss': self.best_val_loss,\n",
    "            'config': Config.__dict__\n",
    "        }\n",
    "        checkpoint_path = os.path.join(Config.MODELS_DIR, f'checkpoint_epoch_{epoch}.pt')\n",
    "        torch.save(checkpoint, checkpoint_path)\n",
    "        if is_best:\n",
    "            best_path = os.path.join(Config.MODELS_DIR, 'best_model.pt')\n",
    "            torch.save(checkpoint, best_path)\n",
    "            print(f\"Saved best model with validation loss: {self.best_val_loss:.4f}\")\n",
    "    def train(self):\n",
    "        print(\"Starting training...\")\n",
    "        print(f\"Training for {Config.EPOCHS} epochs\")\n",
    "        print(f\"Learning rate: {self.optimizer.param_groups[0]['lr']}\")\n",
    "        print(f\"Batch size: {Config.BATCH_SIZE}\")\n",
    "        for epoch in range(Config.EPOCHS):\n",
    "            train_loss = self.train_epoch(epoch)\n",
    "            val_loss = self.validate_epoch(epoch)\n",
    "            self.scheduler.step()\n",
    "            is_best = val_loss < self.best_val_loss\n",
    "            if is_best:\n",
    "                self.best_val_loss = val_loss\n",
    "            if (epoch + 1) % 5 == 0 or is_best:\n",
    "                self.save_checkpoint(epoch, is_best)\n",
    "            print(f'Epoch {epoch+1}/{Config.EPOCHS}:')\n",
    "            print(f'  Train Loss: {train_loss:.4f}')\n",
    "            print(f'  Val Loss: {val_loss:.4f}')\n",
    "            print(f'  Learning Rate: {self.scheduler.get_last_lr()[0]:.6f}')\n",
    "            print()\n",
    "        self.save_checkpoint(Config.EPOCHS - 1, False)\n",
    "        self.writer.close()\n",
    "        print(\"Training completed!\")\n",
    "        return self.model\n",
    "    def plot_training_history(self):\n",
    "        plt.figure(figsize=(12, 4))\n",
    "        plt.subplot(1, 2, 1)\n",
    "        plt.plot(self.train_losses, label='Train Loss')\n",
    "        plt.plot(self.val_losses, label='Val Loss')\n",
    "        plt.title('Training History')\n",
    "        plt.xlabel('Epoch')\n",
    "        plt.ylabel('Loss')\n",
    "        plt.legend()\n",
    "        plt.grid(True)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(os.path.join(Config.OUTPUT_DIR, 'training_history.png'))\n",
    "        plt.show()\n",
    "\n",
    "def main():\n",
    "    print(\"=== Section 2: Model Selection and Training ===\")\n",
    "    train_loader, val_loader = create_data_loaders()\n",
    "    if train_loader is None or val_loader is None:\n",
    "        print(\"Failed to load data. Please check data preparation.\")\n",
    "        return\n",
    "    model = FaceRecognitionModel(num_classes=Config.NUM_CLASSES, pretrained=Config.PRETRAINED)\n",
    "    trainer = ModelTrainer(model, train_loader, val_loader)\n",
    "    trained_model = trainer.train()\n",
    "    trainer.plot_training_history()\n",
    "    print(\"Model training completed successfully!\")\n",
    "    print(f\"Best validation loss: {trainer.best_val_loss:.4f}\")\n",
    "    print(f\"Model saved to: {Config.MODELS_DIR}\")\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     main() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fb395aa",
   "metadata": {
    "papermill": {
     "duration": 0.025662,
     "end_time": "2025-07-28T18:58:29.241470",
     "exception": false,
     "start_time": "2025-07-28T18:58:29.215808",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a2e23ed1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T18:58:29.293480Z",
     "iopub.status.busy": "2025-07-28T18:58:29.292915Z",
     "iopub.status.idle": "2025-07-28T18:58:41.452171Z",
     "shell.execute_reply": "2025-07-28T18:58:41.451325Z"
    },
    "papermill": {
     "duration": 12.186775,
     "end_time": "2025-07-28T18:58:41.453261",
     "exception": false,
     "start_time": "2025-07-28T18:58:29.266486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:29,632] A new study created in memory with name: hyperparameter_tuning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Hyperparameter Tuning: Multiple Parameters (Optuna) ===\n",
      "Testing data loading...\n",
      "Created data loaders:\n",
      "  Training: 1 batches\n",
      "  Validation: 1 batches\n",
      "Data loading test successful:\n",
      "  Training batches: 1\n",
      "  Validation batches: 1\n",
      "Created data loaders:\n",
      "  Training: 2 batches\n",
      "  Validation: 1 batches\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=MobileNet_V2_Weights.IMAGENET1K_V1`. You can also use `weights=MobileNet_V2_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n",
      "100%|██████████| 13.6M/13.6M [00:00<00:00, 169MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:31,632] Trial 0 finished with value: 0.0 and parameters: {'learning_rate': 0.00015027981040524992, 'batch_size': 8, 'weight_decay': 5.191023113897461e-06, 'scheduler_step_size': 20}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created data loaders:\n",
      "  Training: 1 batches\n",
      "  Validation: 1 batches\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:32,550] Trial 1 finished with value: 0.0 and parameters: {'learning_rate': 0.0016040964530501334, 'batch_size': 16, 'weight_decay': 1.2635270533183409e-05, 'scheduler_step_size': 6}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:32,554] Trial 2 finished with value: inf and parameters: {'learning_rate': 0.0007319705820890438, 'batch_size': 32, 'weight_decay': 9.247244663168299e-06, 'scheduler_step_size': 15}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created data loaders:\n",
      "  Training: 0 batches\n",
      "  Validation: 1 batches\n",
      "[ERROR] Training loader is empty. Skipping trial.\n",
      "Created data loaders:\n",
      "  Training: 1 batches\n",
      "  Validation: 1 batches\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:33,432] Trial 3 finished with value: 0.0 and parameters: {'learning_rate': 3.342177014419329e-05, 'batch_size': 16, 'weight_decay': 0.00035928717965781436, 'scheduler_step_size': 8}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n",
      "Created data loaders:\n",
      "  Training: 1 batches\n",
      "  Validation: 1 batches\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:34,309] Trial 4 finished with value: 0.0 and parameters: {'learning_rate': 0.00014551447888164516, 'batch_size': 16, 'weight_decay': 4.719138081418132e-06, 'scheduler_step_size': 5}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n",
      "Created data loaders:\n",
      "  Training: 2 batches\n",
      "  Validation: 1 batches\n",
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:35,173] Trial 5 finished with value: 0.0 and parameters: {'learning_rate': 4.4599508109038816e-05, 'batch_size': 8, 'weight_decay': 5.717632178411776e-05, 'scheduler_step_size': 20}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created data loaders:\n",
      "  Training: 1 batches\n",
      "  Validation: 1 batches\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:36,101] Trial 6 finished with value: 0.0 and parameters: {'learning_rate': 0.0003575706168844607, 'batch_size': 16, 'weight_decay': 3.1413660464841708e-06, 'scheduler_step_size': 9}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n",
      "Created data loaders:\n",
      "  Training: 1 batches\n",
      "  Validation: 1 batches\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:37,060] Trial 7 finished with value: 0.0 and parameters: {'learning_rate': 0.005058661498226539, 'batch_size': 16, 'weight_decay': 1.4606910930269569e-05, 'scheduler_step_size': 10}. Best is trial 0 with value: 0.0.\n",
      "[I 2025-07-28 18:58:37,064] Trial 8 finished with value: inf and parameters: {'learning_rate': 8.687197718481607e-05, 'batch_size': 32, 'weight_decay': 2.1993961133714796e-05, 'scheduler_step_size': 5}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n",
      "Created data loaders:\n",
      "  Training: 0 batches\n",
      "  Validation: 1 batches\n",
      "[ERROR] Training loader is empty. Skipping trial.\n",
      "Created data loaders:\n",
      "  Training: 2 batches\n",
      "  Validation: 1 batches\n",
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:37,958] Trial 9 finished with value: 0.0 and parameters: {'learning_rate': 3.5324822801729476e-05, 'batch_size': 8, 'weight_decay': 4.630798306187808e-06, 'scheduler_step_size': 11}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created data loaders:\n",
      "  Training: 2 batches\n",
      "  Validation: 1 batches\n",
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:38,898] Trial 10 finished with value: 0.0 and parameters: {'learning_rate': 1.599103293777878e-05, 'batch_size': 8, 'weight_decay': 9.582866532518808e-05, 'scheduler_step_size': 19}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created data loaders:\n",
      "  Training: 2 batches\n",
      "  Validation: 1 batches\n",
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:39,686] Trial 11 finished with value: 0.0 and parameters: {'learning_rate': 0.0017144736482139513, 'batch_size': 8, 'weight_decay': 1.071810481435299e-06, 'scheduler_step_size': 15}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created data loaders:\n",
      "  Training: 1 batches\n",
      "  Validation: 1 batches\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:40,585] Trial 12 finished with value: 0.0 and parameters: {'learning_rate': 0.007067139513464974, 'batch_size': 16, 'weight_decay': 1.348424085752815e-06, 'scheduler_step_size': 15}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n",
      "Created data loaders:\n",
      "  Training: 2 batches\n",
      "  Validation: 1 batches\n",
      "[INFO] Using default hyperparameters\n",
      "Model initialized on device: cuda\n",
      "Total parameters: 2,225,153\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-28 18:58:41,429] Trial 13 finished with value: 0.0 and parameters: {'learning_rate': 0.001454714107662922, 'batch_size': 8, 'weight_decay': 5.116682938380793e-05, 'scheduler_step_size': 17}. Best is trial 0 with value: 0.0.\n",
      "[I 2025-07-28 18:58:41,447] Trial 14 finished with value: inf and parameters: {'learning_rate': 0.00041663446838314963, 'batch_size': 32, 'weight_decay': 0.00018095538034875998, 'scheduler_step_size': 13}. Best is trial 0 with value: 0.0.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created data loaders:\n",
      "  Training: 0 batches\n",
      "  Validation: 1 batches\n",
      "[ERROR] Training loader is empty. Skipping trial.\n",
      "\n",
      "Best trial:\n",
      "  Value: 0.0\n",
      "  Params: {'learning_rate': 0.00015027981040524992, 'batch_size': 8, 'weight_decay': 5.191023113897461e-06, 'scheduler_step_size': 20}\n",
      "Best hyperparameters saved to ./output/best_hyperparameters.json\n",
      "Best learning rate saved to ./output/best_learning_rate.txt\n",
      "\n",
      "Hyperparameter Tuning Summary:\n",
      "  Best Learning Rate: 0.000150\n",
      "  Best Batch Size: 8\n",
      "  Best Weight Decay: 0.000005\n",
      "  Best Scheduler Step Size: 20\n",
      "  Best Validation Loss: 0.0000\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Hyperparameter Tuning Script for Facial Detection System\n",
    "Uses Optuna to tune multiple important hyperparameters\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import optuna\n",
    "import torch\n",
    "# from config import Config\n",
    "# from data_loader_utils import create_data_loaders\n",
    "# from model_training import FaceRecognitionModel, ModelTrainer\n",
    "\n",
    "def objective(trial):\n",
    "    # Suggest multiple hyperparameters (using updated Optuna methods)\n",
    "    learning_rate = trial.suggest_float('learning_rate', 1e-5, 1e-2, log=True)\n",
    "    batch_size = trial.suggest_categorical('batch_size', [8, 16, 32])\n",
    "    weight_decay = trial.suggest_float('weight_decay', 1e-6, 1e-3, log=True)\n",
    "    scheduler_step_size = trial.suggest_int('scheduler_step_size', 5, 20)\n",
    "    \n",
    "    # Load data loaders with custom batch size\n",
    "    train_loader, val_loader = create_data_loaders(batch_size=batch_size)\n",
    "    \n",
    "    # Check if data loaders are empty\n",
    "    if len(train_loader) == 0:\n",
    "        print(f\"[ERROR] Training loader is empty. Skipping trial.\")\n",
    "        return float('inf')  # Return worst possible value\n",
    "    \n",
    "    if len(val_loader) == 0:\n",
    "        print(f\"[ERROR] Validation loader is empty. Skipping trial.\")\n",
    "        return float('inf')\n",
    "    \n",
    "    # Use a smaller number of batches for tuning\n",
    "    train_loader_iter = iter(train_loader)\n",
    "    val_loader_iter = iter(val_loader)\n",
    "    \n",
    "    # Create small loaders with proper batch format\n",
    "    small_train_batches = []\n",
    "    small_val_batches = []\n",
    "    \n",
    "    # Get a few batches from training\n",
    "    for _ in range(min(3, len(train_loader))):\n",
    "        try:\n",
    "            batch = next(train_loader_iter)\n",
    "            small_train_batches.append(batch)\n",
    "        except StopIteration:\n",
    "            break\n",
    "    \n",
    "    # Get a few batches from validation\n",
    "    for _ in range(min(2, len(val_loader))):\n",
    "        try:\n",
    "            batch = next(val_loader_iter)\n",
    "            small_val_batches.append(batch)\n",
    "        except StopIteration:\n",
    "            break\n",
    "    \n",
    "    # Initialize model\n",
    "    model = FaceRecognitionModel(num_classes=Config.NUM_CLASSES, pretrained=Config.PRETRAINED)\n",
    "    \n",
    "    # Trainer with custom hyperparameters\n",
    "    trainer = ModelTrainer(model, train_loader, val_loader)\n",
    "    trainer.optimizer = torch.optim.AdamW(\n",
    "        model.parameters(),\n",
    "        lr=learning_rate,\n",
    "        weight_decay=weight_decay\n",
    "    )\n",
    "    trainer.scheduler = torch.optim.lr_scheduler.StepLR(\n",
    "        trainer.optimizer,\n",
    "        step_size=scheduler_step_size,\n",
    "        gamma=Config.SCHEDULER_GAMMA\n",
    "    )\n",
    "    \n",
    "    # Train for a few epochs only\n",
    "    best_val_loss = float('inf')\n",
    "    try:\n",
    "        for epoch in range(2):\n",
    "            # Create temporary data loaders with small batches\n",
    "            class SmallDataLoader:\n",
    "                def __init__(self, batches):\n",
    "                    self.batches = batches\n",
    "                    self.length = len(batches)\n",
    "                \n",
    "                def __iter__(self):\n",
    "                    return iter(self.batches)\n",
    "                \n",
    "                def __len__(self):\n",
    "                    return self.length\n",
    "            \n",
    "            trainer.train_loader = SmallDataLoader(small_train_batches)\n",
    "            trainer.val_loader = SmallDataLoader(small_val_batches)\n",
    "            \n",
    "            train_loss = trainer.train_epoch(epoch)\n",
    "            val_loss = trainer.validate_epoch(epoch)\n",
    "            if val_loss < best_val_loss:\n",
    "                best_val_loss = val_loss\n",
    "    except Exception as e:\n",
    "        print(f\"[ERROR] Training failed: {e}\")\n",
    "        return float('inf')\n",
    "    \n",
    "    return best_val_loss\n",
    "\n",
    "def main():\n",
    "    print(\"=== Hyperparameter Tuning: Multiple Parameters (Optuna) ===\")\n",
    "    \n",
    "    # Create output directory if it doesn't exist\n",
    "    os.makedirs(Config.OUTPUT_DIR, exist_ok=True)\n",
    "    \n",
    "    # Test data loading first\n",
    "    print(\"Testing data loading...\")\n",
    "    try:\n",
    "        test_train_loader, test_val_loader = create_data_loaders(batch_size=16)\n",
    "        print(f\"Data loading test successful:\")\n",
    "        print(f\"  Training batches: {len(test_train_loader)}\")\n",
    "        print(f\"  Validation batches: {len(test_val_loader)}\")\n",
    "        \n",
    "        if len(test_train_loader) == 0:\n",
    "            print(\"[ERROR] No training data found. Please check your dataset.\")\n",
    "            return\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(f\"[ERROR] Data loading failed: {e}\")\n",
    "        return\n",
    "    \n",
    "    study = optuna.create_study(direction=\"minimize\", study_name=\"hyperparameter_tuning\")\n",
    "    study.optimize(objective, n_trials=15)  # Increased trials for multiple parameters\n",
    "    \n",
    "    print(\"\\nBest trial:\")\n",
    "    trial = study.best_trial\n",
    "    print(f\"  Value: {trial.value}\")\n",
    "    print(f\"  Params: {trial.params}\")\n",
    "    \n",
    "    # Save best hyperparameters to file\n",
    "    best_params_path = os.path.join(Config.OUTPUT_DIR, \"best_hyperparameters.json\")\n",
    "    import json\n",
    "    with open(best_params_path, \"w\") as f:\n",
    "        json.dump(trial.params, f, indent=2)\n",
    "    \n",
    "    # Also save individual parameters for backward compatibility\n",
    "    best_lr_path = os.path.join(Config.OUTPUT_DIR, \"best_learning_rate.txt\")\n",
    "    with open(best_lr_path, \"w\") as f:\n",
    "        f.write(str(trial.params['learning_rate']))\n",
    "    \n",
    "    print(f\"Best hyperparameters saved to {best_params_path}\")\n",
    "    print(f\"Best learning rate saved to {best_lr_path}\")\n",
    "    \n",
    "    # Print summary\n",
    "    print(\"\\nHyperparameter Tuning Summary:\")\n",
    "    print(f\"  Best Learning Rate: {trial.params['learning_rate']:.6f}\")\n",
    "    print(f\"  Best Batch Size: {trial.params['batch_size']}\")\n",
    "    print(f\"  Best Weight Decay: {trial.params['weight_decay']:.6f}\")\n",
    "    print(f\"  Best Scheduler Step Size: {trial.params['scheduler_step_size']}\")\n",
    "    print(f\"  Best Validation Loss: {trial.value:.4f}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7959389,
     "sourceId": 12603149,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 252986254,
     "sourceType": "kernelVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 125.270725,
   "end_time": "2025-07-28T18:58:44.249176",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-28T18:56:38.978451",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
