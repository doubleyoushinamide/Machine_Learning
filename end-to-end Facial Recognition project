{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "48b28c32",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T14:43:57.480859Z",
     "iopub.status.busy": "2025-07-30T14:43:57.480622Z",
     "iopub.status.idle": "2025-07-30T14:45:11.444984Z",
     "shell.execute_reply": "2025-07-30T14:45:11.444240Z"
    },
    "papermill": {
     "duration": 73.969094,
     "end_time": "2025-07-30T14:45:11.446513",
     "exception": false,
     "start_time": "2025-07-30T14:43:57.477419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m96.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m83.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m42.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m10.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m8.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m83.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d92541e",
   "metadata": {
    "papermill": {
     "duration": 0.020738,
     "end_time": "2025-07-30T14:45:11.489758",
     "exception": false,
     "start_time": "2025-07-30T14:45:11.469020",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8d3dd44f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:45:11.530981Z",
     "iopub.status.busy": "2025-07-30T14:45:11.530730Z",
     "iopub.status.idle": "2025-07-30T14:45:11.543560Z",
     "shell.execute_reply": "2025-07-30T14:45:11.542832Z"
    },
    "papermill": {
     "duration": 0.035109,
     "end_time": "2025-07-30T14:45:11.544744",
     "exception": false,
     "start_time": "2025-07-30T14:45:11.509635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Face Recognition System\n",
    "Contains all the key parameters for easy tuning and customization.\n",
    "\"\"\"\n",
    "\n",
    "# Model Configuration\n",
    "MODEL_CONFIG = {\n",
    "    'model_name': 'mobilenet_v2',\n",
    "    'num_classes': 2,\n",
    "    'input_size': 224,\n",
    "    'dropout_rate': 0.5,\n",
    "    'pretrained': True\n",
    "}\n",
    "\n",
    "# Training Configuration\n",
    "TRAINING_CONFIG = {\n",
    "    'batch_size': 16,  # Optimized for 16GB GPU\n",
    "    'num_epochs': 100,\n",
    "    'early_stopping_patience': 10,\n",
    "    'learning_rate_range': (1e-5, 1e-2),  # For Optuna optimization\n",
    "    'weight_decay_range': (1e-5, 1e-2),   # For Optuna optimization\n",
    "    'optuna_trials': 10,\n",
    "    'validation_split': 0.2,\n",
    "    'random_seed': 42\n",
    "}\n",
    "\n",
    "# Data Augmentation Configuration\n",
    "AUGMENTATION_CONFIG = {\n",
    "    'train_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('HorizontalFlip', {'p': 0.5}),\n",
    "        ('VerticalFlip', {'p': 0.1}),\n",
    "        ('RandomRotate90', {'p': 0.3}),\n",
    "        ('Rotate', {'limit': 15, 'p': 0.5}),\n",
    "        ('RandomBrightnessContrast', {'brightness_limit': 0.2, 'contrast_limit': 0.2, 'p': 0.5}),\n",
    "        ('HueSaturationValue', {'hue_shift_limit': 20, 'sat_shift_limit': 30, 'val_shift_limit': 20, 'p': 0.5}),\n",
    "        ('GaussNoise', {'var_limit': (10.0, 50.0), 'p': 0.3}),\n",
    "        ('GaussianBlur', {'blur_limit': (3, 7), 'p': 0.2}),\n",
    "        ('ElasticTransform', {'alpha': 1, 'sigma': 50, 'alpha_affine': 50, 'p': 0.2}),\n",
    "        ('GridDistortion', {'num_steps': 5, 'distort_limit': 0.3, 'p': 0.2}),\n",
    "        ('OpticalDistortion', {'distort_limit': 0.2, 'shift_limit': 0.15, 'p': 0.2}),\n",
    "        ('CoarseDropout', {'max_holes': 8, 'max_height': 32, 'max_width': 32, 'p': 0.3}),\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ],\n",
    "    'val_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ]\n",
    "}\n",
    "\n",
    "# Inference Configuration\n",
    "INFERENCE_CONFIG = {\n",
    "    'confidence_threshold': 0.9,  # Threshold for artist detection\n",
    "    'face_detection_confidence': 0.9,  # MTCNN confidence threshold\n",
    "    'min_face_size': 20,  # Minimum face size for detection\n",
    "    'scale_factor': 0.709,  # MTCNN scale factor\n",
    "    'video_frame_skip': 3,  # Process every Nth frame for efficiency\n",
    "}\n",
    "\n",
    "# Data Paths\n",
    "DATA_PATHS = {\n",
    "    'kaggle_artist_path': '/kaggle/input/input-data/Davido',\n",
    "    'kaggle_others_path': '/kaggle/input/input-data/Unknown',\n",
    "    'model_save_path': 'artist_model_best.pth',\n",
    "    'final_model_path': 'artist_model_final.pth',\n",
    "    'training_curves_path': 'training_curves.png'\n",
    "}\n",
    "\n",
    "# Device Configuration\n",
    "DEVICE_CONFIG = {\n",
    "    'use_gpu': True,\n",
    "    'num_workers': 2,  # For data loading\n",
    "    'pin_memory': True,\n",
    "}\n",
    "\n",
    "# Video Processing Configuration\n",
    "VIDEO_CONFIG = {\n",
    "    'output_fps': 30,\n",
    "    'output_codec': 'mp4v',\n",
    "    'draw_boxes': True,\n",
    "    'show_probabilities': True,\n",
    "    'box_thickness': 2,\n",
    "    'text_scale': 0.5,\n",
    "    'text_thickness': 2,\n",
    "}\n",
    "\n",
    "# Colors for visualization\n",
    "COLORS = {\n",
    "    'artist_face': (0, 255, 0),    # Green for artist\n",
    "    'other_face': (0, 0, 255),     # Red for others\n",
    "    'text_color': (255, 255, 255), # White text\n",
    "}\n",
    "\n",
    "# Logging Configuration\n",
    "LOGGING_CONFIG = {\n",
    "    'log_level': 'INFO',\n",
    "    'log_format': '%(asctime)s - %(levelname)s - %(message)s',\n",
    "    'save_logs': True,\n",
    "    'log_file': 'face_recognition.log'\n",
    "}\n",
    "\n",
    "# Performance Configuration\n",
    "PERFORMANCE_CONFIG = {\n",
    "    'enable_mixed_precision': True,  # Use mixed precision training if available\n",
    "    'gradient_clipping': 1.0,       # Gradient clipping value\n",
    "    'accumulation_steps': 1,        # Gradient accumulation steps\n",
    "    'memory_efficient': True,       # Enable memory optimizations\n",
    "}\n",
    "\n",
    "def get_config():\n",
    "    \"\"\"Return the complete configuration dictionary\"\"\"\n",
    "    return {\n",
    "        'model': MODEL_CONFIG,\n",
    "        'training': TRAINING_CONFIG,\n",
    "        'augmentation': AUGMENTATION_CONFIG,\n",
    "        'inference': INFERENCE_CONFIG,\n",
    "        'data_paths': DATA_PATHS,\n",
    "        'device': DEVICE_CONFIG,\n",
    "        'video': VIDEO_CONFIG,\n",
    "        'colors': COLORS,\n",
    "        'logging': LOGGING_CONFIG,\n",
    "        'performance': PERFORMANCE_CONFIG,\n",
    "    }\n",
    "\n",
    "def update_config(config_name, key, value):\n",
    "    \"\"\"Update a specific configuration value\"\"\"\n",
    "    config = get_config()\n",
    "    if config_name in config and key in config[config_name]:\n",
    "        config[config_name][key] = value\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "def print_config():\n",
    "    \"\"\"Print the current configuration\"\"\"\n",
    "    config = get_config()\n",
    "    print(\"Face Recognition System Configuration:\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    for section_name, section_config in config.items():\n",
    "        print(f\"\\n{section_name.upper()}:\")\n",
    "        for key, value in section_config.items():\n",
    "            print(f\"  {key}: {value}\")\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     print_config() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a553467f",
   "metadata": {
    "papermill": {
     "duration": 0.019437,
     "end_time": "2025-07-30T14:45:11.583768",
     "exception": false,
     "start_time": "2025-07-30T14:45:11.564331",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main Files\n",
    "- preprocessing\n",
    "- hyperparameter tuning (`lr` and `wd`)\n",
    "- finetuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a4f902c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:45:11.624704Z",
     "iopub.status.busy": "2025-07-30T14:45:11.624245Z",
     "iopub.status.idle": "2025-07-30T14:48:07.297244Z",
     "shell.execute_reply": "2025-07-30T14:48:07.296357Z"
    },
    "papermill": {
     "duration": 175.69529,
     "end_time": "2025-07-30T14:48:07.298454",
     "exception": false,
     "start_time": "2025-07-30T14:45:11.603164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-30 14:45:23,213] A new study created in memory with name: no-name-89fbc47a-80ba-40dc-a6ef-a1523415b118\n",
      "Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Starting Face Recognition System Training...\n",
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n",
      "Training samples: 64\n",
      "Validation samples: 16\n",
      "Starting hyperparameter optimization...\n",
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13.6M/13.6M [00:00<00:00, 154MB/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  2.41it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  1.47it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.30it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.72it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.27it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.54it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.63it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.10it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.56it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.08it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.45it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.62it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "[I 2025-07-30 14:45:38,387] Trial 0 finished with value: 0.6654493808746338 and parameters: {'lr': 2.969789516338821e-05, 'weight_decay': 2.1753651118956932e-05}. Best is trial 0 with value: 0.6654493808746338.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.93it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.38it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.59it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.03it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.00it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.90it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.96it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.36it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.58it/s]\n",
      "[I 2025-07-30 14:45:49,575] Trial 1 finished with value: 0.6791266202926636 and parameters: {'lr': 0.0015863238867169303, 'weight_decay': 0.002751944768062627}. Best is trial 0 with value: 0.6654493808746338.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.28it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.45it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.75it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.43it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.91it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.12it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.87it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.81it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.61it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.29it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.85it/s]\n",
      "[I 2025-07-30 14:46:02,886] Trial 2 finished with value: 0.6756019592285156 and parameters: {'lr': 1.8565261212910178e-05, 'weight_decay': 0.0007981718458058434}. Best is trial 0 with value: 0.6654493808746338.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.08it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.01it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.28it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.52it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.42it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.59it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.40it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.96it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.19it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.59it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.45it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.13it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "[I 2025-07-30 14:46:16,338] Trial 3 finished with value: 0.5168648362159729 and parameters: {'lr': 0.0004807350723184072, 'weight_decay': 0.0008448699033989283}. Best is trial 3 with value: 0.5168648362159729.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.51it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.59it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.44it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.98it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.77it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.57it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.56it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.98it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.61it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.97it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.04it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.59it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.21it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.59it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.59it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "[I 2025-07-30 14:46:30,780] Trial 4 finished with value: 0.6793806552886963 and parameters: {'lr': 1.30712798739732e-05, 'weight_decay': 0.003863179388500471}. Best is trial 3 with value: 0.5168648362159729.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.88it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.88it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.53it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.33it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.91it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.29it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.88it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.27it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.80it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.74it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.31it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.06it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.71it/s]\n",
      "[I 2025-07-30 14:46:44,298] Trial 5 finished with value: 0.6640811562538147 and parameters: {'lr': 1.8320040209145096e-05, 'weight_decay': 0.0005427149338916857}. Best is trial 3 with value: 0.5168648362159729.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.26it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.67it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.93it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.44it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.60it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.86it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.46it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.41it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.71it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.28it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.61it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "[I 2025-07-30 14:46:57,382] Trial 6 finished with value: 0.6506690382957458 and parameters: {'lr': 8.574422820931174e-05, 'weight_decay': 0.0056091430184974}. Best is trial 3 with value: 0.5168648362159729.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.41it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.15it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.89it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.97it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.90it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.22it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.93it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.92it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.43it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.87it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.01it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.56it/s]\n",
      "[I 2025-07-30 14:47:09,491] Trial 7 finished with value: 0.574590265750885 and parameters: {'lr': 0.0007278131538611517, 'weight_decay': 5.7997999410809665e-05}. Best is trial 3 with value: 0.5168648362159729.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.59it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.43it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.56it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.39it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.46it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.56it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.25it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.22it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.37it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.58it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.15it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "[I 2025-07-30 14:47:22,567] Trial 8 finished with value: 0.46345970034599304 and parameters: {'lr': 0.00020200502419598075, 'weight_decay': 9.754574253424835e-05}. Best is trial 8 with value: 0.46345970034599304.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.46it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.52it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.88it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.16it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.35it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.17it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.82it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.87it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.10it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.51it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.31it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.60it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.07it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.75it/s]\n",
      "[I 2025-07-30 14:47:34,649] Trial 9 finished with value: 0.5514668822288513 and parameters: {'lr': 0.0009744256033882685, 'weight_decay': 0.0015483755476082487}. Best is trial 8 with value: 0.46345970034599304.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best hyperparameters: {'lr': 0.00020200502419598075, 'weight_decay': 9.754574253424835e-05}\n",
      "Training with best hyperparameters...\n",
      "\n",
      "Epoch 1/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.98it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6970, Train Acc: 46.88%\n",
      "Val Loss: 0.6654, Val Acc: 62.50%\n",
      "\n",
      "Epoch 2/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.17it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6534, Train Acc: 60.94%\n",
      "Val Loss: 0.6480, Val Acc: 62.50%\n",
      "\n",
      "Epoch 3/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.96it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.75it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6506, Train Acc: 64.06%\n",
      "Val Loss: 0.6358, Val Acc: 62.50%\n",
      "\n",
      "Epoch 4/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.57it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.75it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6047, Train Acc: 64.06%\n",
      "Val Loss: 0.6218, Val Acc: 62.50%\n",
      "\n",
      "Epoch 5/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6311, Train Acc: 60.94%\n",
      "Val Loss: 0.6081, Val Acc: 62.50%\n",
      "\n",
      "Epoch 6/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.93it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5735, Train Acc: 65.62%\n",
      "Val Loss: 0.5918, Val Acc: 62.50%\n",
      "\n",
      "Epoch 7/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.58it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.87it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5580, Train Acc: 64.06%\n",
      "Val Loss: 0.5972, Val Acc: 62.50%\n",
      "\n",
      "Epoch 8/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.95it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4811, Train Acc: 78.12%\n",
      "Val Loss: 0.6997, Val Acc: 62.50%\n",
      "\n",
      "Epoch 9/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.30it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4897, Train Acc: 70.31%\n",
      "Val Loss: 0.7539, Val Acc: 62.50%\n",
      "\n",
      "Epoch 10/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.66it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4342, Train Acc: 78.12%\n",
      "Val Loss: 0.5987, Val Acc: 62.50%\n",
      "\n",
      "Epoch 11/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.89it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.91it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.3993, Train Acc: 84.38%\n",
      "Val Loss: 0.5042, Val Acc: 62.50%\n",
      "\n",
      "Epoch 12/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.76it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.3568, Train Acc: 89.06%\n",
      "Val Loss: 0.4777, Val Acc: 75.00%\n",
      "\n",
      "Epoch 13/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.07it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.3413, Train Acc: 85.94%\n",
      "Val Loss: 0.4695, Val Acc: 75.00%\n",
      "\n",
      "Epoch 14/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.02it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.90it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2551, Train Acc: 90.62%\n",
      "Val Loss: 0.4726, Val Acc: 75.00%\n",
      "\n",
      "Epoch 15/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.88it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2259, Train Acc: 92.19%\n",
      "Val Loss: 0.4967, Val Acc: 81.25%\n",
      "\n",
      "Epoch 16/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.33it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.85it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.1761, Train Acc: 93.75%\n",
      "Val Loss: 0.5888, Val Acc: 68.75%\n",
      "\n",
      "Epoch 17/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.27it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.92it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2256, Train Acc: 89.06%\n",
      "Val Loss: 0.6574, Val Acc: 68.75%\n",
      "\n",
      "Epoch 18/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.83it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.94it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.1948, Train Acc: 89.06%\n",
      "Val Loss: 0.6426, Val Acc: 68.75%\n",
      "\n",
      "Epoch 19/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.01it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.95it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2662, Train Acc: 89.06%\n",
      "Val Loss: 0.6155, Val Acc: 81.25%\n",
      "\n",
      "Epoch 20/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.16it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.87it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2042, Train Acc: 87.50%\n",
      "Val Loss: 0.8216, Val Acc: 68.75%\n",
      "\n",
      "Epoch 21/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.86it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.93it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2323, Train Acc: 89.06%\n",
      "Val Loss: 0.6307, Val Acc: 68.75%\n",
      "\n",
      "Epoch 22/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.41it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.95it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2738, Train Acc: 85.94%\n",
      "Val Loss: 0.5907, Val Acc: 81.25%\n",
      "\n",
      "Epoch 23/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.37it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.91it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.0996, Train Acc: 96.88%\n",
      "Val Loss: 0.6374, Val Acc: 81.25%\n",
      "Early stopping triggered!\n",
      "Model saved successfully!\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training completed successfully!\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Face Recognition System - Kaggle Training Script\n",
    "This script is designed to run on Kaggle notebook with P100 GPU (16GB) and 32GB RAM.\n",
    "It fine-tunes an efficient face recognition model to identify a specific artist.\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms, models\n",
    "import albumentations as A\n",
    "from albumentations.pytorch import ToTensorV2\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tqdm import tqdm\n",
    "import warnings\n",
    "# from config import get_config\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set device\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "class ArtistDataset(Dataset):\n",
    "    \"\"\"Custom dataset for artist face recognition\"\"\"\n",
    "    \n",
    "    def __init__(self, image_paths, labels, transform=None):\n",
    "        self.image_paths = image_paths\n",
    "        self.labels = labels\n",
    "        self.transform = transform\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.image_paths)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        image_path = self.image_paths[idx]\n",
    "        label = self.labels[idx]\n",
    "        \n",
    "        # Load image\n",
    "        image = Image.open(image_path).convert('RGB')\n",
    "        image = np.array(image)\n",
    "        \n",
    "        if self.transform:\n",
    "            image = self.transform(image=image)['image']\n",
    "        \n",
    "        return image, label\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"Load and prepare dataset\"\"\"\n",
    "    print(\"Loading dataset...\")\n",
    "    \n",
    "    # Get configuration\n",
    "    config = get_config()\n",
    "    artist_path = config['data_paths']['kaggle_artist_path']\n",
    "    others_path = config['data_paths']['kaggle_others_path']\n",
    "    \n",
    "    print(f\"Looking for artist images in: {artist_path}\")\n",
    "    print(f\"Looking for others images in: {others_path}\")\n",
    "    \n",
    "    # Collect artist images (label 1)\n",
    "    artist_images = []\n",
    "    if os.path.exists(artist_path):\n",
    "        for filename in os.listdir(artist_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                artist_images.append(os.path.join(artist_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Artist path does not exist: {artist_path}\")\n",
    "    \n",
    "    # Collect others images (label 0)\n",
    "    others_images = []\n",
    "    if os.path.exists(others_path):\n",
    "        for filename in os.listdir(others_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                others_images.append(os.path.join(others_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Others path does not exist: {others_path}\")\n",
    "    \n",
    "    print(f\"Found {len(artist_images)} artist images\")\n",
    "    print(f\"Found {len(others_images)} others images\")\n",
    "    \n",
    "    # Create labels\n",
    "    artist_labels = [1] * len(artist_images)\n",
    "    others_labels = [0] * len(others_images)\n",
    "    \n",
    "    # Combine data\n",
    "    all_images = artist_images + others_images\n",
    "    all_labels = artist_labels + others_labels\n",
    "    \n",
    "    return all_images, all_labels\n",
    "\n",
    "def create_transforms():\n",
    "    \"\"\"Create heavy data augmentation transforms\"\"\"\n",
    "    \n",
    "    # Training transforms with heavy augmentation\n",
    "    train_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.HorizontalFlip(p=0.5),\n",
    "        A.VerticalFlip(p=0.1),\n",
    "        A.RandomRotate90(p=0.3),\n",
    "        A.Rotate(limit=15, p=0.5),\n",
    "        A.RandomBrightnessContrast(brightness_limit=0.2, contrast_limit=0.2, p=0.5),\n",
    "        A.HueSaturationValue(hue_shift_limit=20, sat_shift_limit=30, val_shift_limit=20, p=0.5),\n",
    "        A.GaussNoise(var_limit=(10.0, 50.0), p=0.3),\n",
    "        A.GaussianBlur(blur_limit=(3, 7), p=0.2),\n",
    "        A.ElasticTransform(alpha=1, sigma=50, alpha_affine=50, p=0.2),\n",
    "        A.GridDistortion(num_steps=5, distort_limit=0.3, p=0.2),\n",
    "        A.OpticalDistortion(distort_limit=0.2, shift_limit=0.15, p=0.2),\n",
    "        A.CoarseDropout(max_holes=8, max_height=32, max_width=32, p=0.3),\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    # Validation transforms (minimal augmentation)\n",
    "    val_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    return train_transform, val_transform\n",
    "\n",
    "class EfficientFaceModel(nn.Module):\n",
    "    \"\"\"Efficient face recognition model based on MobileNetV2\"\"\"\n",
    "    \n",
    "    def __init__(self, num_classes=2, dropout_rate=0.5):\n",
    "        super(EfficientFaceModel, self).__init__()\n",
    "        \n",
    "        # Load pre-trained MobileNetV2\n",
    "        self.backbone = models.mobilenet_v2(pretrained=True)\n",
    "        \n",
    "        # Remove the last classifier layer\n",
    "        self.backbone.classifier = nn.Identity()\n",
    "        \n",
    "        # Add custom classifier for binary classification\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(1280, 512),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(512, 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(128, num_classes)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        features = self.backbone.features(x)\n",
    "        features = features.mean([2, 3])  # Global average pooling\n",
    "        output = self.classifier(features)\n",
    "        return output\n",
    "\n",
    "def train_epoch(model, dataloader, criterion, optimizer, device):\n",
    "    \"\"\"Train for one epoch\"\"\"\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Training\")):\n",
    "        data, target = data.to(device), target.to(device)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        output = model(data)\n",
    "        loss = criterion(output, target)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        _, predicted = output.max(1)\n",
    "        total += target.size(0)\n",
    "        correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def validate_epoch(model, dataloader, criterion, device):\n",
    "    \"\"\"Validate for one epoch\"\"\"\n",
    "    model.eval()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Validation\")):\n",
    "            data, target = data.to(device), target.to(device)\n",
    "            output = model(data)\n",
    "            loss = criterion(output, target)\n",
    "            \n",
    "            running_loss += loss.item()\n",
    "            _, predicted = output.max(1)\n",
    "            total += target.size(0)\n",
    "            correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def objective(trial):\n",
    "    \"\"\"Optuna objective function for hyperparameter optimization\"\"\"\n",
    "    \n",
    "    # Hyperparameters to optimize\n",
    "    lr = trial.suggest_float('lr', 1e-5, 1e-2, log=True)\n",
    "    weight_decay = trial.suggest_float('weight_decay', 1e-5, 1e-2, log=True)\n",
    "    \n",
    "    # Load data\n",
    "    all_images, all_labels = load_data()\n",
    "    \n",
    "    # Split data\n",
    "    train_images, val_images, train_labels, val_labels = train_test_split(\n",
    "        all_images, all_labels, test_size=0.2, random_state=42, stratify=all_labels\n",
    "    )\n",
    "    \n",
    "    # Create transforms\n",
    "    train_transform, val_transform = create_transforms()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = ArtistDataset(train_images, train_labels, train_transform)\n",
    "    val_dataset = ArtistDataset(val_images, val_labels, val_transform)\n",
    "    \n",
    "    # Create dataloaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, num_workers=2)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False, num_workers=2)\n",
    "    \n",
    "    # Initialize model\n",
    "    model = EfficientFaceModel().to(device)\n",
    "    \n",
    "    # Loss and optimizer\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=lr, weight_decay=weight_decay)\n",
    "    \n",
    "    # Training loop (shorter for hyperparameter tuning)\n",
    "    best_val_loss = float('inf')\n",
    "    patience = 5\n",
    "    patience_counter = 0\n",
    "    \n",
    "    for epoch in range(10):  # Shorter training for hyperparameter tuning\n",
    "        train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n",
    "        val_loss, val_acc = validate_epoch(model, val_loader, criterion, device)\n",
    "        \n",
    "        # Early stopping\n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            patience_counter = 0\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            break\n",
    "    \n",
    "    return best_val_loss\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main training function\"\"\"\n",
    "    print(\"Starting Face Recognition System Training...\")\n",
    "    \n",
    "    # Load data\n",
    "    all_images, all_labels = load_data()\n",
    "    \n",
    "    if len(all_images) == 0:\n",
    "        print(\"No images found! Please check the data paths.\")\n",
    "        return\n",
    "    \n",
    "    # Split data\n",
    "    train_images, val_images, train_labels, val_labels = train_test_split(\n",
    "        all_images, all_labels, test_size=0.2, random_state=42, stratify=all_labels\n",
    "    )\n",
    "    \n",
    "    print(f\"Training samples: {len(train_images)}\")\n",
    "    print(f\"Validation samples: {len(val_images)}\")\n",
    "    \n",
    "    # Create transforms\n",
    "    train_transform, val_transform = create_transforms()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = ArtistDataset(train_images, train_labels, train_transform)\n",
    "    val_dataset = ArtistDataset(val_images, val_labels, val_transform)\n",
    "    \n",
    "    # Create dataloaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, num_workers=2)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False, num_workers=2)\n",
    "    \n",
    "    # Hyperparameter optimization with Optuna\n",
    "    print(\"Starting hyperparameter optimization...\")\n",
    "    study = optuna.create_study(direction='minimize')\n",
    "    study.optimize(objective, n_trials=10)\n",
    "    \n",
    "    best_params = study.best_params\n",
    "    print(f\"Best hyperparameters: {best_params}\")\n",
    "    \n",
    "    # Train with best hyperparameters\n",
    "    print(\"Training with best hyperparameters...\")\n",
    "    \n",
    "    # Initialize model\n",
    "    model = EfficientFaceModel().to(device)\n",
    "    \n",
    "    # Loss and optimizer with best parameters\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.AdamW(\n",
    "        model.parameters(), \n",
    "        lr=best_params['lr'], \n",
    "        weight_decay=best_params['weight_decay']\n",
    "    )\n",
    "    \n",
    "    # Training history\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "    train_accs = []\n",
    "    val_accs = []\n",
    "    \n",
    "    # Training loop\n",
    "    config = get_config()\n",
    "    num_epochs = config['training']['num_epochs']\n",
    "    best_val_loss = float('inf')\n",
    "    patience = config['training']['early_stopping_patience']\n",
    "    patience_counter = 0\n",
    "    \n",
    "    for epoch in range(num_epochs):\n",
    "        print(f\"\\nEpoch {epoch+1}/{num_epochs}\")\n",
    "        \n",
    "        train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n",
    "        val_loss, val_acc = validate_epoch(model, val_loader, criterion, device)\n",
    "        \n",
    "        train_losses.append(train_loss)\n",
    "        val_losses.append(val_loss)\n",
    "        train_accs.append(train_acc)\n",
    "        val_accs.append(val_acc)\n",
    "        \n",
    "        print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%\")\n",
    "        print(f\"Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%\")\n",
    "        \n",
    "        # Early stopping\n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            patience_counter = 0\n",
    "            # Save best model\n",
    "            config = get_config()\n",
    "            torch.save(model.state_dict(), config['data_paths']['model_save_path'])\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            print(\"Early stopping triggered!\")\n",
    "            break\n",
    "    \n",
    "    # Save final model\n",
    "    config = get_config()\n",
    "    torch.save(model.state_dict(), config['data_paths']['final_model_path'])\n",
    "    print(\"Model saved successfully!\")\n",
    "    \n",
    "    # Plot training curves\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    \n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(train_losses, label='Train Loss')\n",
    "    plt.plot(val_losses, label='Validation Loss')\n",
    "    plt.title('Training and Validation Loss')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(train_accs, label='Train Accuracy')\n",
    "    plt.plot(val_accs, label='Validation Accuracy')\n",
    "    plt.title('Training and Validation Accuracy')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Accuracy (%)')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    config = get_config()\n",
    "    plt.savefig(config['data_paths']['training_curves_path'], dpi=300, bbox_inches='tight')\n",
    "    plt.show()\n",
    "    \n",
    "    print(\"Training completed successfully!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7961995,
     "sourceId": 12605156,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 256.339927,
   "end_time": "2025-07-30T14:48:09.701397",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T14:43:53.361470",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
