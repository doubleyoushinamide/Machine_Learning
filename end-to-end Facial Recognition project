{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "91fbb34f",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T16:40:34.729303Z",
     "iopub.status.busy": "2025-07-30T16:40:34.728886Z",
     "iopub.status.idle": "2025-07-30T16:41:48.578776Z",
     "shell.execute_reply": "2025-07-30T16:41:48.577974Z"
    },
    "papermill": {
     "duration": 73.85452,
     "end_time": "2025-07-30T16:41:48.580399",
     "exception": false,
     "start_time": "2025-07-30T16:40:34.725879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m106.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m37.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m42.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m8.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m31.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m13.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m17.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b734258",
   "metadata": {
    "papermill": {
     "duration": 0.018178,
     "end_time": "2025-07-30T16:41:48.618033",
     "exception": false,
     "start_time": "2025-07-30T16:41:48.599855",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dc3dacad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T16:41:48.654207Z",
     "iopub.status.busy": "2025-07-30T16:41:48.653945Z",
     "iopub.status.idle": "2025-07-30T16:41:48.666161Z",
     "shell.execute_reply": "2025-07-30T16:41:48.665603Z"
    },
    "papermill": {
     "duration": 0.031833,
     "end_time": "2025-07-30T16:41:48.667177",
     "exception": false,
     "start_time": "2025-07-30T16:41:48.635344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Face Recognition System\n",
    "Contains all the key parameters for easy tuning and customization.\n",
    "\"\"\"\n",
    "\n",
    "# Model Configuration\n",
    "MODEL_CONFIG = {\n",
    "    'model_name': 'mobilenet_v2',\n",
    "    'num_classes': 2,\n",
    "    'input_size': 224,\n",
    "    'dropout_rate': 0.7,  # Increased dropout for stronger regularization\n",
    "    'pretrained': True,\n",
    "    'freeze_backbone': False,  # Set to True to freeze all backbone layers\n",
    "    'freeze_layers': None,     # List of layer indices to freeze (e.g., [0, 1, 2])\n",
    "    'freeze_strategy': 'none'  # Options: 'none', 'backbone', 'early_layers', 'custom'\n",
    "}\n",
    "\n",
    "# Training Configuration\n",
    "TRAINING_CONFIG = {\n",
    "    'batch_size': 8,  # Reduced for smaller dataset\n",
    "    'num_epochs': 15,  # Reduced to prevent overfitting\n",
    "    'early_stopping_patience': 5,  # More aggressive early stopping\n",
    "    'learning_rate_range': (1e-4, 1e-3),  # Narrower range for stability\n",
    "    'weight_decay_range': (1e-3, 1e-2),   # Higher weight decay for regularization\n",
    "    'optuna_trials': 5,  # Fewer trials for faster convergence\n",
    "    'validation_split': 0.3,  # More validation data\n",
    "    'random_seed': 42\n",
    "}\n",
    "\n",
    "# Data Augmentation Configuration\n",
    "AUGMENTATION_CONFIG = {\n",
    "    'train_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('HorizontalFlip', {'p': 0.5}),\n",
    "        ('Rotate', {'limit': 10, 'p': 0.3}),  # Reduced rotation\n",
    "        ('RandomBrightnessContrast', {'brightness_limit': 0.1, 'contrast_limit': 0.1, 'p': 0.3}),  # Reduced intensity\n",
    "        ('HueSaturationValue', {'hue_shift_limit': 10, 'sat_shift_limit': 15, 'val_shift_limit': 10, 'p': 0.3}),  # Reduced intensity\n",
    "        ('GaussNoise', {'var_limit': (5.0, 25.0), 'p': 0.2}),  # Reduced noise\n",
    "        ('GaussianBlur', {'blur_limit': (3, 5), 'p': 0.1}),  # Reduced blur\n",
    "        ('CoarseDropout', {'max_holes': 4, 'max_height': 16, 'max_width': 16, 'p': 0.2}),  # Reduced dropout\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ],\n",
    "    'val_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ]\n",
    "}\n",
    "\n",
    "# Inference Configuration\n",
    "INFERENCE_CONFIG = {\n",
    "    'confidence_threshold': 0.9,  # Threshold for artist detection\n",
    "    'face_detection_confidence': 0.9,  # MTCNN confidence threshold\n",
    "    'min_face_size': 20,  # Minimum face size for detection\n",
    "    'scale_factor': 0.709,  # MTCNN scale factor\n",
    "    'video_frame_skip': 3,  # Process every Nth frame for efficiency\n",
    "}\n",
    "\n",
    "# Data Paths\n",
    "DATA_PATHS = {\n",
    "    'kaggle_artist_path': '/kaggle/input/input-data/Davido',\n",
    "    'kaggle_others_path': '/kaggle/input/input-data/Unknown',\n",
    "    'model_save_path': 'artist_model_best.pth',\n",
    "    'final_model_path': 'artist_model_final.pth',\n",
    "    'training_curves_path': 'training_curves.png'\n",
    "}\n",
    "\n",
    "# Device Configuration\n",
    "DEVICE_CONFIG = {\n",
    "    'use_gpu': True,\n",
    "    'num_workers': 2,  # For data loading\n",
    "    'pin_memory': True,\n",
    "}\n",
    "\n",
    "# Video Processing Configuration\n",
    "VIDEO_CONFIG = {\n",
    "    'output_fps': 30,\n",
    "    'output_codec': 'mp4v',\n",
    "    'draw_boxes': True,\n",
    "    'show_probabilities': True,\n",
    "    'box_thickness': 2,\n",
    "    'text_scale': 0.5,\n",
    "    'text_thickness': 2,\n",
    "}\n",
    "\n",
    "# Colors for visualization\n",
    "COLORS = {\n",
    "    'artist_face': (0, 255, 0),    # Green for artist\n",
    "    'other_face': (0, 0, 255),     # Red for others\n",
    "    'text_color': (255, 255, 255), # White text\n",
    "}\n",
    "\n",
    "# Logging Configuration\n",
    "LOGGING_CONFIG = {\n",
    "    'log_level': 'INFO',\n",
    "    'log_format': '%(asctime)s - %(levelname)s - %(message)s',\n",
    "    'save_logs': True,\n",
    "    'log_file': 'face_recognition.log'\n",
    "}\n",
    "\n",
    "# Performance Configuration\n",
    "PERFORMANCE_CONFIG = {\n",
    "    'enable_mixed_precision': True,  # Use mixed precision training if available\n",
    "    'gradient_clipping': 1.0,       # Gradient clipping value\n",
    "    'accumulation_steps': 1,        # Gradient accumulation steps\n",
    "    'memory_efficient': True,       # Enable memory optimizations\n",
    "}\n",
    "\n",
    "def get_config():\n",
    "    \"\"\"Return the complete configuration dictionary\"\"\"\n",
    "    return {\n",
    "        'model': MODEL_CONFIG,\n",
    "        'training': TRAINING_CONFIG,\n",
    "        'augmentation': AUGMENTATION_CONFIG,\n",
    "        'inference': INFERENCE_CONFIG,\n",
    "        'data_paths': DATA_PATHS,\n",
    "        'device': DEVICE_CONFIG,\n",
    "        'video': VIDEO_CONFIG,\n",
    "        'colors': COLORS,\n",
    "        'logging': LOGGING_CONFIG,\n",
    "        'performance': PERFORMANCE_CONFIG,\n",
    "    }\n",
    "\n",
    "def update_config(config_name, key, value):\n",
    "    \"\"\"Update a specific configuration value\"\"\"\n",
    "    config = get_config()\n",
    "    if config_name in config and key in config[config_name]:\n",
    "        config[config_name][key] = value\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "def print_config():\n",
    "    \"\"\"Print the current configuration\"\"\"\n",
    "    config = get_config()\n",
    "    print(\"Face Recognition System Configuration:\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    for section_name, section_config in config.items():\n",
    "        print(f\"\\n{section_name.upper()}:\")\n",
    "        for key, value in section_config.items():\n",
    "            print(f\"  {key}: {value}\")\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     print_config() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9079e9a",
   "metadata": {
    "papermill": {
     "duration": 0.017161,
     "end_time": "2025-07-30T16:41:48.701983",
     "exception": false,
     "start_time": "2025-07-30T16:41:48.684822",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main Files\n",
    "- preprocessing\n",
    "- hyperparameter tuning (`lr` and `wd`)\n",
    "- finetuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "85e59179",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T16:41:48.738011Z",
     "iopub.status.busy": "2025-07-30T16:41:48.737789Z",
     "iopub.status.idle": "2025-07-30T16:42:10.080952Z",
     "shell.execute_reply": "2025-07-30T16:42:10.080048Z"
    },
    "papermill": {
     "duration": 21.362794,
     "end_time": "2025-07-30T16:42:10.082129",
     "exception": false,
     "start_time": "2025-07-30T16:41:48.719335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Starting Improved Face Recognition System Training...\n",
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n",
      "Training samples: 56\n",
      "Validation samples: 24\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n",
      "100%|██████████| 13.6M/13.6M [00:00<00:00, 232MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training for 15 epochs with improved regularization...\n",
      "\n",
      "Epoch 1/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:01<00:00,  4.27it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  5.47it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.6662, Train Acc: 51.79%\n",
      "Val Loss: 0.9157, Val Acc: 33.33%\n",
      "Learning Rate: 1.00e-04\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 2/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.93it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.75it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.7686, Train Acc: 53.57%\n",
      "Val Loss: 0.9128, Val Acc: 29.17%\n",
      "Learning Rate: 1.00e-04\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 3/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.71it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.67it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 3.3310, Train Acc: 44.64%\n",
      "Val Loss: 0.9320, Val Acc: 33.33%\n",
      "Learning Rate: 1.00e-04\n",
      "⏳ No improvement for 1 epochs\n",
      "\n",
      "Epoch 4/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.92it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.68it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 3.6258, Train Acc: 51.79%\n",
      "Val Loss: 0.9530, Val Acc: 33.33%\n",
      "Learning Rate: 1.00e-04\n",
      "⏳ No improvement for 2 epochs\n",
      "\n",
      "Epoch 5/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  9.79it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.57it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.3766, Train Acc: 46.43%\n",
      "Val Loss: 0.9624, Val Acc: 41.67%\n",
      "Learning Rate: 8.00e-05\n",
      "⏳ No improvement for 3 epochs\n",
      "\n",
      "Epoch 6/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00, 10.11it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.73it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 3.2282, Train Acc: 46.43%\n",
      "Val Loss: 0.9636, Val Acc: 33.33%\n",
      "Learning Rate: 8.00e-05\n",
      "⏳ No improvement for 4 epochs\n",
      "\n",
      "Epoch 7/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.96it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.71it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.7782, Train Acc: 41.07%\n",
      "Val Loss: 0.9575, Val Acc: 33.33%\n",
      "Learning Rate: 8.00e-05\n",
      "⏳ No improvement for 5 epochs\n",
      "🛑 Early stopping triggered!\n",
      "Model saved successfully!\n"
     ]
    },
    {
     "data": {
      "image/png": "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70IdLdW+fXuaN29OmjRpyJQpU7DR6nGZRT+ipk6dytSpU00nba5cuRg4cCA1atQIcf+5c+fStm1bs212dnb4+vpGdahCCAs7fVonohYuhA9H9hYurBNRzZqBm1vkvmaWLPDzz/rKc48eUL06hKNetBBfLEuWLKxatYo6depgMBj4+eefo2zE08OHD4N1ulKmTEnv3r0pUqQIQ4cOpWnTpuzfv5/ff/+dKVOmAPDPP/9w9epVypYtS+LEiVm/fj1Go5Fs2bJx8OBBtm3bRtWqVUmWLBkHDx7k4cOH5MiRI0regxBR7c0bnYTauVMnoQ4f1l8kP5Qpk05CVaigR0KlTm2RUHF1hdWroVgxPdp3wAD49VfLxCKEiPuio8+yYMEC3NzcaNKkidmIMqUU1atXZ/bs2dSoUQNvb286d+5MsmTJTEXN9+7dS7du3ShXrhxly5alYcOG/Pbbb2TOnJkLFy5gMBioXr065cuX5+HDh4waNYpGjRqxceNGNmzYgIuLyydjS5cuHba2tkyaNInOnTtz5swZhg4darZP165dmTRpEs2aNaN///64urpy4MABihYtalrBr1q1ari4uDBs2DCGDBkSqe0X01m0plSaNGkYOXIkR48e5ciRI1SsWJG6dety9uzZUJ/j4uLCvXv3TD83btyIxoiFENHp0SOYNAkKFYK8eeG333RCKnly6N1bJ6oOH4YuXSI/IRXk++/1Cn0PH+qluIWIDmPHjiVx4sSULFmSOnXqUK1aNQoWLBglr7V48WIKFChg9jNz5kwKFizIsmXLWLJkCblz52bgwIEMGTIELy8vABIlSsSqVauoWLEiOXLkYNq0afz555/kypULFxcXdu/eTc2aNcmaNSs//fQTY8eODfWikxAxzdu3sH07DByoV75LlAiqVoXhw2H/fp2QSp8e2raF+fPh5k24fBlmztSjai2VkAqSKxfMmaNvjxoFy5dbNh4hRNz122+/RXmfZfbs2dSvXz/EKY7169fn77//5tGjR3h6ejJ+/HimTJlCrly5qF27NpcuXTLtu3LlSooUKULz5s3JmTMnffv2JfD/w1xz5MjBlClTmDx5Mvny5ePQoUP06dPns7G5u7szd+5cli9fTs6cORk5ciRjxowx28fNzY3t27fz6tUrypUrR6FChZg5c6bZqCkrKyu8vLwIDAykTZs24W2qWMmg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QMPhYBbChlsh40u7E4mPU1NKREREREREfMvR5bBjomu77bNQb5C9efyFYUCnORDdHQoyXWt55Z60O5X4MDWlRERERERExHf8uAs23gGmE678PTR70O5E/iUgBLr/B6peCTmHXHc9LMy1O5X4KDWlRERERERExDecOw7JN8L5bIjtDR1fcc3eEc8KrQU9l0FQdTi1CbaMcq3xJVJGakqJiIiIiIiI9zt/FpIHwdkjEJkA3ReDI8juVP6rWjPXn4ERCP9dAHuetDuR+CA1pURERERERMS7mU7YPAJOb4XgKNcsneAadqeS2n1cs9UAdj8B3y20N4/4HDWlRERERERExLvtegyO/DQzqscSiGhsdyK5oPEf/reu15bfwsnNtsYR36KmlIiIiIiIiHivb9+Evc+4tju9ATE97M0jJV31d6h7EzjzYN0gyP7O7kTiI9SUEhEREREREe+Uvg6++INru+VfoNFwe/PIxTkC4Op/Q42rIO+kazH6/Ay7U4kPUFNKREREREREvE/WAVh3MzgLoP4tkKiFtL1aUFXo+SGE1YGMvbDxdnCetzuVeDk1pURERERERMS75P8IawdA/mmI6ghJb4KhH1+9XpV60PMDCKgCx1dCyni7E4mX099qERERERER8R7OAlh/C2Tthyr1XU2OwCp2p5LSimoPV78NGPDNLNg30+5E4sXUlBIRERERERHvYJqw9X448SkEVoWeyyCstt2ppKzq3wxXTXNtbx8Hx1bYm0e8lppSIiIiIiIi4h2+fh4OvuG6VK/rO1Aj0e5EUl7N/wSNRoLphA23w5k9dicSL6SmlIiIiIiIiNjvyFLY8bBru+3zUPdGW+OIRYYBHWdDTC84n+W6I9+5E3anEi+jppSIiIiIiIjY6/QO2DQMMKHxvZAwzu5E4g4BwdD9/yCiCeT8F9YNgvPn7E4lXkRNKREREREfNHv2bBITE4mMjCQyMpKkpCRWrPjfmh29evXCMIxij3vvvdfGxCIiv+LsUUgeCIVnofa10OEl1ywbqRxCoqDncgiuAT98Dlt+57qkTwQ1pURERER8Ur169Zg2bRopKSls27aN3r17M2jQIPbu3Vv0mj/84Q8cP3686PHss8/amFhE5CLO50DyTXDuKEQ2h27vgSPI7lTibpFNoPt/XH+2h9+F3ZPtTiReItDuACIiIiJSdgMHDiy2//TT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vfzyy2Z8fLwZHBxsdurUydyyZYvdkXzCZ599ZgIlHiNGjLA7mk+4WO0Ac968eXZH8wkjR440GzRoYAYHB5vR0dFmnz59zE8++cTuWD6tZ8+e5rhx4+yO4RNuv/12My4uzgwODjbr1q1r3n777eaBAwfsjuVTPvzwQ7NVq1ZmSEiI2axZM3POnDl2R5JS0rip/DR2Kj+Nm6zRuMn9NG4qG42drPOmsZNhmqbpySaYiIiIiIiIiIiI1pQSERERERERERGPU1NKREREREREREQ8Tk0pERERERERERHxODWlRERERERERETE49SUEhERERERERERj1NTSkREREREREREPE5NKRERERERERER8Tg1pURERERERERExOPUlBIRcQPDMFi6dKndMURERES8nsZNInKBmlIi4vN++9vfYhhGicf1119vdzQRERERr6Jxk4h4k0C7A4iIuMP111/PvHnzih0LCQmxKY2IiIiI99K4SUS8hWZKiUilEBISQu3atYs9atSoAbimiM+ePZv+/fsTFhZGo0aNWLx4cbH37969m969exMWFkbNmjW55557yM7OLvaaf/7zn7Rs2ZKQkBDi4uIYM2ZMsedPnTrFzTffTJUqVWjSpAkffPBBxX7RIiIiIuWgcZOIeAs1pUTELzz22GMMHTqUnTt3MmzYMO644w6++uorAHJycujXrx81atRg69atLFq0iNWrVxcbPM2ePZvRo0dzzz33sHv3bj744AMaN25c7DOmTJnCbbfdxq5du7jhhhsYNmwYp0+f9ujXKSIiImKVxk0i4jGmiIiPGzFihBkQEGCGh4cXezz99NOmaZomYN57773F3tO5c2fzvvvuM03TNOfMmWPWqFHDzM7OLnp++fLlpsPhMNPS0kzTNM06deqYjz766K9mAMy//vWvRfvZ2dkmYK5YscJtX6eIiIiIVRo3iYg30ZpSIlIpXHPNNcyePbvYsaioqKLtpKSkYs8lJSWRmpoKwFdffUWbNm0IDw8ver5r1644nU727duHYRgcO3aMPn36XDJDYmJi0XZ4eDiRkZGkp6eX90sSERERqRAaN4mIt1BTSkQqhfDw8BLTwt0lLCysVK8LCgoqtm8YBk6nsyIiiYiIiJSbxk0i4i20ppSI+IUtW7aU2G/evDkAzZs3Z+fOneTk5BQ9v3HjRhwOBwkJCURERHDFFVewZs0aj2YWERERsYPGTSLiKZopJSKVQl5eHmlpacWOBQYGUqtWLQAWLVpEhw4d6NatG//+97/54osvmDt3LgDDhg3jiSeeYMSIEUyePJmTJ08yduxYfvOb3xAbGwvA5MmTuffee4mJiaF///5kZWWxceNGxo4d69kvVERERMQijZtExFuoKSUilcLHH39MXFxcsWMJCQl8/fXXgOsOLwsXLuT+++8nLi6Od955hxYtWgBQpUoVVq5cybhx4+jYsSNVqlRh6NChvPDCC0XnGjFiBLm5ubz44os89NBD1KpVi1tuucVzX6CIiIiIm2jcJCLewjBN07Q7hIhIRTIMgyVLljB48GC7o4iIiIh4NY2bRMSTtKaUiIiIiIiIiIh4nJpSIiIiIiIiIiLicbp8T0REREREREREPE4zpURERERERERExOPUlBIREREREREREY9TU0pERERERERERDxOTSkREREREREREfE4NaVERERERERERMTj1JQSERERERERERGPU1NKREREREREREQ8Tk0pERERERERERHxODWlRERERERERETE4/4fcmHYCuOoeuIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🎉 Improved training completed!\n",
      "Key improvements:\n",
      "- Reduced augmentation intensity\n",
      "- Increased dropout (0.7)\n",
      "- Added batch normalization\n",
      "- Label smoothing (0.1)\n",
      "- Higher weight decay (1e-2)\n",
      "- Learning rate scheduling\n",
      "- Gradient clipping\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Improved Face Recognition Training Script\n",
    "Addresses overfitting issues with better regularization and training strategies\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms, models\n",
    "import albumentations as A\n",
    "from albumentations.pytorch import ToTensorV2\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tqdm import tqdm\n",
    "import warnings\n",
    "# from config import get_config\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set device\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "class ArtistDataset(Dataset):\n",
    "    \"\"\"Custom dataset for artist face recognition\"\"\"\n",
    "    \n",
    "    def __init__(self, image_paths, labels, transform=None):\n",
    "        self.image_paths = image_paths\n",
    "        self.labels = labels\n",
    "        self.transform = transform\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.image_paths)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        image_path = self.image_paths[idx]\n",
    "        label = self.labels[idx]\n",
    "        \n",
    "        # Load image\n",
    "        image = Image.open(image_path).convert('RGB')\n",
    "        image = np.array(image)\n",
    "        \n",
    "        if self.transform:\n",
    "            image = self.transform(image=image)['image']\n",
    "        \n",
    "        return image, label\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"Load and prepare dataset\"\"\"\n",
    "    print(\"Loading dataset...\")\n",
    "    \n",
    "    # Get configuration\n",
    "    config = get_config()\n",
    "    artist_path = config['data_paths']['kaggle_artist_path']\n",
    "    others_path = config['data_paths']['kaggle_others_path']\n",
    "    \n",
    "    print(f\"Looking for artist images in: {artist_path}\")\n",
    "    print(f\"Looking for others images in: {others_path}\")\n",
    "    \n",
    "    # Collect artist images (label 1)\n",
    "    artist_images = []\n",
    "    if os.path.exists(artist_path):\n",
    "        for filename in os.listdir(artist_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                artist_images.append(os.path.join(artist_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Artist path does not exist: {artist_path}\")\n",
    "    \n",
    "    # Collect others images (label 0)\n",
    "    others_images = []\n",
    "    if os.path.exists(others_path):\n",
    "        for filename in os.listdir(others_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                others_images.append(os.path.join(others_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Others path does not exist: {others_path}\")\n",
    "    \n",
    "    print(f\"Found {len(artist_images)} artist images\")\n",
    "    print(f\"Found {len(others_images)} others images\")\n",
    "    \n",
    "    # Create labels\n",
    "    artist_labels = [1] * len(artist_images)\n",
    "    others_labels = [0] * len(others_images)\n",
    "    \n",
    "    # Combine data\n",
    "    all_images = artist_images + others_images\n",
    "    all_labels = artist_labels + others_labels\n",
    "    \n",
    "    return all_images, all_labels\n",
    "\n",
    "def create_transforms():\n",
    "    \"\"\"Create balanced data augmentation transforms\"\"\"\n",
    "    \n",
    "    # Training transforms with light augmentation\n",
    "    train_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.HorizontalFlip(p=0.5),\n",
    "        A.RandomBrightnessContrast(brightness_limit=0.05, contrast_limit=0.05, p=0.3),  # Very light\n",
    "        A.HueSaturationValue(hue_shift_limit=5, sat_shift_limit=10, val_shift_limit=5, p=0.3),  # Very light\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    # Validation transforms (same as training but no augmentation)\n",
    "    val_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    return train_transform, val_transform\n",
    "\n",
    "class ImprovedFaceModel(nn.Module):\n",
    "    \"\"\"Improved face recognition model with better regularization\"\"\"\n",
    "    \n",
    "    def __init__(self, num_classes=2, dropout_rate=0.3):\n",
    "        super(ImprovedFaceModel, self).__init__()\n",
    "        \n",
    "        # Load pre-trained MobileNetV2\n",
    "        self.backbone = models.mobilenet_v2(pretrained=True)\n",
    "        \n",
    "        # Remove the last classifier layer\n",
    "        self.backbone.classifier = nn.Identity()\n",
    "        \n",
    "        # Add custom classifier with better regularization\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(1280, 256),  # Reduced from 512\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(256, 64),   # Reduced from 128\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(64, num_classes)\n",
    "        )\n",
    "        \n",
    "        # Initialize weights properly\n",
    "        self._initialize_weights()\n",
    "    \n",
    "    def _initialize_weights(self):\n",
    "        \"\"\"Initialize classifier weights\"\"\"\n",
    "        for m in self.classifier.modules():\n",
    "            if isinstance(m, nn.Linear):\n",
    "                nn.init.xavier_uniform_(m.weight)\n",
    "                if m.bias is not None:\n",
    "                    nn.init.constant_(m.bias, 0)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        features = self.backbone.features(x)\n",
    "        features = features.mean([2, 3])  # Global average pooling\n",
    "        output = self.classifier(features)\n",
    "        return output\n",
    "\n",
    "def train_epoch(model, dataloader, criterion, optimizer, device):\n",
    "    \"\"\"Train for one epoch\"\"\"\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Training\")):\n",
    "        data, target = data.to(device), target.to(device)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        output = model(data)\n",
    "        loss = criterion(output, target)\n",
    "        loss.backward()\n",
    "        \n",
    "        # Gradient clipping\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "        \n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        _, predicted = output.max(1)\n",
    "        total += target.size(0)\n",
    "        correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def validate_epoch(model, dataloader, criterion, device):\n",
    "    \"\"\"Validate for one epoch\"\"\"\n",
    "    model.eval()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Validation\")):\n",
    "            data, target = data.to(device), target.to(device)\n",
    "            output = model(data)\n",
    "            loss = criterion(output, target)\n",
    "            \n",
    "            running_loss += loss.item()\n",
    "            _, predicted = output.max(1)\n",
    "            total += target.size(0)\n",
    "            correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main training function with improved regularization\"\"\"\n",
    "    print(\"Starting Improved Face Recognition System Training...\")\n",
    "    \n",
    "    # Load data\n",
    "    all_images, all_labels = load_data()\n",
    "    \n",
    "    if len(all_images) == 0:\n",
    "        print(\"No images found! Please check the data paths.\")\n",
    "        return\n",
    "    \n",
    "    # Get configuration\n",
    "    config = get_config()\n",
    "    \n",
    "    # Split data with more validation data\n",
    "    train_images, val_images, train_labels, val_labels = train_test_split(\n",
    "        all_images, all_labels, \n",
    "        test_size=config['training']['validation_split'], \n",
    "        random_state=config['training']['random_seed'], \n",
    "        stratify=all_labels\n",
    "    )\n",
    "    \n",
    "    print(f\"Training samples: {len(train_images)}\")\n",
    "    print(f\"Validation samples: {len(val_images)}\")\n",
    "    \n",
    "    # Create transforms\n",
    "    train_transform, val_transform = create_transforms()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = ArtistDataset(train_images, train_labels, train_transform)\n",
    "    val_dataset = ArtistDataset(val_images, val_labels, val_transform)\n",
    "    \n",
    "    # Create dataloaders with smaller batch size\n",
    "    train_loader = DataLoader(\n",
    "        train_dataset, \n",
    "        batch_size=config['training']['batch_size'], \n",
    "        shuffle=True, \n",
    "        num_workers=2\n",
    "    )\n",
    "    val_loader = DataLoader(\n",
    "        val_dataset, \n",
    "        batch_size=config['training']['batch_size'], \n",
    "        shuffle=False, \n",
    "        num_workers=2\n",
    "    )\n",
    "    \n",
    "    # Initialize improved model\n",
    "    model = ImprovedFaceModel(\n",
    "        num_classes=2,\n",
    "        dropout_rate=config['model']['dropout_rate']\n",
    "    ).to(device)\n",
    "    \n",
    "    # Use standard cross entropy loss (no label smoothing)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    \n",
    "    # Use SGD with very low learning rate for stability\n",
    "    optimizer = optim.SGD(\n",
    "        model.parameters(), \n",
    "        lr=1e-4,  # Very low learning rate\n",
    "        momentum=0.9,\n",
    "        weight_decay=1e-4  # Light weight decay\n",
    "    )\n",
    "    \n",
    "    # Simple step scheduler for stability\n",
    "    scheduler = optim.lr_scheduler.StepLR(\n",
    "        optimizer, \n",
    "        step_size=5, \n",
    "        gamma=0.8,\n",
    "        verbose=True\n",
    "    )\n",
    "    \n",
    "    # Training history\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "    train_accs = []\n",
    "    val_accs = []\n",
    "    \n",
    "    # Training loop\n",
    "    num_epochs = config['training']['num_epochs']\n",
    "    best_val_loss = float('inf')\n",
    "    patience = config['training']['early_stopping_patience']\n",
    "    patience_counter = 0\n",
    "    \n",
    "    print(f\"\\nTraining for {num_epochs} epochs with improved regularization...\")\n",
    "    \n",
    "    for epoch in range(num_epochs):\n",
    "        print(f\"\\nEpoch {epoch+1}/{num_epochs}\")\n",
    "        \n",
    "        train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n",
    "        val_loss, val_acc = validate_epoch(model, val_loader, criterion, device)\n",
    "        \n",
    "        # Update learning rate\n",
    "        scheduler.step()\n",
    "        \n",
    "        train_losses.append(train_loss)\n",
    "        val_losses.append(val_loss)\n",
    "        train_accs.append(train_acc)\n",
    "        val_accs.append(val_acc)\n",
    "        \n",
    "        print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%\")\n",
    "        print(f\"Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%\")\n",
    "        print(f\"Learning Rate: {optimizer.param_groups[0]['lr']:.2e}\")\n",
    "        \n",
    "        # Early stopping\n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            patience_counter = 0\n",
    "            # Save best model\n",
    "            torch.save(model.state_dict(), config['data_paths']['model_save_path'])\n",
    "            print(\"✅ New best model saved!\")\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            print(f\"⏳ No improvement for {patience_counter} epochs\")\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            print(\"🛑 Early stopping triggered!\")\n",
    "            break\n",
    "    \n",
    "    # Save final model\n",
    "    torch.save(model.state_dict(), config['data_paths']['final_model_path'])\n",
    "    print(\"Model saved successfully!\")\n",
    "    \n",
    "    # Plot training curves\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    \n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(train_losses, label='Train Loss', color='blue')\n",
    "    plt.plot(val_losses, label='Validation Loss', color='orange')\n",
    "    plt.title('Training and Validation Loss (Improved)')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    \n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(train_accs, label='Train Accuracy', color='blue')\n",
    "    plt.plot(val_accs, label='Validation Accuracy', color='orange')\n",
    "    plt.title('Training and Validation Accuracy (Improved)')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Accuracy (%)')\n",
    "    plt.legend()\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.savefig('improved_training_curves.png', dpi=300, bbox_inches='tight')\n",
    "    plt.show()\n",
    "    \n",
    "    print(\"\\n🎉 Improved training completed!\")\n",
    "    print(\"Key improvements:\")\n",
    "    print(\"- Reduced augmentation intensity\")\n",
    "    print(\"- Increased dropout (0.7)\")\n",
    "    print(\"- Added batch normalization\")\n",
    "    print(\"- Label smoothing (0.1)\")\n",
    "    print(\"- Higher weight decay (1e-2)\")\n",
    "    print(\"- Learning rate scheduling\")\n",
    "    print(\"- Gradient clipping\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7961995,
     "sourceId": 12605156,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 100.86287,
   "end_time": "2025-07-30T16:42:11.626526",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T16:40:30.763656",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
