{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b1898fd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T14:06:09.066652Z",
     "iopub.status.busy": "2025-07-30T14:06:09.066354Z",
     "iopub.status.idle": "2025-07-30T14:07:44.845144Z",
     "shell.execute_reply": "2025-07-30T14:07:44.844123Z"
    },
    "papermill": {
     "duration": 95.784069,
     "end_time": "2025-07-30T14:07:44.846791",
     "exception": false,
     "start_time": "2025-07-30T14:06:09.062722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m36.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m33.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m41.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m21.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m35.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "097c02f9",
   "metadata": {
    "papermill": {
     "duration": 0.038552,
     "end_time": "2025-07-30T14:07:44.925185",
     "exception": false,
     "start_time": "2025-07-30T14:07:44.886633",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53d880bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:07:45.003320Z",
     "iopub.status.busy": "2025-07-30T14:07:45.002613Z",
     "iopub.status.idle": "2025-07-30T14:07:45.015658Z",
     "shell.execute_reply": "2025-07-30T14:07:45.015049Z"
    },
    "papermill": {
     "duration": 0.05313,
     "end_time": "2025-07-30T14:07:45.016766",
     "exception": false,
     "start_time": "2025-07-30T14:07:44.963636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Face Recognition System\n",
    "Contains all the key parameters for easy tuning and customization.\n",
    "\"\"\"\n",
    "\n",
    "# Model Configuration\n",
    "MODEL_CONFIG = {\n",
    "    'model_name': 'mobilenet_v2',\n",
    "    'num_classes': 2,\n",
    "    'input_size': 224,\n",
    "    'dropout_rate': 0.5,\n",
    "    'pretrained': True\n",
    "}\n",
    "\n",
    "# Training Configuration\n",
    "TRAINING_CONFIG = {\n",
    "    'batch_size': 16,  # Optimized for 16GB GPU\n",
    "    'num_epochs': 100,\n",
    "    'early_stopping_patience': 10,\n",
    "    'learning_rate_range': (1e-5, 1e-2),  # For Optuna optimization\n",
    "    'weight_decay_range': (1e-5, 1e-2),   # For Optuna optimization\n",
    "    'optuna_trials': 10,\n",
    "    'validation_split': 0.2,\n",
    "    'random_seed': 42\n",
    "}\n",
    "\n",
    "# Data Augmentation Configuration\n",
    "AUGMENTATION_CONFIG = {\n",
    "    'train_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('HorizontalFlip', {'p': 0.5}),\n",
    "        ('VerticalFlip', {'p': 0.1}),\n",
    "        ('RandomRotate90', {'p': 0.3}),\n",
    "        ('Rotate', {'limit': 15, 'p': 0.5}),\n",
    "        ('RandomBrightnessContrast', {'brightness_limit': 0.2, 'contrast_limit': 0.2, 'p': 0.5}),\n",
    "        ('HueSaturationValue', {'hue_shift_limit': 20, 'sat_shift_limit': 30, 'val_shift_limit': 20, 'p': 0.5}),\n",
    "        ('GaussNoise', {'var_limit': (10.0, 50.0), 'p': 0.3}),\n",
    "        ('GaussianBlur', {'blur_limit': (3, 7), 'p': 0.2}),\n",
    "        ('ElasticTransform', {'alpha': 1, 'sigma': 50, 'alpha_affine': 50, 'p': 0.2}),\n",
    "        ('GridDistortion', {'num_steps': 5, 'distort_limit': 0.3, 'p': 0.2}),\n",
    "        ('OpticalDistortion', {'distort_limit': 0.2, 'shift_limit': 0.15, 'p': 0.2}),\n",
    "        ('CoarseDropout', {'max_holes': 8, 'max_height': 32, 'max_width': 32, 'p': 0.3}),\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ],\n",
    "    'val_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ]\n",
    "}\n",
    "\n",
    "# Inference Configuration\n",
    "INFERENCE_CONFIG = {\n",
    "    'confidence_threshold': 0.9,  # Threshold for artist detection\n",
    "    'face_detection_confidence': 0.9,  # MTCNN confidence threshold\n",
    "    'min_face_size': 20,  # Minimum face size for detection\n",
    "    'scale_factor': 0.709,  # MTCNN scale factor\n",
    "    'video_frame_skip': 3,  # Process every Nth frame for efficiency\n",
    "}\n",
    "\n",
    "# Data Paths\n",
    "DATA_PATHS = {\n",
    "    'kaggle_artist_path': '/kaggle/input/input-data/Davido',\n",
    "    'kaggle_others_path': '/kaggle/input/input-data/Unknown',\n",
    "    'model_save_path': 'artist_model_best.pth',\n",
    "    'final_model_path': 'artist_model_final.pth',\n",
    "    'training_curves_path': 'training_curves.png'\n",
    "}\n",
    "\n",
    "# Device Configuration\n",
    "DEVICE_CONFIG = {\n",
    "    'use_gpu': True,\n",
    "    'num_workers': 2,  # For data loading\n",
    "    'pin_memory': True,\n",
    "}\n",
    "\n",
    "# Video Processing Configuration\n",
    "VIDEO_CONFIG = {\n",
    "    'output_fps': 30,\n",
    "    'output_codec': 'mp4v',\n",
    "    'draw_boxes': True,\n",
    "    'show_probabilities': True,\n",
    "    'box_thickness': 2,\n",
    "    'text_scale': 0.5,\n",
    "    'text_thickness': 2,\n",
    "}\n",
    "\n",
    "# Colors for visualization\n",
    "COLORS = {\n",
    "    'artist_face': (0, 255, 0),    # Green for artist\n",
    "    'other_face': (0, 0, 255),     # Red for others\n",
    "    'text_color': (255, 255, 255), # White text\n",
    "}\n",
    "\n",
    "# Logging Configuration\n",
    "LOGGING_CONFIG = {\n",
    "    'log_level': 'INFO',\n",
    "    'log_format': '%(asctime)s - %(levelname)s - %(message)s',\n",
    "    'save_logs': True,\n",
    "    'log_file': 'face_recognition.log'\n",
    "}\n",
    "\n",
    "# Performance Configuration\n",
    "PERFORMANCE_CONFIG = {\n",
    "    'enable_mixed_precision': True,  # Use mixed precision training if available\n",
    "    'gradient_clipping': 1.0,       # Gradient clipping value\n",
    "    'accumulation_steps': 1,        # Gradient accumulation steps\n",
    "    'memory_efficient': True,       # Enable memory optimizations\n",
    "}\n",
    "\n",
    "def get_config():\n",
    "    \"\"\"Return the complete configuration dictionary\"\"\"\n",
    "    return {\n",
    "        'model': MODEL_CONFIG,\n",
    "        'training': TRAINING_CONFIG,\n",
    "        'augmentation': AUGMENTATION_CONFIG,\n",
    "        'inference': INFERENCE_CONFIG,\n",
    "        'data_paths': DATA_PATHS,\n",
    "        'device': DEVICE_CONFIG,\n",
    "        'video': VIDEO_CONFIG,\n",
    "        'colors': COLORS,\n",
    "        'logging': LOGGING_CONFIG,\n",
    "        'performance': PERFORMANCE_CONFIG,\n",
    "    }\n",
    "\n",
    "def update_config(config_name, key, value):\n",
    "    \"\"\"Update a specific configuration value\"\"\"\n",
    "    config = get_config()\n",
    "    if config_name in config and key in config[config_name]:\n",
    "        config[config_name][key] = value\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "def print_config():\n",
    "    \"\"\"Print the current configuration\"\"\"\n",
    "    config = get_config()\n",
    "    print(\"Face Recognition System Configuration:\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    for section_name, section_config in config.items():\n",
    "        print(f\"\\n{section_name.upper()}:\")\n",
    "        for key, value in section_config.items():\n",
    "            print(f\"  {key}: {value}\")\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     print_config() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c65113c",
   "metadata": {
    "papermill": {
     "duration": 0.036688,
     "end_time": "2025-07-30T14:07:45.139238",
     "exception": false,
     "start_time": "2025-07-30T14:07:45.102550",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main Files\n",
    "- preprocessing\n",
    "- hyperparameter tuning (`lr` and `wd`)\n",
    "- finetuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c0eb5df9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T14:07:45.218151Z",
     "iopub.status.busy": "2025-07-30T14:07:45.217759Z",
     "iopub.status.idle": "2025-07-30T14:10:34.348924Z",
     "shell.execute_reply": "2025-07-30T14:10:34.347877Z"
    },
    "papermill": {
     "duration": 169.173029,
     "end_time": "2025-07-30T14:10:34.350441",
     "exception": false,
     "start_time": "2025-07-30T14:07:45.177412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-30 14:07:56,437] A new study created in memory with name: no-name-dc90dd05-7ab4-496e-8ef6-9ae41af0bb22\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Starting Face Recognition System Training...\n",
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n",
      "Training samples: 64\n",
      "Validation samples: 16\n",
      "Starting hyperparameter optimization...\n",
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n",
      "100%|██████████| 13.6M/13.6M [00:00<00:00, 181MB/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  2.22it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  1.95it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.19it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.06it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.61it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.72it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.59it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.23it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.63it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.93it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.47it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.72it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.78it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.94it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.62it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.50it/s]\n",
      "[I 2025-07-30 14:08:12,014] Trial 0 finished with value: 0.5186576247215271 and parameters: {'lr': 0.000533472040161538, 'weight_decay': 0.0013706051753251027}. Best is trial 0 with value: 0.5186576247215271.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.67it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.09it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.77it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.61it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.10it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.53it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.85it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.08it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.10it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.26it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.89it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "[I 2025-07-30 14:08:25,622] Trial 1 finished with value: 0.637028157711029 and parameters: {'lr': 0.0001098069249565775, 'weight_decay': 0.0027903202402187327}. Best is trial 0 with value: 0.5186576247215271.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.18it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.99it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.02it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.75it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.28it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.39it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.30it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.71it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.80it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.47it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.16it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.75it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.14it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "[I 2025-07-30 14:08:38,939] Trial 2 finished with value: 0.43086448311805725 and parameters: {'lr': 0.00188878617483355, 'weight_decay': 0.0020824263500868233}. Best is trial 2 with value: 0.43086448311805725.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.17it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.01it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.13it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.63it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.25it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.23it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.78it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.86it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.24it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "[I 2025-07-30 14:08:49,733] Trial 3 finished with value: 0.6584354639053345 and parameters: {'lr': 0.0024440989774839232, 'weight_decay': 0.0025238791543733697}. Best is trial 2 with value: 0.43086448311805725.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.85it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.14it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.97it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.25it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.71it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.36it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.47it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.85it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.78it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.71it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.08it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.07it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "[I 2025-07-30 14:09:03,334] Trial 4 finished with value: 0.7273598313331604 and parameters: {'lr': 0.00623073333240185, 'weight_decay': 0.0001646465139735826}. Best is trial 2 with value: 0.43086448311805725.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.14it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.73it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.60it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.47it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.82it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.61it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.92it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.58it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.75it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.63it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.22it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.12it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n",
      "[I 2025-07-30 14:09:17,717] Trial 5 finished with value: 0.7109651565551758 and parameters: {'lr': 0.007824606238613684, 'weight_decay': 0.0008102934700442758}. Best is trial 2 with value: 0.43086448311805725.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.99it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.07it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.24it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.66it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.99it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.01it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.56it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.83it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.15it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "[I 2025-07-30 14:09:31,734] Trial 6 finished with value: 0.6506723165512085 and parameters: {'lr': 2.5913860063520837e-05, 'weight_decay': 3.334808581819793e-05}. Best is trial 2 with value: 0.43086448311805725.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.32it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.35it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.64it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.40it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.03it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.17it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.87it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.47it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.86it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.61it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "[I 2025-07-30 14:09:44,933] Trial 7 finished with value: 0.6643327474594116 and parameters: {'lr': 2.5570537634645873e-05, 'weight_decay': 0.0020544066068506023}. Best is trial 2 with value: 0.43086448311805725.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.10it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.26it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.63it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.08it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.15it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.94it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.86it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "[I 2025-07-30 14:09:53,233] Trial 8 finished with value: 0.6817311644554138 and parameters: {'lr': 0.005473584875665862, 'weight_decay': 0.0077523044312304236}. Best is trial 2 with value: 0.43086448311805725.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.40it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.95it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.55it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.19it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.42it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.36it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.30it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.45it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.62it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.33it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "[I 2025-07-30 14:10:06,268] Trial 9 finished with value: 0.5015719532966614 and parameters: {'lr': 0.000508750672456231, 'weight_decay': 3.40739041397206e-05}. Best is trial 2 with value: 0.43086448311805725.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best hyperparameters: {'lr': 0.00188878617483355, 'weight_decay': 0.0020824263500868233}\n",
      "Training with best hyperparameters...\n",
      "\n",
      "Epoch 1/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.10it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6694, Train Acc: 60.94%\n",
      "Val Loss: 1.2688, Val Acc: 62.50%\n",
      "\n",
      "Epoch 2/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.05it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.8206, Train Acc: 51.56%\n",
      "Val Loss: 2.1815, Val Acc: 56.25%\n",
      "\n",
      "Epoch 3/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.54it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.0745, Train Acc: 46.88%\n",
      "Val Loss: 3.7530, Val Acc: 62.50%\n",
      "\n",
      "Epoch 4/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.51it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.85it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6314, Train Acc: 67.19%\n",
      "Val Loss: 2.1937, Val Acc: 62.50%\n",
      "\n",
      "Epoch 5/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.94it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5743, Train Acc: 71.88%\n",
      "Val Loss: 3.1386, Val Acc: 62.50%\n",
      "\n",
      "Epoch 6/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.36it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.7866, Train Acc: 57.81%\n",
      "Val Loss: 1.1285, Val Acc: 56.25%\n",
      "\n",
      "Epoch 7/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.08it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6626, Train Acc: 62.50%\n",
      "Val Loss: 1.3902, Val Acc: 50.00%\n",
      "\n",
      "Epoch 8/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.92it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6323, Train Acc: 57.81%\n",
      "Val Loss: 1.8047, Val Acc: 62.50%\n",
      "\n",
      "Epoch 9/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.27it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.63it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.8188, Train Acc: 54.69%\n",
      "Val Loss: 1.6228, Val Acc: 62.50%\n",
      "\n",
      "Epoch 10/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.48it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6677, Train Acc: 59.38%\n",
      "Val Loss: 1.0492, Val Acc: 62.50%\n",
      "\n",
      "Epoch 11/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.12it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.9728, Train Acc: 64.06%\n",
      "Val Loss: 0.6558, Val Acc: 62.50%\n",
      "\n",
      "Epoch 12/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.33it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6694, Train Acc: 60.94%\n",
      "Val Loss: 0.7293, Val Acc: 43.75%\n",
      "\n",
      "Epoch 13/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  4.00it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6708, Train Acc: 56.25%\n",
      "Val Loss: 0.6660, Val Acc: 62.50%\n",
      "\n",
      "Epoch 14/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.44it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.71it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6409, Train Acc: 67.19%\n",
      "Val Loss: 0.6318, Val Acc: 62.50%\n",
      "\n",
      "Epoch 15/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.23it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5473, Train Acc: 71.88%\n",
      "Val Loss: 0.6253, Val Acc: 68.75%\n",
      "\n",
      "Epoch 16/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.02it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6183, Train Acc: 76.56%\n",
      "Val Loss: 0.7217, Val Acc: 56.25%\n",
      "\n",
      "Epoch 17/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.32it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.71it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5550, Train Acc: 70.31%\n",
      "Val Loss: 0.9912, Val Acc: 56.25%\n",
      "\n",
      "Epoch 18/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.45it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6721, Train Acc: 67.19%\n",
      "Val Loss: 0.7941, Val Acc: 62.50%\n",
      "\n",
      "Epoch 19/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.97it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5621, Train Acc: 73.44%\n",
      "Val Loss: 0.8239, Val Acc: 62.50%\n",
      "\n",
      "Epoch 20/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.89it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5632, Train Acc: 68.75%\n",
      "Val Loss: 1.0438, Val Acc: 62.50%\n",
      "Model saved successfully!\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training completed successfully!\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Face Recognition System - Kaggle Training Script\n",
    "This script is designed to run on Kaggle notebook with P100 GPU (16GB) and 32GB RAM.\n",
    "It fine-tunes an efficient face recognition model to identify a specific artist.\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms, models\n",
    "import albumentations as A\n",
    "from albumentations.pytorch import ToTensorV2\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tqdm import tqdm\n",
    "import warnings\n",
    "# from config import get_config\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set device\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "class ArtistDataset(Dataset):\n",
    "    \"\"\"Custom dataset for artist face recognition\"\"\"\n",
    "    \n",
    "    def __init__(self, image_paths, labels, transform=None):\n",
    "        self.image_paths = image_paths\n",
    "        self.labels = labels\n",
    "        self.transform = transform\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.image_paths)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        image_path = self.image_paths[idx]\n",
    "        label = self.labels[idx]\n",
    "        \n",
    "        # Load image\n",
    "        image = Image.open(image_path).convert('RGB')\n",
    "        image = np.array(image)\n",
    "        \n",
    "        if self.transform:\n",
    "            image = self.transform(image=image)['image']\n",
    "        \n",
    "        return image, label\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"Load and prepare dataset\"\"\"\n",
    "    print(\"Loading dataset...\")\n",
    "    \n",
    "    # Get configuration\n",
    "    config = get_config()\n",
    "    artist_path = config['data_paths']['kaggle_artist_path']\n",
    "    others_path = config['data_paths']['kaggle_others_path']\n",
    "    \n",
    "    print(f\"Looking for artist images in: {artist_path}\")\n",
    "    print(f\"Looking for others images in: {others_path}\")\n",
    "    \n",
    "    # Collect artist images (label 1)\n",
    "    artist_images = []\n",
    "    if os.path.exists(artist_path):\n",
    "        for filename in os.listdir(artist_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                artist_images.append(os.path.join(artist_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Artist path does not exist: {artist_path}\")\n",
    "    \n",
    "    # Collect others images (label 0)\n",
    "    others_images = []\n",
    "    if os.path.exists(others_path):\n",
    "        for filename in os.listdir(others_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                others_images.append(os.path.join(others_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Others path does not exist: {others_path}\")\n",
    "    \n",
    "    print(f\"Found {len(artist_images)} artist images\")\n",
    "    print(f\"Found {len(others_images)} others images\")\n",
    "    \n",
    "    # Create labels\n",
    "    artist_labels = [1] * len(artist_images)\n",
    "    others_labels = [0] * len(others_images)\n",
    "    \n",
    "    # Combine data\n",
    "    all_images = artist_images + others_images\n",
    "    all_labels = artist_labels + others_labels\n",
    "    \n",
    "    return all_images, all_labels\n",
    "\n",
    "def create_transforms():\n",
    "    \"\"\"Create heavy data augmentation transforms\"\"\"\n",
    "    \n",
    "    # Training transforms with heavy augmentation\n",
    "    train_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.HorizontalFlip(p=0.5),\n",
    "        A.VerticalFlip(p=0.1),\n",
    "        A.RandomRotate90(p=0.3),\n",
    "        A.Rotate(limit=15, p=0.5),\n",
    "        A.RandomBrightnessContrast(brightness_limit=0.2, contrast_limit=0.2, p=0.5),\n",
    "        A.HueSaturationValue(hue_shift_limit=20, sat_shift_limit=30, val_shift_limit=20, p=0.5),\n",
    "        A.GaussNoise(var_limit=(10.0, 50.0), p=0.3),\n",
    "        A.GaussianBlur(blur_limit=(3, 7), p=0.2),\n",
    "        A.ElasticTransform(alpha=1, sigma=50, alpha_affine=50, p=0.2),\n",
    "        A.GridDistortion(num_steps=5, distort_limit=0.3, p=0.2),\n",
    "        A.OpticalDistortion(distort_limit=0.2, shift_limit=0.15, p=0.2),\n",
    "        A.CoarseDropout(max_holes=8, max_height=32, max_width=32, p=0.3),\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    # Validation transforms (minimal augmentation)\n",
    "    val_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    return train_transform, val_transform\n",
    "\n",
    "class EfficientFaceModel(nn.Module):\n",
    "    \"\"\"Efficient face recognition model based on MobileNetV2\"\"\"\n",
    "    \n",
    "    def __init__(self, num_classes=2, dropout_rate=0.5):\n",
    "        super(EfficientFaceModel, self).__init__()\n",
    "        \n",
    "        # Load pre-trained MobileNetV2\n",
    "        self.backbone = models.mobilenet_v2(pretrained=True)\n",
    "        \n",
    "        # Remove the last classifier layer\n",
    "        self.backbone.classifier = nn.Identity()\n",
    "        \n",
    "        # Add custom classifier for binary classification\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(1280, 512),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(512, 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(128, num_classes)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        features = self.backbone.features(x)\n",
    "        features = features.mean([2, 3])  # Global average pooling\n",
    "        output = self.classifier(features)\n",
    "        return output\n",
    "\n",
    "def train_epoch(model, dataloader, criterion, optimizer, device):\n",
    "    \"\"\"Train for one epoch\"\"\"\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Training\")):\n",
    "        data, target = data.to(device), target.to(device)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        output = model(data)\n",
    "        loss = criterion(output, target)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        _, predicted = output.max(1)\n",
    "        total += target.size(0)\n",
    "        correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def validate_epoch(model, dataloader, criterion, device):\n",
    "    \"\"\"Validate for one epoch\"\"\"\n",
    "    model.eval()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Validation\")):\n",
    "            data, target = data.to(device), target.to(device)\n",
    "            output = model(data)\n",
    "            loss = criterion(output, target)\n",
    "            \n",
    "            running_loss += loss.item()\n",
    "            _, predicted = output.max(1)\n",
    "            total += target.size(0)\n",
    "            correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def objective(trial):\n",
    "    \"\"\"Optuna objective function for hyperparameter optimization\"\"\"\n",
    "    \n",
    "    # Hyperparameters to optimize\n",
    "    lr = trial.suggest_float('lr', 1e-5, 1e-2, log=True)\n",
    "    weight_decay = trial.suggest_float('weight_decay', 1e-5, 1e-2, log=True)\n",
    "    \n",
    "    # Load data\n",
    "    all_images, all_labels = load_data()\n",
    "    \n",
    "    # Split data\n",
    "    train_images, val_images, train_labels, val_labels = train_test_split(\n",
    "        all_images, all_labels, test_size=0.2, random_state=42, stratify=all_labels\n",
    "    )\n",
    "    \n",
    "    # Create transforms\n",
    "    train_transform, val_transform = create_transforms()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = ArtistDataset(train_images, train_labels, train_transform)\n",
    "    val_dataset = ArtistDataset(val_images, val_labels, val_transform)\n",
    "    \n",
    "    # Create dataloaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, num_workers=2)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False, num_workers=2)\n",
    "    \n",
    "    # Initialize model\n",
    "    model = EfficientFaceModel().to(device)\n",
    "    \n",
    "    # Loss and optimizer\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=lr, weight_decay=weight_decay)\n",
    "    \n",
    "    # Training loop (shorter for hyperparameter tuning)\n",
    "    best_val_loss = float('inf')\n",
    "    patience = 5\n",
    "    patience_counter = 0\n",
    "    \n",
    "    for epoch in range(10):  # Shorter training for hyperparameter tuning\n",
    "        train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n",
    "        val_loss, val_acc = validate_epoch(model, val_loader, criterion, device)\n",
    "        \n",
    "        # Early stopping\n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            patience_counter = 0\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            break\n",
    "    \n",
    "    return best_val_loss\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main training function\"\"\"\n",
    "    print(\"Starting Face Recognition System Training...\")\n",
    "    \n",
    "    # Load data\n",
    "    all_images, all_labels = load_data()\n",
    "    \n",
    "    if len(all_images) == 0:\n",
    "        print(\"No images found! Please check the data paths.\")\n",
    "        return\n",
    "    \n",
    "    # Split data\n",
    "    train_images, val_images, train_labels, val_labels = train_test_split(\n",
    "        all_images, all_labels, test_size=0.2, random_state=42, stratify=all_labels\n",
    "    )\n",
    "    \n",
    "    print(f\"Training samples: {len(train_images)}\")\n",
    "    print(f\"Validation samples: {len(val_images)}\")\n",
    "    \n",
    "    # Create transforms\n",
    "    train_transform, val_transform = create_transforms()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = ArtistDataset(train_images, train_labels, train_transform)\n",
    "    val_dataset = ArtistDataset(val_images, val_labels, val_transform)\n",
    "    \n",
    "    # Create dataloaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, num_workers=2)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False, num_workers=2)\n",
    "    \n",
    "    # Hyperparameter optimization with Optuna\n",
    "    print(\"Starting hyperparameter optimization...\")\n",
    "    study = optuna.create_study(direction='minimize')\n",
    "    study.optimize(objective, n_trials=10)\n",
    "    \n",
    "    best_params = study.best_params\n",
    "    print(f\"Best hyperparameters: {best_params}\")\n",
    "    \n",
    "    # Train with best hyperparameters\n",
    "    print(\"Training with best hyperparameters...\")\n",
    "    \n",
    "    # Initialize model\n",
    "    model = EfficientFaceModel().to(device)\n",
    "    \n",
    "    # Loss and optimizer with best parameters\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.AdamW(\n",
    "        model.parameters(), \n",
    "        lr=best_params['lr'], \n",
    "        weight_decay=best_params['weight_decay']\n",
    "    )\n",
    "    \n",
    "    # Training history\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "    train_accs = []\n",
    "    val_accs = []\n",
    "    \n",
    "    # Training loop\n",
    "    num_epochs = 20\n",
    "    best_val_loss = float('inf')\n",
    "    patience = 7\n",
    "    patience_counter = 0\n",
    "    \n",
    "    for epoch in range(num_epochs):\n",
    "        print(f\"\\nEpoch {epoch+1}/{num_epochs}\")\n",
    "        \n",
    "        train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n",
    "        val_loss, val_acc = validate_epoch(model, val_loader, criterion, device)\n",
    "        \n",
    "        train_losses.append(train_loss)\n",
    "        val_losses.append(val_loss)\n",
    "        train_accs.append(train_acc)\n",
    "        val_accs.append(val_acc)\n",
    "        \n",
    "        print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%\")\n",
    "        print(f\"Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%\")\n",
    "        \n",
    "        # Early stopping\n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            patience_counter = 0\n",
    "            # Save best model\n",
    "            config = get_config()\n",
    "            torch.save(model.state_dict(), config['data_paths']['model_save_path'])\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            print(\"Early stopping triggered!\")\n",
    "            break\n",
    "    \n",
    "    # Save final model\n",
    "    config = get_config()\n",
    "    torch.save(model.state_dict(), config['data_paths']['final_model_path'])\n",
    "    print(\"Model saved successfully!\")\n",
    "    \n",
    "    # Plot training curves\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    \n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(train_losses, label='Train Loss')\n",
    "    plt.plot(val_losses, label='Validation Loss')\n",
    "    plt.title('Training and Validation Loss')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(train_accs, label='Train Accuracy')\n",
    "    plt.plot(val_accs, label='Validation Accuracy')\n",
    "    plt.title('Training and Validation Accuracy')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Accuracy (%)')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    config = get_config()\n",
    "    plt.savefig(config['data_paths']['training_curves_path'], dpi=300, bbox_inches='tight')\n",
    "    plt.show()\n",
    "    \n",
    "    print(\"Training completed successfully!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7961995,
     "sourceId": 12605156,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 271.121273,
   "end_time": "2025-07-30T14:10:36.157136",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T14:06:05.035863",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
