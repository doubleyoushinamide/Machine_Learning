{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "66da8365",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T16:16:44.716279Z",
     "iopub.status.busy": "2025-07-30T16:16:44.715536Z",
     "iopub.status.idle": "2025-07-30T16:18:09.563163Z",
     "shell.execute_reply": "2025-07-30T16:18:09.562147Z"
    },
    "papermill": {
     "duration": 84.852952,
     "end_time": "2025-07-30T16:18:09.564779",
     "exception": false,
     "start_time": "2025-07-30T16:16:44.711827",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m101.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m84.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m48.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m21.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m64.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f0af8ce",
   "metadata": {
    "papermill": {
     "duration": 0.027869,
     "end_time": "2025-07-30T16:18:09.623065",
     "exception": false,
     "start_time": "2025-07-30T16:18:09.595196",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "703d1f14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T16:18:09.679917Z",
     "iopub.status.busy": "2025-07-30T16:18:09.679665Z",
     "iopub.status.idle": "2025-07-30T16:18:09.691902Z",
     "shell.execute_reply": "2025-07-30T16:18:09.691414Z"
    },
    "papermill": {
     "duration": 0.041946,
     "end_time": "2025-07-30T16:18:09.692972",
     "exception": false,
     "start_time": "2025-07-30T16:18:09.651026",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Face Recognition System\n",
    "Contains all the key parameters for easy tuning and customization.\n",
    "\"\"\"\n",
    "\n",
    "# Model Configuration\n",
    "MODEL_CONFIG = {\n",
    "    'model_name': 'mobilenet_v2',\n",
    "    'num_classes': 2,\n",
    "    'input_size': 224,\n",
    "    'dropout_rate': 0.7,  # Increased dropout for stronger regularization\n",
    "    'pretrained': True,\n",
    "    'freeze_backbone': False,  # Set to True to freeze all backbone layers\n",
    "    'freeze_layers': None,     # List of layer indices to freeze (e.g., [0, 1, 2])\n",
    "    'freeze_strategy': 'none'  # Options: 'none', 'backbone', 'early_layers', 'custom'\n",
    "}\n",
    "\n",
    "# Training Configuration\n",
    "TRAINING_CONFIG = {\n",
    "    'batch_size': 8,  # Reduced for smaller dataset\n",
    "    'num_epochs': 15,  # Reduced to prevent overfitting\n",
    "    'early_stopping_patience': 5,  # More aggressive early stopping\n",
    "    'learning_rate_range': (1e-4, 1e-3),  # Narrower range for stability\n",
    "    'weight_decay_range': (1e-3, 1e-2),   # Higher weight decay for regularization\n",
    "    'optuna_trials': 5,  # Fewer trials for faster convergence\n",
    "    'validation_split': 0.3,  # More validation data\n",
    "    'random_seed': 42\n",
    "}\n",
    "\n",
    "# Data Augmentation Configuration\n",
    "AUGMENTATION_CONFIG = {\n",
    "    'train_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('HorizontalFlip', {'p': 0.5}),\n",
    "        ('Rotate', {'limit': 10, 'p': 0.3}),  # Reduced rotation\n",
    "        ('RandomBrightnessContrast', {'brightness_limit': 0.1, 'contrast_limit': 0.1, 'p': 0.3}),  # Reduced intensity\n",
    "        ('HueSaturationValue', {'hue_shift_limit': 10, 'sat_shift_limit': 15, 'val_shift_limit': 10, 'p': 0.3}),  # Reduced intensity\n",
    "        ('GaussNoise', {'var_limit': (5.0, 25.0), 'p': 0.2}),  # Reduced noise\n",
    "        ('GaussianBlur', {'blur_limit': (3, 5), 'p': 0.1}),  # Reduced blur\n",
    "        ('CoarseDropout', {'max_holes': 4, 'max_height': 16, 'max_width': 16, 'p': 0.2}),  # Reduced dropout\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ],\n",
    "    'val_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ]\n",
    "}\n",
    "\n",
    "# Inference Configuration\n",
    "INFERENCE_CONFIG = {\n",
    "    'confidence_threshold': 0.9,  # Threshold for artist detection\n",
    "    'face_detection_confidence': 0.9,  # MTCNN confidence threshold\n",
    "    'min_face_size': 20,  # Minimum face size for detection\n",
    "    'scale_factor': 0.709,  # MTCNN scale factor\n",
    "    'video_frame_skip': 3,  # Process every Nth frame for efficiency\n",
    "}\n",
    "\n",
    "# Data Paths\n",
    "DATA_PATHS = {\n",
    "    'kaggle_artist_path': '/kaggle/input/input-data/Davido',\n",
    "    'kaggle_others_path': '/kaggle/input/input-data/Unknown',\n",
    "    'model_save_path': 'artist_model_best.pth',\n",
    "    'final_model_path': 'artist_model_final.pth',\n",
    "    'training_curves_path': 'training_curves.png'\n",
    "}\n",
    "\n",
    "# Device Configuration\n",
    "DEVICE_CONFIG = {\n",
    "    'use_gpu': True,\n",
    "    'num_workers': 2,  # For data loading\n",
    "    'pin_memory': True,\n",
    "}\n",
    "\n",
    "# Video Processing Configuration\n",
    "VIDEO_CONFIG = {\n",
    "    'output_fps': 30,\n",
    "    'output_codec': 'mp4v',\n",
    "    'draw_boxes': True,\n",
    "    'show_probabilities': True,\n",
    "    'box_thickness': 2,\n",
    "    'text_scale': 0.5,\n",
    "    'text_thickness': 2,\n",
    "}\n",
    "\n",
    "# Colors for visualization\n",
    "COLORS = {\n",
    "    'artist_face': (0, 255, 0),    # Green for artist\n",
    "    'other_face': (0, 0, 255),     # Red for others\n",
    "    'text_color': (255, 255, 255), # White text\n",
    "}\n",
    "\n",
    "# Logging Configuration\n",
    "LOGGING_CONFIG = {\n",
    "    'log_level': 'INFO',\n",
    "    'log_format': '%(asctime)s - %(levelname)s - %(message)s',\n",
    "    'save_logs': True,\n",
    "    'log_file': 'face_recognition.log'\n",
    "}\n",
    "\n",
    "# Performance Configuration\n",
    "PERFORMANCE_CONFIG = {\n",
    "    'enable_mixed_precision': True,  # Use mixed precision training if available\n",
    "    'gradient_clipping': 1.0,       # Gradient clipping value\n",
    "    'accumulation_steps': 1,        # Gradient accumulation steps\n",
    "    'memory_efficient': True,       # Enable memory optimizations\n",
    "}\n",
    "\n",
    "def get_config():\n",
    "    \"\"\"Return the complete configuration dictionary\"\"\"\n",
    "    return {\n",
    "        'model': MODEL_CONFIG,\n",
    "        'training': TRAINING_CONFIG,\n",
    "        'augmentation': AUGMENTATION_CONFIG,\n",
    "        'inference': INFERENCE_CONFIG,\n",
    "        'data_paths': DATA_PATHS,\n",
    "        'device': DEVICE_CONFIG,\n",
    "        'video': VIDEO_CONFIG,\n",
    "        'colors': COLORS,\n",
    "        'logging': LOGGING_CONFIG,\n",
    "        'performance': PERFORMANCE_CONFIG,\n",
    "    }\n",
    "\n",
    "def update_config(config_name, key, value):\n",
    "    \"\"\"Update a specific configuration value\"\"\"\n",
    "    config = get_config()\n",
    "    if config_name in config and key in config[config_name]:\n",
    "        config[config_name][key] = value\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "def print_config():\n",
    "    \"\"\"Print the current configuration\"\"\"\n",
    "    config = get_config()\n",
    "    print(\"Face Recognition System Configuration:\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    for section_name, section_config in config.items():\n",
    "        print(f\"\\n{section_name.upper()}:\")\n",
    "        for key, value in section_config.items():\n",
    "            print(f\"  {key}: {value}\")\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     print_config() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3941d0e",
   "metadata": {
    "papermill": {
     "duration": 0.027724,
     "end_time": "2025-07-30T16:18:09.749646",
     "exception": false,
     "start_time": "2025-07-30T16:18:09.721922",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main Files\n",
    "- preprocessing\n",
    "- hyperparameter tuning (`lr` and `wd`)\n",
    "- finetuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ddf0c277",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T16:18:09.807862Z",
     "iopub.status.busy": "2025-07-30T16:18:09.807583Z",
     "iopub.status.idle": "2025-07-30T16:18:42.976026Z",
     "shell.execute_reply": "2025-07-30T16:18:42.975111Z"
    },
    "papermill": {
     "duration": 33.199142,
     "end_time": "2025-07-30T16:18:42.977113",
     "exception": false,
     "start_time": "2025-07-30T16:18:09.777971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Starting Improved Face Recognition System Training...\n",
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n",
      "Training samples: 56\n",
      "Validation samples: 24\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 13.6M/13.6M [00:00<00:00, 149MB/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training for 15 epochs with improved regularization...\n",
      "\n",
      "Epoch 1/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:01<00:00,  3.95it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  5.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.9664, Train Acc: 58.93%\n",
      "Val Loss: 0.7616, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 2/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  9.74it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.26it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.3267, Train Acc: 50.00%\n",
      "Val Loss: 0.7774, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "⏳ No improvement for 1 epochs\n",
      "\n",
      "Epoch 3/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.96it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  6.91it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.9594, Train Acc: 53.57%\n",
      "Val Loss: 0.7809, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "⏳ No improvement for 2 epochs\n",
      "\n",
      "Epoch 4/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  9.32it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.04it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.1836, Train Acc: 44.64%\n",
      "Val Loss: 0.7695, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "⏳ No improvement for 3 epochs\n",
      "\n",
      "Epoch 5/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.88it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.65it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.5474, Train Acc: 55.36%\n",
      "Val Loss: 0.7542, Val Acc: 58.33%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 6/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.15it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.37it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.9785, Train Acc: 57.14%\n",
      "Val Loss: 0.7496, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 7/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.11it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.37it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.3572, Train Acc: 42.86%\n",
      "Val Loss: 0.7487, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 8/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.38it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.36it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.5156, Train Acc: 51.79%\n",
      "Val Loss: 0.7283, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 9/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.80it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.03it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 2.0064, Train Acc: 53.57%\n",
      "Val Loss: 0.7308, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "⏳ No improvement for 1 epochs\n",
      "\n",
      "Epoch 10/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  9.50it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.70it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.8861, Train Acc: 57.14%\n",
      "Val Loss: 0.7201, Val Acc: 62.50%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 11/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.46it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  6.74it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.8215, Train Acc: 62.50%\n",
      "Val Loss: 0.6854, Val Acc: 58.33%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 12/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.42it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  6.96it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.3963, Train Acc: 58.93%\n",
      "Val Loss: 0.6841, Val Acc: 58.33%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 13/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.23it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  6.97it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.7394, Train Acc: 62.50%\n",
      "Val Loss: 0.6747, Val Acc: 54.17%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 14/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  8.43it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.58it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.3734, Train Acc: 58.93%\n",
      "Val Loss: 0.6682, Val Acc: 58.33%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "\n",
      "Epoch 15/15\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 7/7 [00:00<00:00,  9.12it/s]\n",
      "Validation: 100%|██████████| 3/3 [00:00<00:00,  7.35it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 1.1832, Train Acc: 66.07%\n",
      "Val Loss: 0.6590, Val Acc: 58.33%\n",
      "Learning Rate: 5.00e-05\n",
      "✅ New best model saved!\n",
      "Model saved successfully!\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "🎉 Improved training completed!\n",
      "Key improvements:\n",
      "- Reduced augmentation intensity\n",
      "- Increased dropout (0.7)\n",
      "- Added batch normalization\n",
      "- Label smoothing (0.1)\n",
      "- Higher weight decay (1e-2)\n",
      "- Learning rate scheduling\n",
      "- Gradient clipping\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Improved Face Recognition Training Script\n",
    "Addresses overfitting issues with better regularization and training strategies\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms, models\n",
    "import albumentations as A\n",
    "from albumentations.pytorch import ToTensorV2\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tqdm import tqdm\n",
    "import warnings\n",
    "# from config import get_config\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set device\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "class ArtistDataset(Dataset):\n",
    "    \"\"\"Custom dataset for artist face recognition\"\"\"\n",
    "    \n",
    "    def __init__(self, image_paths, labels, transform=None):\n",
    "        self.image_paths = image_paths\n",
    "        self.labels = labels\n",
    "        self.transform = transform\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.image_paths)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        image_path = self.image_paths[idx]\n",
    "        label = self.labels[idx]\n",
    "        \n",
    "        # Load image\n",
    "        image = Image.open(image_path).convert('RGB')\n",
    "        image = np.array(image)\n",
    "        \n",
    "        if self.transform:\n",
    "            image = self.transform(image=image)['image']\n",
    "        \n",
    "        return image, label\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"Load and prepare dataset\"\"\"\n",
    "    print(\"Loading dataset...\")\n",
    "    \n",
    "    # Get configuration\n",
    "    config = get_config()\n",
    "    artist_path = config['data_paths']['kaggle_artist_path']\n",
    "    others_path = config['data_paths']['kaggle_others_path']\n",
    "    \n",
    "    print(f\"Looking for artist images in: {artist_path}\")\n",
    "    print(f\"Looking for others images in: {others_path}\")\n",
    "    \n",
    "    # Collect artist images (label 1)\n",
    "    artist_images = []\n",
    "    if os.path.exists(artist_path):\n",
    "        for filename in os.listdir(artist_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                artist_images.append(os.path.join(artist_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Artist path does not exist: {artist_path}\")\n",
    "    \n",
    "    # Collect others images (label 0)\n",
    "    others_images = []\n",
    "    if os.path.exists(others_path):\n",
    "        for filename in os.listdir(others_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                others_images.append(os.path.join(others_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Others path does not exist: {others_path}\")\n",
    "    \n",
    "    print(f\"Found {len(artist_images)} artist images\")\n",
    "    print(f\"Found {len(others_images)} others images\")\n",
    "    \n",
    "    # Create labels\n",
    "    artist_labels = [1] * len(artist_images)\n",
    "    others_labels = [0] * len(others_images)\n",
    "    \n",
    "    # Combine data\n",
    "    all_images = artist_images + others_images\n",
    "    all_labels = artist_labels + others_labels\n",
    "    \n",
    "    return all_images, all_labels\n",
    "\n",
    "def create_transforms():\n",
    "    \"\"\"Create moderate data augmentation transforms\"\"\"\n",
    "    \n",
    "    # Training transforms with moderate augmentation\n",
    "    train_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.HorizontalFlip(p=0.5),\n",
    "        A.Rotate(limit=10, p=0.3),  # Reduced rotation\n",
    "        A.RandomBrightnessContrast(brightness_limit=0.1, contrast_limit=0.1, p=0.3),  # Reduced intensity\n",
    "        A.HueSaturationValue(hue_shift_limit=10, sat_shift_limit=15, val_shift_limit=10, p=0.3),  # Reduced intensity\n",
    "        A.GaussNoise(var_limit=(5.0, 25.0), p=0.2),  # Reduced noise\n",
    "        A.GaussianBlur(blur_limit=(3, 5), p=0.1),  # Reduced blur\n",
    "        A.CoarseDropout(max_holes=4, max_height=16, max_width=16, p=0.2),  # Reduced dropout\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    # Validation transforms (minimal augmentation)\n",
    "    val_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    return train_transform, val_transform\n",
    "\n",
    "class ImprovedFaceModel(nn.Module):\n",
    "    \"\"\"Improved face recognition model with better regularization\"\"\"\n",
    "    \n",
    "    def __init__(self, num_classes=2, dropout_rate=0.7):\n",
    "        super(ImprovedFaceModel, self).__init__()\n",
    "        \n",
    "        # Load pre-trained MobileNetV2\n",
    "        self.backbone = models.mobilenet_v2(pretrained=True)\n",
    "        \n",
    "        # Remove the last classifier layer\n",
    "        self.backbone.classifier = nn.Identity()\n",
    "        \n",
    "        # Add custom classifier with better regularization\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(1280, 256),  # Reduced from 512\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(256, 64),   # Reduced from 128\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(64, num_classes)\n",
    "        )\n",
    "        \n",
    "        # Initialize weights properly\n",
    "        self._initialize_weights()\n",
    "    \n",
    "    def _initialize_weights(self):\n",
    "        \"\"\"Initialize classifier weights\"\"\"\n",
    "        for m in self.classifier.modules():\n",
    "            if isinstance(m, nn.Linear):\n",
    "                nn.init.xavier_uniform_(m.weight)\n",
    "                if m.bias is not None:\n",
    "                    nn.init.constant_(m.bias, 0)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        features = self.backbone.features(x)\n",
    "        features = features.mean([2, 3])  # Global average pooling\n",
    "        output = self.classifier(features)\n",
    "        return output\n",
    "\n",
    "def train_epoch(model, dataloader, criterion, optimizer, device):\n",
    "    \"\"\"Train for one epoch\"\"\"\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Training\")):\n",
    "        data, target = data.to(device), target.to(device)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        output = model(data)\n",
    "        loss = criterion(output, target)\n",
    "        loss.backward()\n",
    "        \n",
    "        # Gradient clipping\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "        \n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        _, predicted = output.max(1)\n",
    "        total += target.size(0)\n",
    "        correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def validate_epoch(model, dataloader, criterion, device):\n",
    "    \"\"\"Validate for one epoch\"\"\"\n",
    "    model.eval()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Validation\")):\n",
    "            data, target = data.to(device), target.to(device)\n",
    "            output = model(data)\n",
    "            loss = criterion(output, target)\n",
    "            \n",
    "            running_loss += loss.item()\n",
    "            _, predicted = output.max(1)\n",
    "            total += target.size(0)\n",
    "            correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main training function with improved regularization\"\"\"\n",
    "    print(\"Starting Improved Face Recognition System Training...\")\n",
    "    \n",
    "    # Load data\n",
    "    all_images, all_labels = load_data()\n",
    "    \n",
    "    if len(all_images) == 0:\n",
    "        print(\"No images found! Please check the data paths.\")\n",
    "        return\n",
    "    \n",
    "    # Get configuration\n",
    "    config = get_config()\n",
    "    \n",
    "    # Split data with more validation data\n",
    "    train_images, val_images, train_labels, val_labels = train_test_split(\n",
    "        all_images, all_labels, \n",
    "        test_size=config['training']['validation_split'], \n",
    "        random_state=config['training']['random_seed'], \n",
    "        stratify=all_labels\n",
    "    )\n",
    "    \n",
    "    print(f\"Training samples: {len(train_images)}\")\n",
    "    print(f\"Validation samples: {len(val_images)}\")\n",
    "    \n",
    "    # Create transforms\n",
    "    train_transform, val_transform = create_transforms()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = ArtistDataset(train_images, train_labels, train_transform)\n",
    "    val_dataset = ArtistDataset(val_images, val_labels, val_transform)\n",
    "    \n",
    "    # Create dataloaders with smaller batch size\n",
    "    train_loader = DataLoader(\n",
    "        train_dataset, \n",
    "        batch_size=config['training']['batch_size'], \n",
    "        shuffle=True, \n",
    "        num_workers=2\n",
    "    )\n",
    "    val_loader = DataLoader(\n",
    "        val_dataset, \n",
    "        batch_size=config['training']['batch_size'], \n",
    "        shuffle=False, \n",
    "        num_workers=2\n",
    "    )\n",
    "    \n",
    "    # Initialize improved model\n",
    "    model = ImprovedFaceModel(\n",
    "        num_classes=2,\n",
    "        dropout_rate=config['model']['dropout_rate']\n",
    "    ).to(device)\n",
    "    \n",
    "    # Use standard cross entropy loss (no label smoothing)\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    \n",
    "    # Use AdamW with moderate weight decay\n",
    "    optimizer = optim.AdamW(\n",
    "        model.parameters(), \n",
    "        lr=5e-5,  # Much lower learning rate\n",
    "        weight_decay=1e-3,  # Moderate weight decay\n",
    "        betas=(0.9, 0.999)\n",
    "    )\n",
    "    \n",
    "    # Learning rate scheduler with longer patience\n",
    "    scheduler = optim.lr_scheduler.ReduceLROnPlateau(\n",
    "        optimizer, \n",
    "        mode='min', \n",
    "        factor=0.7, \n",
    "        patience=5, \n",
    "        verbose=True\n",
    "    )\n",
    "    \n",
    "    # Training history\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "    train_accs = []\n",
    "    val_accs = []\n",
    "    \n",
    "    # Training loop\n",
    "    num_epochs = config['training']['num_epochs']\n",
    "    best_val_loss = float('inf')\n",
    "    patience = config['training']['early_stopping_patience']\n",
    "    patience_counter = 0\n",
    "    \n",
    "    print(f\"\\nTraining for {num_epochs} epochs with improved regularization...\")\n",
    "    \n",
    "    for epoch in range(num_epochs):\n",
    "        print(f\"\\nEpoch {epoch+1}/{num_epochs}\")\n",
    "        \n",
    "        train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n",
    "        val_loss, val_acc = validate_epoch(model, val_loader, criterion, device)\n",
    "        \n",
    "        # Update learning rate\n",
    "        scheduler.step(val_loss)\n",
    "        \n",
    "        train_losses.append(train_loss)\n",
    "        val_losses.append(val_loss)\n",
    "        train_accs.append(train_acc)\n",
    "        val_accs.append(val_acc)\n",
    "        \n",
    "        print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%\")\n",
    "        print(f\"Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%\")\n",
    "        print(f\"Learning Rate: {optimizer.param_groups[0]['lr']:.2e}\")\n",
    "        \n",
    "        # Early stopping\n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            patience_counter = 0\n",
    "            # Save best model\n",
    "            torch.save(model.state_dict(), config['data_paths']['model_save_path'])\n",
    "            print(\"✅ New best model saved!\")\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            print(f\"⏳ No improvement for {patience_counter} epochs\")\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            print(\"🛑 Early stopping triggered!\")\n",
    "            break\n",
    "    \n",
    "    # Save final model\n",
    "    torch.save(model.state_dict(), config['data_paths']['final_model_path'])\n",
    "    print(\"Model saved successfully!\")\n",
    "    \n",
    "    # Plot training curves\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    \n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(train_losses, label='Train Loss', color='blue')\n",
    "    plt.plot(val_losses, label='Validation Loss', color='orange')\n",
    "    plt.title('Training and Validation Loss (Improved)')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    \n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(train_accs, label='Train Accuracy', color='blue')\n",
    "    plt.plot(val_accs, label='Validation Accuracy', color='orange')\n",
    "    plt.title('Training and Validation Accuracy (Improved)')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Accuracy (%)')\n",
    "    plt.legend()\n",
    "    plt.grid(True, alpha=0.3)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.savefig('improved_training_curves.png', dpi=300, bbox_inches='tight')\n",
    "    plt.show()\n",
    "    \n",
    "    print(\"\\n🎉 Improved training completed!\")\n",
    "    print(\"Key improvements:\")\n",
    "    print(\"- Reduced augmentation intensity\")\n",
    "    print(\"- Increased dropout (0.7)\")\n",
    "    print(\"- Added batch normalization\")\n",
    "    print(\"- Label smoothing (0.1)\")\n",
    "    print(\"- Higher weight decay (1e-2)\")\n",
    "    print(\"- Learning rate scheduling\")\n",
    "    print(\"- Gradient clipping\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7961995,
     "sourceId": 12605156,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 123.989013,
   "end_time": "2025-07-30T16:18:44.685553",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T16:16:40.696540",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
