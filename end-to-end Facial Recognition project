{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "475b9c90",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-30T13:51:38.938257Z",
     "iopub.status.busy": "2025-07-30T13:51:38.937856Z",
     "iopub.status.idle": "2025-07-30T13:52:52.208500Z",
     "shell.execute_reply": "2025-07-30T13:52:52.207777Z"
    },
    "papermill": {
     "duration": 73.275575,
     "end_time": "2025-07-30T13:52:52.210004",
     "exception": false,
     "start_time": "2025-07-30T13:51:38.934429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m74.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m77.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m48.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m30.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m13.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m87.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f78d2e29",
   "metadata": {
    "papermill": {
     "duration": 0.027048,
     "end_time": "2025-07-30T13:52:52.259609",
     "exception": false,
     "start_time": "2025-07-30T13:52:52.232561",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a5106767",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T13:52:52.321686Z",
     "iopub.status.busy": "2025-07-30T13:52:52.321433Z",
     "iopub.status.idle": "2025-07-30T13:52:52.334523Z",
     "shell.execute_reply": "2025-07-30T13:52:52.333935Z"
    },
    "papermill": {
     "duration": 0.045009,
     "end_time": "2025-07-30T13:52:52.335786",
     "exception": false,
     "start_time": "2025-07-30T13:52:52.290777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Face Recognition System\n",
    "Contains all the key parameters for easy tuning and customization.\n",
    "\"\"\"\n",
    "\n",
    "# Model Configuration\n",
    "MODEL_CONFIG = {\n",
    "    'model_name': 'mobilenet_v2',\n",
    "    'num_classes': 2,\n",
    "    'input_size': 224,\n",
    "    'dropout_rate': 0.5,\n",
    "    'pretrained': True\n",
    "}\n",
    "\n",
    "# Training Configuration\n",
    "TRAINING_CONFIG = {\n",
    "    'batch_size': 16,  # Optimized for 16GB GPU\n",
    "    'num_epochs': 20,\n",
    "    'early_stopping_patience': 7,\n",
    "    'learning_rate_range': (1e-5, 1e-2),  # For Optuna optimization\n",
    "    'weight_decay_range': (1e-5, 1e-2),   # For Optuna optimization\n",
    "    'optuna_trials': 10,\n",
    "    'validation_split': 0.2,\n",
    "    'random_seed': 42\n",
    "}\n",
    "\n",
    "# Data Augmentation Configuration\n",
    "AUGMENTATION_CONFIG = {\n",
    "    'train_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('HorizontalFlip', {'p': 0.5}),\n",
    "        ('VerticalFlip', {'p': 0.1}),\n",
    "        ('RandomRotate90', {'p': 0.3}),\n",
    "        ('Rotate', {'limit': 15, 'p': 0.5}),\n",
    "        ('RandomBrightnessContrast', {'brightness_limit': 0.2, 'contrast_limit': 0.2, 'p': 0.5}),\n",
    "        ('HueSaturationValue', {'hue_shift_limit': 20, 'sat_shift_limit': 30, 'val_shift_limit': 20, 'p': 0.5}),\n",
    "        ('GaussNoise', {'var_limit': (10.0, 50.0), 'p': 0.3}),\n",
    "        ('GaussianBlur', {'blur_limit': (3, 7), 'p': 0.2}),\n",
    "        ('ElasticTransform', {'alpha': 1, 'sigma': 50, 'alpha_affine': 50, 'p': 0.2}),\n",
    "        ('GridDistortion', {'num_steps': 5, 'distort_limit': 0.3, 'p': 0.2}),\n",
    "        ('OpticalDistortion', {'distort_limit': 0.2, 'shift_limit': 0.15, 'p': 0.2}),\n",
    "        ('CoarseDropout', {'max_holes': 8, 'max_height': 32, 'max_width': 32, 'p': 0.3}),\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ],\n",
    "    'val_transforms': [\n",
    "        ('Resize', {'height': 224, 'width': 224}),\n",
    "        ('Normalize', {'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}),\n",
    "    ]\n",
    "}\n",
    "\n",
    "# Inference Configuration\n",
    "INFERENCE_CONFIG = {\n",
    "    'confidence_threshold': 0.9,  # Threshold for artist detection\n",
    "    'face_detection_confidence': 0.9,  # MTCNN confidence threshold\n",
    "    'min_face_size': 20,  # Minimum face size for detection\n",
    "    'scale_factor': 0.709,  # MTCNN scale factor\n",
    "    'video_frame_skip': 3,  # Process every Nth frame for efficiency\n",
    "}\n",
    "\n",
    "# Data Paths\n",
    "DATA_PATHS = {\n",
    "    'kaggle_artist_path': '/kaggle/input/input-data/Davido',\n",
    "    'kaggle_others_path': '/kaggle/input/input-data/Unknown',\n",
    "    'model_save_path': 'artist_model_best.pth',\n",
    "    'final_model_path': 'artist_model_final.pth',\n",
    "    'training_curves_path': 'training_curves.png'\n",
    "}\n",
    "\n",
    "# Device Configuration\n",
    "DEVICE_CONFIG = {\n",
    "    'use_gpu': True,\n",
    "    'num_workers': 2,  # For data loading\n",
    "    'pin_memory': True,\n",
    "}\n",
    "\n",
    "# Video Processing Configuration\n",
    "VIDEO_CONFIG = {\n",
    "    'output_fps': 30,\n",
    "    'output_codec': 'mp4v',\n",
    "    'draw_boxes': True,\n",
    "    'show_probabilities': True,\n",
    "    'box_thickness': 2,\n",
    "    'text_scale': 0.5,\n",
    "    'text_thickness': 2,\n",
    "}\n",
    "\n",
    "# Colors for visualization\n",
    "COLORS = {\n",
    "    'artist_face': (0, 255, 0),    # Green for artist\n",
    "    'other_face': (0, 0, 255),     # Red for others\n",
    "    'text_color': (255, 255, 255), # White text\n",
    "}\n",
    "\n",
    "# Logging Configuration\n",
    "LOGGING_CONFIG = {\n",
    "    'log_level': 'INFO',\n",
    "    'log_format': '%(asctime)s - %(levelname)s - %(message)s',\n",
    "    'save_logs': True,\n",
    "    'log_file': 'face_recognition.log'\n",
    "}\n",
    "\n",
    "# Performance Configuration\n",
    "PERFORMANCE_CONFIG = {\n",
    "    'enable_mixed_precision': True,  # Use mixed precision training if available\n",
    "    'gradient_clipping': 1.0,       # Gradient clipping value\n",
    "    'accumulation_steps': 1,        # Gradient accumulation steps\n",
    "    'memory_efficient': True,       # Enable memory optimizations\n",
    "}\n",
    "\n",
    "def get_config():\n",
    "    \"\"\"Return the complete configuration dictionary\"\"\"\n",
    "    return {\n",
    "        'model': MODEL_CONFIG,\n",
    "        'training': TRAINING_CONFIG,\n",
    "        'augmentation': AUGMENTATION_CONFIG,\n",
    "        'inference': INFERENCE_CONFIG,\n",
    "        'data_paths': DATA_PATHS,\n",
    "        'device': DEVICE_CONFIG,\n",
    "        'video': VIDEO_CONFIG,\n",
    "        'colors': COLORS,\n",
    "        'logging': LOGGING_CONFIG,\n",
    "        'performance': PERFORMANCE_CONFIG,\n",
    "    }\n",
    "\n",
    "def update_config(config_name, key, value):\n",
    "    \"\"\"Update a specific configuration value\"\"\"\n",
    "    config = get_config()\n",
    "    if config_name in config and key in config[config_name]:\n",
    "        config[config_name][key] = value\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "def print_config():\n",
    "    \"\"\"Print the current configuration\"\"\"\n",
    "    config = get_config()\n",
    "    print(\"Face Recognition System Configuration:\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    for section_name, section_config in config.items():\n",
    "        print(f\"\\n{section_name.upper()}:\")\n",
    "        for key, value in section_config.items():\n",
    "            print(f\"  {key}: {value}\")\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     print_config() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4ec476c",
   "metadata": {
    "papermill": {
     "duration": 0.021064,
     "end_time": "2025-07-30T13:52:52.378089",
     "exception": false,
     "start_time": "2025-07-30T13:52:52.357025",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Main Files\n",
    "- preprocessing\n",
    "- hyperparameter tuning (`lr` and `wd`)\n",
    "- finetuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7e650aae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-30T13:52:52.419956Z",
     "iopub.status.busy": "2025-07-30T13:52:52.419707Z",
     "iopub.status.idle": "2025-07-30T13:55:46.200859Z",
     "shell.execute_reply": "2025-07-30T13:55:46.199921Z"
    },
    "papermill": {
     "duration": 173.803916,
     "end_time": "2025-07-30T13:55:46.202265",
     "exception": false,
     "start_time": "2025-07-30T13:52:52.398349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-07-30 13:53:04,412] A new study created in memory with name: no-name-5bf2bad1-d6f6-4299-9e65-d15eb780e201\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device: cuda\n",
      "Starting Face Recognition System Training...\n",
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n",
      "Training samples: 64\n",
      "Validation samples: 16\n",
      "Starting hyperparameter optimization...\n",
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/mobilenet_v2-b0353104.pth\" to /root/.cache/torch/hub/checkpoints/mobilenet_v2-b0353104.pth\n",
      "100%|██████████| 13.6M/13.6M [00:00<00:00, 189MB/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  2.25it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  1.83it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.33it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.61it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.39it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.43it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.57it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.25it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.03it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.28it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.29it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.06it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.63it/s]\n",
      "[I 2025-07-30 13:53:19,305] Trial 0 finished with value: 0.646525502204895 and parameters: {'lr': 0.004366365537482323, 'weight_decay': 0.0018080762140690863}. Best is trial 0 with value: 0.646525502204895.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.40it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.03it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.50it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.97it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.93it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.87it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.95it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.99it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.23it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.19it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.74it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n",
      "[I 2025-07-30 13:53:33,537] Trial 1 finished with value: 0.6535629034042358 and parameters: {'lr': 8.057813261907859e-05, 'weight_decay': 0.0007830507628249136}. Best is trial 0 with value: 0.646525502204895.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.48it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.51it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.48it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.31it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.59it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.77it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.84it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.70it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "[I 2025-07-30 13:53:42,736] Trial 2 finished with value: 0.7129576206207275 and parameters: {'lr': 0.0015120394544477994, 'weight_decay': 0.001878782130899444}. Best is trial 0 with value: 0.646525502204895.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.82it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.71it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.28it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.19it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.35it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.80it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.01it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.62it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.22it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n",
      "[I 2025-07-30 13:53:53,802] Trial 3 finished with value: 0.914260745048523 and parameters: {'lr': 0.0012541497721615142, 'weight_decay': 5.385043371198124e-05}. Best is trial 0 with value: 0.646525502204895.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.17it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.58it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.79it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.66it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.26it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.85it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.24it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.93it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.92it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.61it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.72it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.70it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.90it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "[I 2025-07-30 13:54:07,911] Trial 4 finished with value: 0.6585215926170349 and parameters: {'lr': 3.991687765620914e-05, 'weight_decay': 0.005551885621861048}. Best is trial 0 with value: 0.646525502204895.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.02it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.53it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.02it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.58it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.64it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.62it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.81it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.22it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.67it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  4.00it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.65it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.60it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.57it/s]\n",
      "[I 2025-07-30 13:54:22,381] Trial 5 finished with value: 0.6413488984107971 and parameters: {'lr': 5.015820065464703e-05, 'weight_decay': 0.003889522266862292}. Best is trial 5 with value: 0.6413488984107971.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.05it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.80it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.94it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.00it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.81it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.24it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.91it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.53it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.96it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.87it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.86it/s]\n",
      "[I 2025-07-30 13:54:36,387] Trial 6 finished with value: 0.6288875341415405 and parameters: {'lr': 0.00023751036958617904, 'weight_decay': 3.9406949948567916e-05}. Best is trial 6 with value: 0.6288875341415405.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.95it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.83it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.35it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.36it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.26it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.69it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.69it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.75it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.65it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.04it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.40it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.17it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n",
      "[I 2025-07-30 13:54:49,433] Trial 7 finished with value: 0.5815681219100952 and parameters: {'lr': 0.00015014305714178505, 'weight_decay': 0.003492561715127929}. Best is trial 7 with value: 0.5815681219100952.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.97it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.21it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.71it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.52it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.35it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.56it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.27it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.29it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.49it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.60it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.29it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.66it/s]\n",
      "[I 2025-07-30 13:55:02,752] Trial 8 finished with value: 0.6655406951904297 and parameters: {'lr': 0.005008600379704152, 'weight_decay': 0.0029511635510261103}. Best is trial 7 with value: 0.5815681219100952.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading dataset...\n",
      "Looking for artist images in: /kaggle/input/input-data/Davido\n",
      "Looking for others images in: /kaggle/input/input-data/Unknown\n",
      "Found 50 artist images\n",
      "Found 30 others images\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.65it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.81it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.05it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.91it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.15it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n",
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.05it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.73it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.82it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.95it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.62it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.61it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.65it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n",
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.81it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.54it/s]\n",
      "[I 2025-07-30 13:55:17,046] Trial 9 finished with value: 0.6599920392036438 and parameters: {'lr': 2.247610910893822e-05, 'weight_decay': 0.003843647124250723}. Best is trial 7 with value: 0.5815681219100952.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best hyperparameters: {'lr': 0.00015014305714178505, 'weight_decay': 0.003492561715127929}\n",
      "Training with best hyperparameters...\n",
      "\n",
      "Epoch 1/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.99it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.77it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.7137, Train Acc: 54.69%\n",
      "Val Loss: 0.6643, Val Acc: 62.50%\n",
      "\n",
      "Epoch 2/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.95it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.68it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6877, Train Acc: 60.94%\n",
      "Val Loss: 0.6487, Val Acc: 62.50%\n",
      "\n",
      "Epoch 3/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.79it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.74it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6621, Train Acc: 60.94%\n",
      "Val Loss: 0.6376, Val Acc: 62.50%\n",
      "\n",
      "Epoch 4/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.07it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.73it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6006, Train Acc: 67.19%\n",
      "Val Loss: 0.6248, Val Acc: 62.50%\n",
      "\n",
      "Epoch 5/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.86it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6235, Train Acc: 62.50%\n",
      "Val Loss: 0.6137, Val Acc: 62.50%\n",
      "\n",
      "Epoch 6/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.18it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.84it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.6028, Train Acc: 64.06%\n",
      "Val Loss: 0.5995, Val Acc: 62.50%\n",
      "\n",
      "Epoch 7/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.08it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.72it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5534, Train Acc: 67.19%\n",
      "Val Loss: 0.5832, Val Acc: 62.50%\n",
      "\n",
      "Epoch 8/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.24it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.85it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5857, Train Acc: 65.62%\n",
      "Val Loss: 0.5729, Val Acc: 62.50%\n",
      "\n",
      "Epoch 9/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.67it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.5216, Train Acc: 64.06%\n",
      "Val Loss: 0.5618, Val Acc: 62.50%\n",
      "\n",
      "Epoch 10/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.28it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.75it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4807, Train Acc: 67.19%\n",
      "Val Loss: 0.5418, Val Acc: 68.75%\n",
      "\n",
      "Epoch 11/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.78it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.4375, Train Acc: 71.88%\n",
      "Val Loss: 0.5265, Val Acc: 62.50%\n",
      "\n",
      "Epoch 12/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.26it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.3969, Train Acc: 78.12%\n",
      "Val Loss: 0.5112, Val Acc: 75.00%\n",
      "\n",
      "Epoch 13/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.85it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.80it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.3634, Train Acc: 89.06%\n",
      "Val Loss: 0.4856, Val Acc: 81.25%\n",
      "\n",
      "Epoch 14/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:01<00:00,  3.61it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.63it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.3239, Train Acc: 90.62%\n",
      "Val Loss: 0.4726, Val Acc: 75.00%\n",
      "\n",
      "Epoch 15/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.04it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.76it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.3230, Train Acc: 92.19%\n",
      "Val Loss: 0.4915, Val Acc: 75.00%\n",
      "\n",
      "Epoch 16/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.15it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.86it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2312, Train Acc: 96.88%\n",
      "Val Loss: 0.4787, Val Acc: 75.00%\n",
      "\n",
      "Epoch 17/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.20it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.83it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.2743, Train Acc: 90.62%\n",
      "Val Loss: 0.4893, Val Acc: 75.00%\n",
      "\n",
      "Epoch 18/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.25it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.70it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.1688, Train Acc: 100.00%\n",
      "Val Loss: 0.5245, Val Acc: 75.00%\n",
      "\n",
      "Epoch 19/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.27it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.79it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.1423, Train Acc: 96.88%\n",
      "Val Loss: 0.5784, Val Acc: 68.75%\n",
      "\n",
      "Epoch 20/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training: 100%|██████████| 4/4 [00:00<00:00,  4.11it/s]\n",
      "Validation: 100%|██████████| 1/1 [00:00<00:00,  2.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Loss: 0.0847, Train Acc: 98.44%\n",
      "Val Loss: 0.6196, Val Acc: 68.75%\n",
      "Model saved successfully!\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training completed successfully!\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Face Recognition System - Kaggle Training Script\n",
    "This script is designed to run on Kaggle notebook with P100 GPU (16GB) and 32GB RAM.\n",
    "It fine-tunes an efficient face recognition model to identify a specific artist.\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from torchvision import transforms, models\n",
    "import albumentations as A\n",
    "from albumentations.pytorch import ToTensorV2\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tqdm import tqdm\n",
    "import warnings\n",
    "# from config import get_config\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set device\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "class ArtistDataset(Dataset):\n",
    "    \"\"\"Custom dataset for artist face recognition\"\"\"\n",
    "    \n",
    "    def __init__(self, image_paths, labels, transform=None):\n",
    "        self.image_paths = image_paths\n",
    "        self.labels = labels\n",
    "        self.transform = transform\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.image_paths)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        image_path = self.image_paths[idx]\n",
    "        label = self.labels[idx]\n",
    "        \n",
    "        # Load image\n",
    "        image = Image.open(image_path).convert('RGB')\n",
    "        image = np.array(image)\n",
    "        \n",
    "        if self.transform:\n",
    "            image = self.transform(image=image)['image']\n",
    "        \n",
    "        return image, label\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"Load and prepare dataset\"\"\"\n",
    "    print(\"Loading dataset...\")\n",
    "    \n",
    "    # Get configuration\n",
    "    config = get_config()\n",
    "    artist_path = config['data_paths']['kaggle_artist_path']\n",
    "    others_path = config['data_paths']['kaggle_others_path']\n",
    "    \n",
    "    print(f\"Looking for artist images in: {artist_path}\")\n",
    "    print(f\"Looking for others images in: {others_path}\")\n",
    "    \n",
    "    # Collect artist images (label 1)\n",
    "    artist_images = []\n",
    "    if os.path.exists(artist_path):\n",
    "        for filename in os.listdir(artist_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                artist_images.append(os.path.join(artist_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Artist path does not exist: {artist_path}\")\n",
    "    \n",
    "    # Collect others images (label 0)\n",
    "    others_images = []\n",
    "    if os.path.exists(others_path):\n",
    "        for filename in os.listdir(others_path):\n",
    "            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n",
    "                others_images.append(os.path.join(others_path, filename))\n",
    "    else:\n",
    "        print(f\"Warning: Others path does not exist: {others_path}\")\n",
    "    \n",
    "    print(f\"Found {len(artist_images)} artist images\")\n",
    "    print(f\"Found {len(others_images)} others images\")\n",
    "    \n",
    "    # Create labels\n",
    "    artist_labels = [1] * len(artist_images)\n",
    "    others_labels = [0] * len(others_images)\n",
    "    \n",
    "    # Combine data\n",
    "    all_images = artist_images + others_images\n",
    "    all_labels = artist_labels + others_labels\n",
    "    \n",
    "    return all_images, all_labels\n",
    "\n",
    "def create_transforms():\n",
    "    \"\"\"Create heavy data augmentation transforms\"\"\"\n",
    "    \n",
    "    # Training transforms with heavy augmentation\n",
    "    train_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.HorizontalFlip(p=0.5),\n",
    "        A.VerticalFlip(p=0.1),\n",
    "        A.RandomRotate90(p=0.3),\n",
    "        A.Rotate(limit=15, p=0.5),\n",
    "        A.RandomBrightnessContrast(brightness_limit=0.2, contrast_limit=0.2, p=0.5),\n",
    "        A.HueSaturationValue(hue_shift_limit=20, sat_shift_limit=30, val_shift_limit=20, p=0.5),\n",
    "        A.GaussNoise(var_limit=(10.0, 50.0), p=0.3),\n",
    "        A.GaussianBlur(blur_limit=(3, 7), p=0.2),\n",
    "        A.ElasticTransform(alpha=1, sigma=50, alpha_affine=50, p=0.2),\n",
    "        A.GridDistortion(num_steps=5, distort_limit=0.3, p=0.2),\n",
    "        A.OpticalDistortion(distort_limit=0.2, shift_limit=0.15, p=0.2),\n",
    "        A.CoarseDropout(max_holes=8, max_height=32, max_width=32, p=0.3),\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    # Validation transforms (minimal augmentation)\n",
    "    val_transform = A.Compose([\n",
    "        A.Resize(224, 224),\n",
    "        A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n",
    "        ToTensorV2(),\n",
    "    ])\n",
    "    \n",
    "    return train_transform, val_transform\n",
    "\n",
    "class EfficientFaceModel(nn.Module):\n",
    "    \"\"\"Efficient face recognition model based on MobileNetV2\"\"\"\n",
    "    \n",
    "    def __init__(self, num_classes=2, dropout_rate=0.5):\n",
    "        super(EfficientFaceModel, self).__init__()\n",
    "        \n",
    "        # Load pre-trained MobileNetV2\n",
    "        self.backbone = models.mobilenet_v2(pretrained=True)\n",
    "        \n",
    "        # Remove the last classifier layer\n",
    "        self.backbone.classifier = nn.Identity()\n",
    "        \n",
    "        # Add custom classifier for binary classification\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(1280, 512),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(512, 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Dropout(dropout_rate),\n",
    "            nn.Linear(128, num_classes)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        features = self.backbone.features(x)\n",
    "        features = features.mean([2, 3])  # Global average pooling\n",
    "        output = self.classifier(features)\n",
    "        return output\n",
    "\n",
    "def train_epoch(model, dataloader, criterion, optimizer, device):\n",
    "    \"\"\"Train for one epoch\"\"\"\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Training\")):\n",
    "        data, target = data.to(device), target.to(device)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        output = model(data)\n",
    "        loss = criterion(output, target)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        _, predicted = output.max(1)\n",
    "        total += target.size(0)\n",
    "        correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def validate_epoch(model, dataloader, criterion, device):\n",
    "    \"\"\"Validate for one epoch\"\"\"\n",
    "    model.eval()\n",
    "    running_loss = 0.0\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (data, target) in enumerate(tqdm(dataloader, desc=\"Validation\")):\n",
    "            data, target = data.to(device), target.to(device)\n",
    "            output = model(data)\n",
    "            loss = criterion(output, target)\n",
    "            \n",
    "            running_loss += loss.item()\n",
    "            _, predicted = output.max(1)\n",
    "            total += target.size(0)\n",
    "            correct += predicted.eq(target).sum().item()\n",
    "    \n",
    "    epoch_loss = running_loss / len(dataloader)\n",
    "    epoch_acc = 100. * correct / total\n",
    "    return epoch_loss, epoch_acc\n",
    "\n",
    "def objective(trial):\n",
    "    \"\"\"Optuna objective function for hyperparameter optimization\"\"\"\n",
    "    \n",
    "    # Hyperparameters to optimize\n",
    "    lr = trial.suggest_float('lr', 1e-5, 1e-2, log=True)\n",
    "    weight_decay = trial.suggest_float('weight_decay', 1e-5, 1e-2, log=True)\n",
    "    \n",
    "    # Load data\n",
    "    all_images, all_labels = load_data()\n",
    "    \n",
    "    # Split data\n",
    "    train_images, val_images, train_labels, val_labels = train_test_split(\n",
    "        all_images, all_labels, test_size=0.2, random_state=42, stratify=all_labels\n",
    "    )\n",
    "    \n",
    "    # Create transforms\n",
    "    train_transform, val_transform = create_transforms()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = ArtistDataset(train_images, train_labels, train_transform)\n",
    "    val_dataset = ArtistDataset(val_images, val_labels, val_transform)\n",
    "    \n",
    "    # Create dataloaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, num_workers=2)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False, num_workers=2)\n",
    "    \n",
    "    # Initialize model\n",
    "    model = EfficientFaceModel().to(device)\n",
    "    \n",
    "    # Loss and optimizer\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.AdamW(model.parameters(), lr=lr, weight_decay=weight_decay)\n",
    "    \n",
    "    # Training loop (shorter for hyperparameter tuning)\n",
    "    best_val_loss = float('inf')\n",
    "    patience = 5\n",
    "    patience_counter = 0\n",
    "    \n",
    "    for epoch in range(10):  # Shorter training for hyperparameter tuning\n",
    "        train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n",
    "        val_loss, val_acc = validate_epoch(model, val_loader, criterion, device)\n",
    "        \n",
    "        # Early stopping\n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            patience_counter = 0\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            break\n",
    "    \n",
    "    return best_val_loss\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main training function\"\"\"\n",
    "    print(\"Starting Face Recognition System Training...\")\n",
    "    \n",
    "    # Load data\n",
    "    all_images, all_labels = load_data()\n",
    "    \n",
    "    if len(all_images) == 0:\n",
    "        print(\"No images found! Please check the data paths.\")\n",
    "        return\n",
    "    \n",
    "    # Split data\n",
    "    train_images, val_images, train_labels, val_labels = train_test_split(\n",
    "        all_images, all_labels, test_size=0.2, random_state=42, stratify=all_labels\n",
    "    )\n",
    "    \n",
    "    print(f\"Training samples: {len(train_images)}\")\n",
    "    print(f\"Validation samples: {len(val_images)}\")\n",
    "    \n",
    "    # Create transforms\n",
    "    train_transform, val_transform = create_transforms()\n",
    "    \n",
    "    # Create datasets\n",
    "    train_dataset = ArtistDataset(train_images, train_labels, train_transform)\n",
    "    val_dataset = ArtistDataset(val_images, val_labels, val_transform)\n",
    "    \n",
    "    # Create dataloaders\n",
    "    train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, num_workers=2)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False, num_workers=2)\n",
    "    \n",
    "    # Hyperparameter optimization with Optuna\n",
    "    print(\"Starting hyperparameter optimization...\")\n",
    "    study = optuna.create_study(direction='minimize')\n",
    "    study.optimize(objective, n_trials=10)\n",
    "    \n",
    "    best_params = study.best_params\n",
    "    print(f\"Best hyperparameters: {best_params}\")\n",
    "    \n",
    "    # Train with best hyperparameters\n",
    "    print(\"Training with best hyperparameters...\")\n",
    "    \n",
    "    # Initialize model\n",
    "    model = EfficientFaceModel().to(device)\n",
    "    \n",
    "    # Loss and optimizer with best parameters\n",
    "    criterion = nn.CrossEntropyLoss()\n",
    "    optimizer = optim.AdamW(\n",
    "        model.parameters(), \n",
    "        lr=best_params['lr'], \n",
    "        weight_decay=best_params['weight_decay']\n",
    "    )\n",
    "    \n",
    "    # Training history\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "    train_accs = []\n",
    "    val_accs = []\n",
    "    \n",
    "    # Training loop\n",
    "    num_epochs = 20\n",
    "    best_val_loss = float('inf')\n",
    "    patience = 7\n",
    "    patience_counter = 0\n",
    "    \n",
    "    for epoch in range(num_epochs):\n",
    "        print(f\"\\nEpoch {epoch+1}/{num_epochs}\")\n",
    "        \n",
    "        train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)\n",
    "        val_loss, val_acc = validate_epoch(model, val_loader, criterion, device)\n",
    "        \n",
    "        train_losses.append(train_loss)\n",
    "        val_losses.append(val_loss)\n",
    "        train_accs.append(train_acc)\n",
    "        val_accs.append(val_acc)\n",
    "        \n",
    "        print(f\"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%\")\n",
    "        print(f\"Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.2f}%\")\n",
    "        \n",
    "        # Early stopping\n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            patience_counter = 0\n",
    "            # Save best model\n",
    "            config = get_config()\n",
    "            torch.save(model.state_dict(), config['data_paths']['model_save_path'])\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "            \n",
    "        if patience_counter >= patience:\n",
    "            print(\"Early stopping triggered!\")\n",
    "            break\n",
    "    \n",
    "    # Save final model\n",
    "    config = get_config()\n",
    "    torch.save(model.state_dict(), config['data_paths']['final_model_path'])\n",
    "    print(\"Model saved successfully!\")\n",
    "    \n",
    "    # Plot training curves\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    \n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(train_losses, label='Train Loss')\n",
    "    plt.plot(val_losses, label='Validation Loss')\n",
    "    plt.title('Training and Validation Loss')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(train_accs, label='Train Accuracy')\n",
    "    plt.plot(val_accs, label='Validation Accuracy')\n",
    "    plt.title('Training and Validation Accuracy')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('Accuracy (%)')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    config = get_config()\n",
    "    plt.savefig(config['data_paths']['training_curves_path'], dpi=300, bbox_inches='tight')\n",
    "    plt.show()\n",
    "    \n",
    "    print(\"Training completed successfully!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7961995,
     "sourceId": 12605156,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 253.078876,
   "end_time": "2025-07-30T13:55:47.992132",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-30T13:51:34.913256",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
