{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7c2dd4c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-28T17:24:55.344474Z",
     "iopub.status.busy": "2025-07-28T17:24:55.344185Z",
     "iopub.status.idle": "2025-07-28T17:26:26.879216Z",
     "shell.execute_reply": "2025-07-28T17:26:26.878401Z"
    },
    "papermill": {
     "duration": 91.539249,
     "end_time": "2025-07-28T17:26:26.880799",
     "exception": false,
     "start_time": "2025-07-28T17:24:55.341550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m54.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m52.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m34.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m23.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m48.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q torch torchvision opencv-python numpy Pillow matplotlib albumentations tqdm  scikit-learn tensorboard optuna"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "72d66bb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T17:26:26.950478Z",
     "iopub.status.busy": "2025-07-28T17:26:26.950190Z",
     "iopub.status.idle": "2025-07-28T17:26:26.957572Z",
     "shell.execute_reply": "2025-07-28T17:26:26.956816Z"
    },
    "papermill": {
     "duration": 0.043349,
     "end_time": "2025-07-28T17:26:26.958734",
     "exception": false,
     "start_time": "2025-07-28T17:26:26.915385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Configuration file for Facial Detection System\n",
    "Optimized for Kaggle hardware constraints\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "\n",
    "class Config:\n",
    "    # Hardware constraints for Kaggle\n",
    "    GPU_MEMORY_LIMIT = 14  # GB (leaving 2GB buffer)\n",
    "    RAM_LIMIT = 28  # GB (leaving 4GB buffer)\n",
    "    CPU_CORES = 4\n",
    "    \n",
    "    # Dataset settings\n",
    "    DATASET_NAME = \"davido-recognition\"  # Custom Davido recognition dataset\n",
    "    TRAIN_SPLIT = 0.8\n",
    "    VAL_SPLIT = 0.2\n",
    "    IMAGE_SIZE = (160, 160)  # Standard for face recognition models (e.g., FaceNet)\n",
    "    BATCH_SIZE = 16  # Optimized for P100 GPU memory\n",
    "    DAVIDO_LABEL = \"Davido\"\n",
    "    UNKNOWN_LABEL = \"Unknown\"\n",
    "    CLASS_NAMES = [DAVIDO_LABEL, UNKNOWN_LABEL]\n",
    "    NUM_CLASSES = 2\n",
    "    \n",
    "    # Data augmentation settings\n",
    "    AUGMENTATION_PROBABILITY = 0.8\n",
    "    ROTATION_RANGE = 15\n",
    "    BRIGHTNESS_RANGE = 0.2\n",
    "    CONTRAST_RANGE = 0.2\n",
    "    HORIZONTAL_FLIP_PROB = 0.5\n",
    "    VERTICAL_FLIP_PROB = 0.0  # Keep faces upright\n",
    "    \n",
    "    # Model settings\n",
    "    MODEL_TYPE = \"mobilenet_v3\"  # Lightweight and efficient\n",
    "    PRETRAINED = True\n",
    "    NUM_CLASSES = 1  # Face detection only\n",
    "    CONFIDENCE_THRESHOLD = 0.5\n",
    "    NMS_THRESHOLD = 0.4\n",
    "    \n",
    "    # Training settings\n",
    "    EPOCHS = 50\n",
    "    LEARNING_RATE = 0.001\n",
    "    WEIGHT_DECAY = 1e-4\n",
    "    SCHEDULER_STEP_SIZE = 10\n",
    "    SCHEDULER_GAMMA = 0.5\n",
    "    \n",
    "    # Real-time detection settings\n",
    "    FPS_TARGET = 15  # Process every 4th frame at 60fps\n",
    "    FRAME_SKIP = 4\n",
    "    DETECTION_INTERVAL = 3  # frames between detections\n",
    "    \n",
    "    # Paths\n",
    "    DATA_DIR = \"/kaggle/input/input-images-davido\"\n",
    "    SCREENSHOT_DIR = \"./output/screenshots\"\n",
    "    MODELS_DIR = \"./models\"\n",
    "    LOGS_DIR = \"./logs\"\n",
    "    OUTPUT_DIR = \"./output\"\n",
    "    \n",
    "    # Create directories\n",
    "    @staticmethod\n",
    "    def create_directories():\n",
    "        \"\"\"Create necessary directories\"\"\"\n",
    "        dirs = [Config.DATA_DIR, Config.MODELS_DIR, Config.LOGS_DIR, Config.OUTPUT_DIR, Config.SCREENSHOT_DIR]\n",
    "        for dir_path in dirs:\n",
    "            os.makedirs(dir_path, exist_ok=True)\n",
    "    \n",
    "    # Model export settings\n",
    "    EXPORT_FORMAT = \"pt\"  # PyTorch format for local use\n",
    "    MODEL_FILENAME = \"face_detection_model.pt\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2c04d603",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-28T17:26:27.024434Z",
     "iopub.status.busy": "2025-07-28T17:26:27.024224Z",
     "iopub.status.idle": "2025-07-28T17:26:37.820071Z",
     "shell.execute_reply": "2025-07-28T17:26:37.818978Z"
    },
    "papermill": {
     "duration": 10.829997,
     "end_time": "2025-07-28T17:26:37.821573",
     "exception": false,
     "start_time": "2025-07-28T17:26:26.991576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Section 1: Data Preparation ===\n",
      "Created data loaders:\n",
      "  Training: 1 batches\n",
      "  Validation: 1 batches\n",
      "Data preparation completed successfully!\n",
      "Testing data loading...\n",
      "Batch shape: torch.Size([16, 3, 160, 160])\n",
      "Labels: tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Section 1: Data Preparation\n",
    "Loads Kaggle dataset and implements data augmentation for facial detection\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import random\n",
    "import torch\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms\n",
    "from PIL import Image\n",
    "import pandas as pd\n",
    "from tqdm import tqdm\n",
    "# from config import Config\n",
    "\n",
    "class FaceRecognitionDataset(Dataset):\n",
    "    \"\"\"\n",
    "    Custom dataset for face recognition (classification)\n",
    "    Loads images and labels from a CSV file (filename,label)\n",
    "    \"\"\"\n",
    "    def __init__(self, data_dir, csv_file, transform=None, split='train', train_split=0.8):\n",
    "        self.data_dir = data_dir\n",
    "        self.transform = transform\n",
    "        self.class_names = Config.CLASS_NAMES\n",
    "        # Read CSV\n",
    "        df = pd.read_csv(os.path.join(data_dir, csv_file))\n",
    "        # Filter to only allowed classes\n",
    "        df = df[df['label'].isin(self.class_names)]\n",
    "        self.samples = list(zip(df['filename'], df['label']))\n",
    "        # Shuffle and split\n",
    "        random.shuffle(self.samples)\n",
    "        split_idx = int(len(self.samples) * train_split)\n",
    "        if split == 'train':\n",
    "            self.samples = self.samples[:split_idx]\n",
    "        else:\n",
    "            self.samples = self.samples[split_idx:]\n",
    "    def __len__(self):\n",
    "        return len(self.samples)\n",
    "    def __getitem__(self, idx):\n",
    "        fname, label = self.samples[idx]\n",
    "        img_path = os.path.join(self.data_dir, fname)\n",
    "        image = Image.open(img_path).convert('RGB')\n",
    "        label_idx = self.class_names.index(label)\n",
    "        if self.transform:\n",
    "            image = self.transform(image)\n",
    "        return {'image': image, 'label': label_idx, 'image_path': img_path}\n",
    "\n",
    "def get_transforms():\n",
    "    return transforms.Compose([\n",
    "        transforms.Resize(Config.IMAGE_SIZE),\n",
    "        transforms.RandomHorizontalFlip(),\n",
    "        transforms.ToTensor(),\n",
    "        transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5]),\n",
    "    ])\n",
    "\n",
    "class DatasetManager:\n",
    "    \"\"\"\n",
    "    Manages dataset preparation and loading for face recognition\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        Config.create_directories()\n",
    "    def prepare_data_loaders(self):\n",
    "        csv_file = 'labels.csv'\n",
    "        train_dataset = FaceRecognitionDataset(\n",
    "            Config.DATA_DIR,\n",
    "            csv_file=csv_file,\n",
    "            transform=get_transforms(),\n",
    "            split='train',\n",
    "            train_split=Config.TRAIN_SPLIT\n",
    "        )\n",
    "        val_dataset = FaceRecognitionDataset(\n",
    "            Config.DATA_DIR,\n",
    "            csv_file=csv_file,\n",
    "            transform=get_transforms(),\n",
    "            split='val',\n",
    "            train_split=Config.TRAIN_SPLIT\n",
    "        )\n",
    "        train_loader = DataLoader(\n",
    "            train_dataset,\n",
    "            batch_size=Config.BATCH_SIZE,\n",
    "            shuffle=True,\n",
    "            num_workers=min(Config.CPU_CORES, 4),\n",
    "            pin_memory=True,\n",
    "            drop_last=True\n",
    "        )\n",
    "        val_loader = DataLoader(\n",
    "            val_dataset,\n",
    "            batch_size=Config.BATCH_SIZE,\n",
    "            shuffle=False,\n",
    "            num_workers=min(Config.CPU_CORES, 4),\n",
    "            pin_memory=True\n",
    "        )\n",
    "        print(f\"Created data loaders:\")\n",
    "        print(f\"  Training: {len(train_loader)} batches\")\n",
    "        print(f\"  Validation: {len(val_loader)} batches\")\n",
    "        return train_loader, val_loader\n",
    "\n",
    "def main():\n",
    "    print(\"=== Section 1: Data Preparation ===\")\n",
    "    dataset_manager = DatasetManager()\n",
    "    train_loader, val_loader = dataset_manager.prepare_data_loaders()\n",
    "    if train_loader is not None:\n",
    "        print(\"Data preparation completed successfully!\")\n",
    "        print(\"Testing data loading...\")\n",
    "        for batch in train_loader:\n",
    "            print(f\"Batch shape: {batch['image'].shape}\")\n",
    "            print(f\"Labels: {batch['label']}\")\n",
    "            break\n",
    "    else:\n",
    "        print(\"Data preparation failed. Please check dataset availability.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main() "
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7959389,
     "sourceId": 12603149,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 108.004848,
   "end_time": "2025-07-28T17:26:39.276640",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-28T17:24:51.271792",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
