{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":20270,"databundleVersionId":1222630,"sourceType":"competition"}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#!pip install segmentation-models-pytorch albumentations","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:19.959805Z","iopub.execute_input":"2025-04-20T20:17:19.960361Z","iopub.status.idle":"2025-04-20T20:17:19.963494Z","shell.execute_reply.started":"2025-04-20T20:17:19.960337Z","shell.execute_reply":"2025-04-20T20:17:19.962892Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"#!pip install -U Albumentations","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:19.970806Z","iopub.execute_input":"2025-04-20T20:17:19.971027Z","iopub.status.idle":"2025-04-20T20:17:19.976801Z","shell.execute_reply.started":"2025-04-20T20:17:19.971012Z","shell.execute_reply":"2025-04-20T20:17:19.976172Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"import os\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\nimport segmentation_models_pytorch as smp\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\nimport pandas as pd\nimport numpy as np\nimport cv2\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:19.987389Z","iopub.execute_input":"2025-04-20T20:17:19.987628Z","iopub.status.idle":"2025-04-20T20:17:30.837984Z","shell.execute_reply.started":"2025-04-20T20:17:19.987613Z","shell.execute_reply":"2025-04-20T20:17:30.837385Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(f\"Using {device} device.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:30.839186Z","iopub.execute_input":"2025-04-20T20:17:30.839693Z","iopub.status.idle":"2025-04-20T20:17:30.940325Z","shell.execute_reply.started":"2025-04-20T20:17:30.839660Z","shell.execute_reply":"2025-04-20T20:17:30.939585Z"}},"outputs":[{"name":"stdout","text":"Using cuda device.\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"#!rm /kaggle/working/\"multimodal_unet.py\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:30.941214Z","iopub.execute_input":"2025-04-20T20:17:30.941509Z","iopub.status.idle":"2025-04-20T20:17:31.066726Z","shell.execute_reply.started":"2025-04-20T20:17:30.941471Z","shell.execute_reply":"2025-04-20T20:17:31.065972Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# %%writefile medical_datasets.py\n# import cv2\n# import numpy as np\n# import os\n# from torch.utils.data import Dataset\n\n# class MedicalDataset(Dataset):\n#     def __init__(self, df, image_dir, transform=None):\n#         self.df = df\n#         self.image_dir = image_dir\n#         self.transform = transform\n    \n#     def __len__(self):\n#         return len(self.df)\n    \n#     def __getitem__(self, idx):\n#         img_name = self.df.iloc[idx][\"image_name\"]\n#         img_path = os.path.join(self.image_dir, f\"{img_name}.jpg\")\n        \n#         image = cv2.imread(img_path)\n#         if image is None:\n#             print(f\"Warning: Failed to load image {img_path}. Using blank image.\")\n#             image = np.zeros((256, 256, 3), dtype=np.uint8)\n#         image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n#         label = self.df.iloc[idx][\"target\"].astype(np.float32)  # Binary classification label\n#         metadata = self.df.iloc[idx][[\"age_approx\", \"sex\"]].values.astype(np.float32)\n        \n#         if self.transform:\n#             augmented = self.transform(image=image)\n#             image = augmented[\"image\"]\n        \n#         return image, label, metadata","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.068623Z","iopub.execute_input":"2025-04-20T20:17:31.068867Z","iopub.status.idle":"2025-04-20T20:17:31.078702Z","shell.execute_reply.started":"2025-04-20T20:17:31.068849Z","shell.execute_reply":"2025-04-20T20:17:31.077961Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# %%writefile multimodal_class.py\n# import torch\n# import torch.nn as nn\n# import segmentation_models_pytorch as smp\n\n# class MultimodalClassifier(nn.Module):\n#     def __init__(self, encoder_name=\"resnet50\", encoder_weights=\"imagenet\", metadata_size=2):\n#         super(MultimodalClassifier, self).__init__()\n#         self.encoder = smp.Unet(encoder_name=encoder_name, encoder_weights=encoder_weights, in_channels=3, classes=1).encoder\n#         self.pool = nn.AdaptiveAvgPool2d(1)\n#         self.metadata_mlp = nn.Sequential(\n#             nn.Linear(metadata_size, 64), nn.ReLU(),\n#             nn.Linear(64, 128), nn.ReLU()\n#         )\n#         self.fc = nn.Linear(128 + 2048, 1)  # Adjust based on encoder output size\n    \n#     def forward(self, x, metadata):\n#         features = self.encoder(x)[-1]\n#         features = self.pool(features).view(features.size(0), -1)\n#         metadata_features = self.metadata_mlp(metadata)\n#         combined = torch.cat([features, metadata_features], dim=1)\n#         return self.fc(combined)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.079418Z","iopub.execute_input":"2025-04-20T20:17:31.079654Z","iopub.status.idle":"2025-04-20T20:17:31.093097Z","shell.execute_reply.started":"2025-04-20T20:17:31.079629Z","shell.execute_reply":"2025-04-20T20:17:31.092319Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"data_dir = \"/kaggle/input/siim-isic-melanoma-classification\"\nimage_dir = os.path.join(data_dir, \"jpeg/train\")\nmask_dir = None\ncsv_path = os.path.join(data_dir, \"train.csv\")\ndf = pd.read_csv(csv_path)\nprint(df.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.093759Z","iopub.execute_input":"2025-04-20T20:17:31.093973Z","iopub.status.idle":"2025-04-20T20:17:31.215091Z","shell.execute_reply.started":"2025-04-20T20:17:31.093933Z","shell.execute_reply":"2025-04-20T20:17:31.214302Z"}},"outputs":[{"name":"stdout","text":"     image_name  patient_id     sex  age_approx anatom_site_general_challenge  \\\n0  ISIC_2637011  IP_7279968    male        45.0                     head/neck   \n1  ISIC_0015719  IP_3075186  female        45.0               upper extremity   \n2  ISIC_0052212  IP_2842074  female        50.0               lower extremity   \n3  ISIC_0068279  IP_6890425  female        45.0                     head/neck   \n4  ISIC_0074268  IP_8723313  female        55.0               upper extremity   \n\n  diagnosis benign_malignant  target  \n0   unknown           benign       0  \n1   unknown           benign       0  \n2     nevus           benign       0  \n3   unknown           benign       0  \n4   unknown           benign       0  \n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"# Preprocessing the Metadata\nNeeds to encode the categorical `sex` vars and normalize the numerical `age_approx` col.","metadata":{}},{"cell_type":"code","source":"df[\"sex\"] = df[\"sex\"].map({\"male\": 0, \"female\": 1}).fillna(0)\ndf[\"age_approx\"] = (df[\"age_approx\"] - df[\"age_approx\"].mean()) / df[\"age_approx\"].std()\ndf = df.fillna(0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.215819Z","iopub.execute_input":"2025-04-20T20:17:31.216043Z","iopub.status.idle":"2025-04-20T20:17:31.248497Z","shell.execute_reply.started":"2025-04-20T20:17:31.216027Z","shell.execute_reply":"2025-04-20T20:17:31.247705Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"print(\"============= INFORMATION ===============\")\ndf.iloc[:, 2:4].info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.249340Z","iopub.execute_input":"2025-04-20T20:17:31.249567Z","iopub.status.idle":"2025-04-20T20:17:31.271731Z","shell.execute_reply.started":"2025-04-20T20:17:31.249546Z","shell.execute_reply":"2025-04-20T20:17:31.271170Z"}},"outputs":[{"name":"stdout","text":"============= INFORMATION ===============\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 33126 entries, 0 to 33125\nData columns (total 2 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   sex         33126 non-null  float64\n 1   age_approx  33126 non-null  float64\ndtypes: float64(2)\nmemory usage: 517.7 KB\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"## Dataset Splitting\nDetermiistic Splitting: Into 80% training, 20% validation","metadata":{}},{"cell_type":"code","source":"g = torch.Generator().manual_seed(42)\ntrain_df, val_df = train_test_split(df, test_size=0.2, random_state=42)\nprint(f\"Train: {len(train_df)}, Val: {len(val_df)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.272431Z","iopub.execute_input":"2025-04-20T20:17:31.272762Z","iopub.status.idle":"2025-04-20T20:17:31.282784Z","shell.execute_reply.started":"2025-04-20T20:17:31.272744Z","shell.execute_reply":"2025-04-20T20:17:31.282146Z"}},"outputs":[{"name":"stdout","text":"Train: 26500, Val: 6626\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"## Define Data Augmentation\n- Albumentations","metadata":{}},{"cell_type":"code","source":"image_height, image_width = 256, 256\n\ntrain_transform = A.Compose([\n    A.Resize(image_height, image_width),\n    A.HorizontalFlip(p=0.5),\n    A.RandomRotate90(p=0.5),\n    A.RandomBrightnessContrast(p=0.2),\n    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),\n    ToTensorV2()\n])\n\nval_transform = A.Compose([\n    A.Resize(image_height, image_width),\n    A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),\n    ToTensorV2()\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.285198Z","iopub.execute_input":"2025-04-20T20:17:31.285560Z","iopub.status.idle":"2025-04-20T20:17:31.296795Z","shell.execute_reply.started":"2025-04-20T20:17:31.285544Z","shell.execute_reply":"2025-04-20T20:17:31.296029Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"from medical_datasets import MedicalDataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.297468Z","iopub.execute_input":"2025-04-20T20:17:31.297684Z","iopub.status.idle":"2025-04-20T20:17:31.307756Z","shell.execute_reply.started":"2025-04-20T20:17:31.297668Z","shell.execute_reply":"2025-04-20T20:17:31.307066Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"MedicalDataset?","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.308396Z","iopub.execute_input":"2025-04-20T20:17:31.308658Z","iopub.status.idle":"2025-04-20T20:17:31.350922Z","shell.execute_reply.started":"2025-04-20T20:17:31.308636Z","shell.execute_reply":"2025-04-20T20:17:31.350434Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[0;31mInit signature:\u001b[0m \u001b[0mMedicalDataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimage_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;31mDocstring:\u001b[0m     \nAn abstract class representing a :class:`Dataset`.\n\nAll datasets that represent a map from keys to data samples should subclass\nit. All subclasses should overwrite :meth:`__getitem__`, supporting fetching a\ndata sample for a given key. Subclasses could also optionally overwrite\n:meth:`__len__`, which is expected to return the size of the dataset by many\n:class:`~torch.utils.data.Sampler` implementations and the default options\nof :class:`~torch.utils.data.DataLoader`. Subclasses could also\noptionally implement :meth:`__getitems__`, for speedup batched samples\nloading. This method accepts list of indices of samples of batch and returns\nlist of samples.\n\n.. note::\n  :class:`~torch.utils.data.DataLoader` by default constructs an index\n  sampler that yields integral indices.  To make it work with a map-style\n  dataset with non-integral indices/keys, a custom sampler must be provided.\n\u001b[0;31mFile:\u001b[0m           /kaggle/working/medical_datasets.py\n\u001b[0;31mType:\u001b[0m           type\n\u001b[0;31mSubclasses:\u001b[0m     \n"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"## Creating DataLoaders\nInitializing datasets and DataLoaders with a batch_size of 16.","metadata":{}},{"cell_type":"code","source":"batch_size = 16\ntrain_dataset = MedicalDataset(train_df, image_dir,transform=train_transform)\nval_dataset = MedicalDataset(val_df, image_dir, transform=val_transform)\n\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=2, generator=g)\nval_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.351491Z","iopub.execute_input":"2025-04-20T20:17:31.351661Z","iopub.status.idle":"2025-04-20T20:17:31.356008Z","shell.execute_reply.started":"2025-04-20T20:17:31.351648Z","shell.execute_reply":"2025-04-20T20:17:31.355474Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"try:\n    for images, masks, metadata in train_loader:\n        print(f\"Images shape: {images.shape}\")  # Expected: [16, 3, 256, 256]\n        print(f\"Masks shape: {masks.shape}\")   # Expected: [16, 1, 256, 256]\n        print(f\"Metadata shape: {metadata.shape}\")  # Expected: [16, 2]\n        break\nexcept Exception as e:\n    print(f\"DataLoader error: {e}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:31.356589Z","iopub.execute_input":"2025-04-20T20:17:31.356752Z","iopub.status.idle":"2025-04-20T20:17:35.220859Z","shell.execute_reply.started":"2025-04-20T20:17:31.356739Z","shell.execute_reply":"2025-04-20T20:17:35.220081Z"}},"outputs":[{"name":"stdout","text":"Images shape: torch.Size([16, 3, 256, 256])\nMasks shape: torch.Size([16])\nMetadata shape: torch.Size([16, 2])\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"# missing_files = []\n# for img_name in train_df[\"image_name\"]:\n#     img_path = os.path.join(image_dir, f\"{img_name}.jpg\")\n#     if not os.path.exists(img_path):\n#         missing_files.append(img_path)\n# if missing_files:\n#     print(f\"Missing {len(missing_files)} files, e.g., {missing_files[:5]}\")\n# else:\n#     print(\"All image files found.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:35.221967Z","iopub.execute_input":"2025-04-20T20:17:35.222247Z","iopub.status.idle":"2025-04-20T20:17:35.226664Z","shell.execute_reply.started":"2025-04-20T20:17:35.222219Z","shell.execute_reply":"2025-04-20T20:17:35.225955Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"## Defining Multimodal U-Net Model\n- Define the model\n- Freeze Encoder Weights of `ResNet50` TL\n- Loss definition (`Dice` + `BCE`)\n- Optimizer Definition (`Adam`)\n- Callbacks (`lr` scheduling, early-stopping, and checkpointing)","metadata":{}},{"cell_type":"code","source":"# point 1\nfrom multimodal_class import MultimodalClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:35.227420Z","iopub.execute_input":"2025-04-20T20:17:35.227619Z","iopub.status.idle":"2025-04-20T20:17:35.240242Z","shell.execute_reply.started":"2025-04-20T20:17:35.227593Z","shell.execute_reply":"2025-04-20T20:17:35.239688Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"model = MultimodalClassifier().to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:35.241114Z","iopub.execute_input":"2025-04-20T20:17:35.241371Z","iopub.status.idle":"2025-04-20T20:17:36.945482Z","shell.execute_reply.started":"2025-04-20T20:17:35.241349Z","shell.execute_reply":"2025-04-20T20:17:36.944904Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/156 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f9be15ca594f45e3aaaf99e5d0245b5e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/102M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aedc486b85d64f9fb12c9f2d8aa62ade"}},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"# Point 2\nfor param in model.encoder.parameters():\n    param.requires_grad = False","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:36.946232Z","iopub.execute_input":"2025-04-20T20:17:36.946552Z","iopub.status.idle":"2025-04-20T20:17:36.950739Z","shell.execute_reply.started":"2025-04-20T20:17:36.946534Z","shell.execute_reply":"2025-04-20T20:17:36.950065Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"import pandas as pd\n\n# Load train.csv to calculate class imbalance\n\nnum_negative = len(df[df[\"target\"] == 0])\nnum_positive = len(df[df[\"target\"] == 1])\npos_weight_value = num_negative / num_positive if num_positive > 0 else 10.0  # Fallback to 10.0 if no positives\nprint(f\"Negative samples: {num_negative}, Positive samples: {num_positive}, pos_weight: {pos_weight_value:.2f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:36.951419Z","iopub.execute_input":"2025-04-20T20:17:36.951671Z","iopub.status.idle":"2025-04-20T20:17:36.970597Z","shell.execute_reply.started":"2025-04-20T20:17:36.951656Z","shell.execute_reply":"2025-04-20T20:17:36.970026Z"}},"outputs":[{"name":"stdout","text":"Negative samples: 32542, Positive samples: 584, pos_weight: 55.72\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"# Point 3\n\n# Define loss with class imbalance correction\npos_weight = torch.tensor([pos_weight_value]).to(device)\nloss_fn = nn.BCEWithLogitsLoss(pos_weight=pos_weight)\n\noptimizer = optim.AdamW(model.parameters(), lr=1e-4)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:36.971381Z","iopub.execute_input":"2025-04-20T20:17:36.971625Z","iopub.status.idle":"2025-04-20T20:17:36.976856Z","shell.execute_reply.started":"2025-04-20T20:17:36.971609Z","shell.execute_reply":"2025-04-20T20:17:36.976309Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"optimizer = optim.AdamW(model.parameters(), lr=1e-4)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=\"min\", factor=0.5, patience=3)\ncheckpoint_path = \"/kaggle/working/best_model.pth\"\nearly_stopping_patience = 5\nbest_val_loss = float(\"inf\")\npatience_counter = 0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:36.977565Z","iopub.execute_input":"2025-04-20T20:17:36.977849Z","iopub.status.idle":"2025-04-20T20:17:36.988819Z","shell.execute_reply.started":"2025-04-20T20:17:36.977833Z","shell.execute_reply":"2025-04-20T20:17:36.988269Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"# # Load checkpoint\n# checkpoint_path = \"/kaggle/working/best_model.pth\"\n# if os.path.exists(checkpoint_path):\n#     checkpoint = torch.load(checkpoint_path, map_location=device)\n#     model.load_state_dict(checkpoint[\"model_state_dict\"])\n#     optimizer.load_state_dict(checkpoint[\"optimizer_state_dict\"])\n#     start_epoch = checkpoint[\"epoch\"] + 1  # Resume from next epoch\n#     best_val_loss = checkpoint[\"val_loss\"]\n#     print(f\"Resuming training from epoch {start_epoch}, best val loss: {best_val_loss:.4f}\")\n# else:\n#     print(f\"Checkpoint not found at {checkpoint_path}. Starting from scratch.\")\n#     start_epoch = 0\n#     best_val_loss = float(\"inf\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:36.989592Z","iopub.execute_input":"2025-04-20T20:17:36.989812Z","iopub.status.idle":"2025-04-20T20:17:37.000497Z","shell.execute_reply.started":"2025-04-20T20:17:36.989789Z","shell.execute_reply":"2025-04-20T20:17:36.999962Z"}},"outputs":[],"execution_count":28},{"cell_type":"markdown","source":"## Training the Model\n- Point1: Train for one epoch for defining the training function\n- Point2: Train for 20 epochs first to see if there is a call back following worse loss","metadata":{}},{"cell_type":"code","source":"# Point 1\n\ndef train_one_epoch(model, loader, loss_fn, optimizer, device):\n    model.train()\n    running_loss = 0.0\n    all_preds, all_labels = [], []\n    \n    for images, labels, metadata in tqdm(loader):\n        images, labels, metadata = images.to(device), labels.to(device), metadata.to(device)\n        optimizer.zero_grad()\n        outputs = model(images, metadata).squeeze(1)  # [batch_size]\n        loss = loss_fn(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n        \n        # Compute predictions for accuracy\n        preds = torch.sigmoid(outputs) > 0.5  # Apply sigmoid and threshold\n        all_preds.extend(preds.cpu().numpy())\n        all_labels.extend(labels.cpu().numpy())\n    \n    train_loss = running_loss / len(loader)\n    train_accuracy = accuracy_score(all_labels, all_preds)\n    return train_loss, train_accuracy\n\n\ndef validate(model, loader, loss_fn, device):\n    model.eval()\n    running_loss = 0.0\n    all_preds, all_labels = [], []\n    \n    with torch.no_grad():\n        for images, labels, metadata in loader:\n            images, labels, metadata = images.to(device), labels.to(device), metadata.to(device)\n            outputs = model(images, metadata).squeeze(1)\n            loss = loss_fn(outputs, labels)\n            running_loss += loss.item()\n            \n            # Compute predictions for accuracy\n            preds = torch.sigmoid(outputs) > 0.5\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n    \n    val_loss = running_loss / len(loader)\n    val_accuracy = accuracy_score(all_labels, all_preds)\n    return val_loss, val_accuracy","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:37.001226Z","iopub.execute_input":"2025-04-20T20:17:37.001526Z","iopub.status.idle":"2025-04-20T20:17:37.013608Z","shell.execute_reply.started":"2025-04-20T20:17:37.001500Z","shell.execute_reply":"2025-04-20T20:17:37.012821Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# # Training loop\n# epochs = 20\n# train_losses = []\n# val_losses = []\n\n# for epoch in range(start_epoch, epochs):\n#     train_loss = train_one_epoch(model, train_loader, loss_fn, optimizer, device)\n#     val_loss = validate(model, val_loader, loss_fn, device)\n    \n#     train_losses.append(train_loss)\n#     val_losses.append(val_loss)\n    \n#     print(f\"Epoch {epoch+1}/{epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}\")\n    \n#     scheduler.step(val_loss)\n    \n#     if val_loss < best_val_loss:\n#         best_val_loss = val_loss\n#         patience_counter = 0\n#         torch.save({\n#             \"model_state_dict\": model.state_dict(),\n#             \"optimizer_state_dict\": optimizer.state_dict(),\n#             \"epoch\": epoch,\n#             \"val_loss\": val_loss\n#         }, checkpoint_path)\n#         print(f\"Checkpoint saved at epoch {epoch+1}\")\n#     else:\n#         patience_counter += 1\n#         if patience_counter >= early_stopping_patience:\n#             print(\"Early stopping triggered\")\n#             break\n\n# plt.figure(figsize=(12, 5))\n# plt.plot(range(start_epoch+1, len(train_losses)+start_epoch+1), train_losses, label=\"Training Loss\")\n# plt.plot(range(start_epoch+1, len(val_losses)+start_epoch+1), val_losses, label=\"Validation Loss\")\n# plt.title(\"Loss over Epochs\")\n# plt.xlabel(\"Epochs\")\n# plt.ylabel(\"Loss\")\n# plt.legend()\n# plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:37.014398Z","iopub.execute_input":"2025-04-20T20:17:37.014596Z","iopub.status.idle":"2025-04-20T20:17:37.027831Z","shell.execute_reply.started":"2025-04-20T20:17:37.014575Z","shell.execute_reply":"2025-04-20T20:17:37.027237Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"# Point 2\n\n# Training loop\nepochs = 20\ntrain_losses, val_losses = [], []\ntrain_accuracies, val_accuracies = [], []  # New lists for accuracies\n\nfor epoch in range(epochs):\n    train_loss, train_accuracy = train_one_epoch(model, train_loader, loss_fn, optimizer, device)\n    val_loss, val_accuracy = validate(model, val_loader, loss_fn, device)\n    \n    train_losses.append(train_loss)\n    val_losses.append(val_loss)\n    train_accuracies.append(train_accuracy)\n    val_accuracies.append(val_accuracy)\n    \n    print(f\"Epoch {epoch+1}/{epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, \"\n          f\"Train Accuracy: {train_accuracy:.4f}, Val Accuracy: {val_accuracy:.4f}\")\n    \n    scheduler.step(val_loss)\n    \n    if val_loss < best_val_loss:\n        best_val_loss = val_loss\n        patience_counter = 0\n        torch.save({\n            \"model_state_dict\": model.state_dict(),\n            \"optimizer_state_dict\": optimizer.state_dict(),\n            \"epoch\": epoch,\n            \"val_loss\": val_loss\n        }, checkpoint_path)\n        print(f\"Checkpoint saved at epoch {epoch+1}\")\n    else:\n        patience_counter += 1\n        if patience_counter >= early_stopping_patience:\n            print(\"Early stopping triggered\")\n            break\n\n# Plot losses and accuracies\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.plot(train_losses, label=\"Training Loss\")\nplt.plot(val_losses, label=\"Validation Loss\")\nplt.title(\"Loss over Epochs\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(train_accuracies, label=\"Training Accuracy\")\nplt.plot(val_accuracies, label=\"Validation Accuracy\")\nplt.title(\"Accuracy over Epochs\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\n\nplt.tight_layout()\nplt.show();","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T20:17:37.028535Z","iopub.execute_input":"2025-04-20T20:17:37.028767Z"}},"outputs":[{"name":"stderr","text":"  4%|▍         | 66/1657 [01:06<28:52,  1.09s/it] ","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"def save_predictions(model, loader, device, output_path=\"/kaggle/working/predictions.csv\"):\n    model.eval()\n    results = []\n    with torch.no_grad():\n        for images, labels, metadata in loader:\n            images, labels, metadata = images.to(device), labels.to(device), metadata.to(device)\n            outputs = torch.sigmoid(model(images, metadata).squeeze(1))\n            preds = (outputs > 0.5).float()\n            probs = outputs.cpu().numpy()\n            for img_name, prob, pred, label in zip(loader.dataset.df[\"image_name\"], probs, preds, labels):\n                results.append({\"image_name\": img_name, \"probability\": prob, \"prediction\": pred.item(), \"true_label\": label.item()})\n    \n    pd.DataFrame(results).to_csv(output_path, index=False)\n    print(f\"Predictions saved to {output_path}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Evaluate and visualize\ncheckpoint = torch.load(checkpoint_path, map_location=device)\nmodel.load_state_dict(checkpoint[\"model_state_dict\"])\nevaluate(model, val_loader, device)\nvisualize_predictions(model, val_loader, device)\nsave_predictions(model, val_loader, device)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_recall_fscore_support\nimport numpy as np\n\ndef evaluate(model, loader, device):\n    model.eval()\n    all_preds, all_labels = [], []\n    with torch.no_grad():\n        for images, labels, metadata in loader:\n            images, labels, metadata = images.to(device), labels.to(device), metadata.to(device)\n            outputs = torch.sigmoid(model(images, metadata).squeeze(1))  # Apply sigmoid for probabilities\n            preds = (outputs > 0.5).float()  # Threshold at 0.5\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n    \n    accuracy = accuracy_score(all_labels, all_preds)\n    precision, recall, f1, _ = precision_recall_fscore_support(all_labels, all_preds, average=\"binary\")\n    print(f\"Accuracy: {accuracy:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1: {f1:.4f}\")\n\n# Load best model and evaluate\ncheckpoint = torch.load(checkpoint_path)\nmodel.load_state_dict(checkpoint[\"model_state_dict\"])\nevaluate(model, val_loader, device)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-04-20T02:11:28.693Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Visualization","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ndef visualize_predictions(model, loader, device, num_samples=5):\n    model.eval()\n    images, labels, metadata = next(iter(loader))\n    images, labels, metadata = images.to(device), labels.to(device), metadata.to(device)\n    with torch.no_grad():\n        outputs = torch.sigmoid(model(images, metadata).squeeze(1))\n        preds = (outputs > 0.5).float()\n    \n    for i in range(min(num_samples, len(images))):\n        plt.figure(figsize=(5, 5))\n        plt.imshow(images[i].cpu().permute(1, 2, 0).numpy())\n        plt.title(f\"True: {labels[i].item()}, Pred: {preds[i].item()}\")\n        plt.axis(\"off\")\n        plt.show()\n\n    # Confusion matrix\n    all_preds, all_labels = [], []\n    with torch.no_grad():\n        for images, labels, metadata in loader:\n            images, labels, metadata = images.to(device), labels.to(device), metadata.to(device)\n            outputs = torch.sigmoid(model(images, metadata).squeeze(1))\n            preds = (outputs > 0.5).float()\n            all_preds.extend(preds.cpu().numpy())\n            all_labels.extend(labels.cpu().numpy())\n    \n    cm = confusion_matrix(all_labels, all_preds)\n    plt.figure(figsize=(6, 6))\n    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\n    plt.title(\"Confusion Matrix\")\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"True\")\n    plt.show()\n\nvisualize_predictions(model, val_loader, device)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-04-20T02:11:28.697Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Saving Output","metadata":{}},{"cell_type":"code","source":"def save_predictions(model, loader, device, output_path=\"/kaggle/working/predictions.csv\"):\n    model.eval()\n    results = []\n    with torch.no_grad():\n        for images, labels, metadata in loader:\n            images, labels, metadata = images.to(device), labels.to(device), metadata.to(device)\n            outputs = torch.sigmoid(model(images, metadata).squeeze(1))\n            preds = (outputs > 0.5).float()\n            probs = outputs.cpu().numpy()\n            for img_name, prob, pred, label in zip(loader.dataset.df[\"image_name\"], probs, preds, labels):\n                results.append({\"image_name\": img_name, \"probability\": prob, \"prediction\": pred.item(), \"true_label\": label.item()})\n    \n    pd.DataFrame(results).to_csv(output_path, index=False)\n    print(f\"Predictions saved to {output_path}\")\n\nsave_predictions(model, val_loader, device)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-04-20T02:11:28.699Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Submission","metadata":{}},{"cell_type":"code","source":"test_df = pd.read_csv(os.path.join(data_dir, \"test.csv\"))\ntest_dataset = MedicalDataset(test_df, os.path.join(data_dir, \"jpeg/test\"), transform=val_transform)\ntest_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=2)\nresults = []\nmodel.eval()\nwith torch.no_grad():\n    for images, _, metadata in test_loader:\n        images, metadata = images.to(device), metadata.to(device)\n        outputs = torch.sigmoid(model(images, metadata).squeeze(1))\n        results.extend(outputs.cpu().numpy())\npd.DataFrame({\"image_name\": test_df[\"image_name\"], \"target\": results}).to_csv(\"/kaggle/working/submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-04-19T23:50:25.677Z"}},"outputs":[],"execution_count":null}]}